
avi_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800e360  0800e360  0000f360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e834  0800e834  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e834  0800e834  0000f834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e83c  0800e83c  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e83c  0800e83c  0000f83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e840  0800e840  0000f840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800e844  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e6c  240001d8  0800ea1c  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001044  0800ea1c  00011044  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc1c  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  0002fe22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001315  00000000  00000000  00034ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d70e  00000000  00000000  000361fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df34  00000000  00000000  0007390b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194b19  00000000  00000000  0009183f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00226358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007874  00000000  00000000  0022639c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0022dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e344 	.word	0x0800e344

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800e344 	.word	0x0800e344

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <ReadTemp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ReadTemp()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  int16_t temp16;
  HAL_UART_Receive(&huart2, temp_b, sizeof(temp_b), 1);
 800084e:	2301      	movs	r3, #1
 8000850:	2202      	movs	r2, #2
 8000852:	491e      	ldr	r1, [pc, #120]	@ (80008cc <ReadTemp+0x84>)
 8000854:	481e      	ldr	r0, [pc, #120]	@ (80008d0 <ReadTemp+0x88>)
 8000856:	f00a f821 	bl	800a89c <HAL_UART_Receive>
  temp16 = (temp_b[0] << 8) | temp_b[1];
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <ReadTemp+0x84>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b21b      	sxth	r3, r3
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <ReadTemp+0x84>)
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	b21b      	sxth	r3, r3
 800086a:	4313      	orrs	r3, r2
 800086c:	80fb      	strh	r3, [r7, #6]
  temp16 >>=3;
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	10db      	asrs	r3, r3, #3
 8000874:	80fb      	strh	r3, [r7, #6]
  if(temp16 & 0x1000){
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d011      	beq.n	80008a4 <ReadTemp+0x5c>
  		temp_s1 = (temp16 - 8192)/16.0;
 8000880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000884:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8000888:	ee07 3a90 	vmov	s15, r3
 800088c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000890:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000894:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000898:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <ReadTemp+0x8c>)
 800089e:	edc3 7a00 	vstr	s15, [r3]
  	}else{
  		temp_s1 = temp16 / 16.0;
  	}
}
 80008a2:	e00e      	b.n	80008c2 <ReadTemp+0x7a>
  		temp_s1 = temp16 / 16.0;
 80008a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008b0:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80008b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <ReadTemp+0x8c>)
 80008be:	edc3 7a00 	vstr	s15, [r3]
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	240003d8 	.word	0x240003d8
 80008d0:	240002ac 	.word	0x240002ac
 80008d4:	240003d4 	.word	0x240003d4

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	ed2d 8b0e 	vpush	{d8-d14}
 80008de:	b0a8      	sub	sp, #160	@ 0xa0
 80008e0:	af1c      	add	r7, sp, #112	@ 0x70
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008e8:	bf00      	nop
 80008ea:	4b8d      	ldr	r3, [pc, #564]	@ (8000b20 <main+0x248>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <main+0x28>
 80008f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dcf4      	bgt.n	80008ea <main+0x12>
  if ( timeout < 0 )
 8000900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000902:	2b00      	cmp	r3, #0
 8000904:	da01      	bge.n	800090a <main+0x32>
  {
  Error_Handler();
 8000906:	f000 fba5 	bl	8001054 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f003 fb03 	bl	8003f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f917 	bl	8000b40 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000912:	4b83      	ldr	r3, [pc, #524]	@ (8000b20 <main+0x248>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a81      	ldr	r2, [pc, #516]	@ (8000b20 <main+0x248>)
 800091a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b7f      	ldr	r3, [pc, #508]	@ (8000b20 <main+0x248>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000930:	2000      	movs	r0, #0
 8000932:	f005 fb81 	bl	8006038 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f005 fb97 	bl	800606c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800093e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000944:	bf00      	nop
 8000946:	4b76      	ldr	r3, [pc, #472]	@ (8000b20 <main+0x248>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d104      	bne.n	800095c <main+0x84>
 8000952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000958:	2b00      	cmp	r3, #0
 800095a:	dcf4      	bgt.n	8000946 <main+0x6e>
if ( timeout < 0 )
 800095c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095e:	2b00      	cmp	r3, #0
 8000960:	da01      	bge.n	8000966 <main+0x8e>
{
Error_Handler();
 8000962:	f000 fb77 	bl	8001054 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 fab5 	bl	8000ed4 <MX_GPIO_Init>
  MX_I2C4_Init();
 800096a:	f000 f9db 	bl	8000d24 <MX_I2C4_Init>
  MX_USART3_UART_Init();
 800096e:	f000 fa65 	bl	8000e3c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000972:	f000 fa17 	bl	8000da4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000976:	f000 f95b 	bl	8000c30 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  IMU_Config imu_cfg = {
 800097a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b24 <main+0x24c>)
 800097c:	f107 0408 	add.w	r4, r7, #8
 8000980:	461d      	mov	r5, r3
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	e895 0003 	ldmia.w	r5, {r0, r1}
 800098a:	e884 0003 	stmia.w	r4, {r0, r1}
		  .intnPort = GPIOC,
		  .intnPin = GPIO_PIN_8,
		  .rstPort = GPIOF,
		  .rstPin = GPIO_PIN_8
  };
  SH2_HAL_Setup(&imu_cfg);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4618      	mov	r0, r3
 8000994:	f002 faf6 	bl	8002f84 <SH2_HAL_Setup>
  IMU_Init();
 8000998:	f002 fbc6 	bl	8003128 <IMU_Init>
  //HAL_UART_Receive_IT(&huart2, temp_b, sizeof(temp_b));
  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a0:	f003 fb4a 	bl	8004038 <HAL_Delay>
  uint16_t raw_adc = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  float iv = 0;
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  float mv = 0;
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]

  while (1)
  {
	  IMU_Service();
 80009b4:	f002 fbec 	bl	8003190 <IMU_Service>
	  ReadTemp(&huart2);
 80009b8:	485b      	ldr	r0, [pc, #364]	@ (8000b28 <main+0x250>)
 80009ba:	f7ff ff45 	bl	8000848 <ReadTemp>
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
	             imuData.ax, imuData.ay, imuData.az,
 80009be:	4b5b      	ldr	r3, [pc, #364]	@ (8000b2c <main+0x254>)
 80009c0:	edd3 7a00 	vldr	s15, [r3]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 80009c4:	eeb7 eae7 	vcvt.f64.f32	d14, s15
	             imuData.ax, imuData.ay, imuData.az,
 80009c8:	4b58      	ldr	r3, [pc, #352]	@ (8000b2c <main+0x254>)
 80009ca:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 80009ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	             imuData.ax, imuData.ay, imuData.az,
 80009d2:	4b56      	ldr	r3, [pc, #344]	@ (8000b2c <main+0x254>)
 80009d4:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 80009d8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
	             imuData.gx, imuData.gy, imuData.gz,
 80009dc:	4b53      	ldr	r3, [pc, #332]	@ (8000b2c <main+0x254>)
 80009de:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 80009e2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
	             imuData.gx, imuData.gy, imuData.gz,
 80009e6:	4b51      	ldr	r3, [pc, #324]	@ (8000b2c <main+0x254>)
 80009e8:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 80009ec:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
	             imuData.gx, imuData.gy, imuData.gz,
 80009f0:	4b4e      	ldr	r3, [pc, #312]	@ (8000b2c <main+0x254>)
 80009f2:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 80009f6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
				 imuData.mx, imuData.my, imuData.mz,
 80009fa:	4b4c      	ldr	r3, [pc, #304]	@ (8000b2c <main+0x254>)
 80009fc:	edd3 2a06 	vldr	s5, [r3, #24]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a00:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
				 imuData.mx, imuData.my, imuData.mz,
 8000a04:	4b49      	ldr	r3, [pc, #292]	@ (8000b2c <main+0x254>)
 8000a06:	edd3 1a07 	vldr	s3, [r3, #28]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a0a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
				 imuData.mx, imuData.my, imuData.mz,
 8000a0e:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <main+0x254>)
 8000a10:	edd3 0a08 	vldr	s1, [r3, #32]
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a14:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
				 imuData.r, imuData.i, imuData.j, imuData.k,
 8000a18:	4b44      	ldr	r3, [pc, #272]	@ (8000b2c <main+0x254>)
 8000a1a:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a1e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
				 imuData.r, imuData.i, imuData.j, imuData.k,
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <main+0x254>)
 8000a24:	ed93 9a09 	vldr	s18, [r3, #36]	@ 0x24
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a28:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
				 imuData.r, imuData.i, imuData.j, imuData.k,
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <main+0x254>)
 8000a2e:	ed93 aa0a 	vldr	s20, [r3, #40]	@ 0x28
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a32:	eeb7 aaca 	vcvt.f64.f32	d10, s20
				 imuData.r, imuData.i, imuData.j, imuData.k,
 8000a36:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <main+0x254>)
 8000a38:	ed93 ba0b 	vldr	s22, [r3, #44]	@ 0x2c
	  printf("A: X=%.2f Y=%.2f Z=%.2f | G: X=%.2f Y=%.2f Z=%.2f | M: X=%.2f Y=%.2f Z=%.2f | r=%.3f x=%.3f y=%.3f z=%.3f | Temp= %.2f C | VBatt = %.2f \r\n",
 8000a3c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8000a40:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <main+0x258>)
 8000a42:	ed93 ca00 	vldr	s24, [r3]
 8000a46:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8000a4a:	ed97 da0a 	vldr	s26, [r7, #40]	@ 0x28
 8000a4e:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 8000a52:	ed8d db1a 	vstr	d13, [sp, #104]	@ 0x68
 8000a56:	ed8d cb18 	vstr	d12, [sp, #96]	@ 0x60
 8000a5a:	ed8d bb16 	vstr	d11, [sp, #88]	@ 0x58
 8000a5e:	ed8d ab14 	vstr	d10, [sp, #80]	@ 0x50
 8000a62:	ed8d 9b12 	vstr	d9, [sp, #72]	@ 0x48
 8000a66:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
 8000a6a:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8000a6e:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8000a72:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000a76:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000a7a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000a7e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000a82:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a86:	ed8d 7b00 	vstr	d7, [sp]
 8000a8a:	ec53 2b1e 	vmov	r2, r3, d14
 8000a8e:	4829      	ldr	r0, [pc, #164]	@ (8000b34 <main+0x25c>)
 8000a90:	f00b fd4e 	bl	800c530 <iprintf>
				 temp_s1, iv);
	  if(tare_request == 1){
 8000a94:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <main+0x260>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d104      	bne.n	8000aa8 <main+0x1d0>
		  tare_request = 0;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <main+0x260>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		  Tare();
 8000aa4:	f002 fbca 	bl	800323c <Tare>
	  }
	  HAL_ADC_Start(&hadc1);
 8000aa8:	4824      	ldr	r0, [pc, #144]	@ (8000b3c <main+0x264>)
 8000aaa:	f003 ff13 	bl	80048d4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000aae:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab2:	4822      	ldr	r0, [pc, #136]	@ (8000b3c <main+0x264>)
 8000ab4:	f004 f80c 	bl	8004ad0 <HAL_ADC_PollForConversion>
	  raw_adc = HAL_ADC_GetValue(&hadc1);
 8000ab8:	4820      	ldr	r0, [pc, #128]	@ (8000b3c <main+0x264>)
 8000aba:	f004 f8fd 	bl	8004cb8 <HAL_ADC_GetValue>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  HAL_ADC_Stop(&hadc1);
 8000ac2:	481e      	ldr	r0, [pc, #120]	@ (8000b3c <main+0x264>)
 8000ac4:	f003 ffd0 	bl	8004a68 <HAL_ADC_Stop>
	  mv = (3.3 * raw_adc) / 65536;
 8000ac8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ad2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8000b08 <main+0x230>
 8000ad6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ada:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8000b10 <main+0x238>
 8000ade:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ae2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ae6:	edc7 7a08 	vstr	s15, [r7, #32]
	  iv = mv * ((68.0 + 15.0) / 15.0);
 8000aea:	edd7 7a08 	vldr	s15, [r7, #32]
 8000aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000b18 <main+0x240>
 8000af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000afe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	  IMU_Service();
 8000b02:	e757      	b.n	80009b4 <main+0xdc>
 8000b04:	f3af 8000 	nop.w
 8000b08:	66666666 	.word	0x66666666
 8000b0c:	400a6666 	.word	0x400a6666
 8000b10:	00000000 	.word	0x00000000
 8000b14:	40f00000 	.word	0x40f00000
 8000b18:	22222222 	.word	0x22222222
 8000b1c:	40162222 	.word	0x40162222
 8000b20:	58024400 	.word	0x58024400
 8000b24:	0800e3ec 	.word	0x0800e3ec
 8000b28:	240002ac 	.word	0x240002ac
 8000b2c:	240005a4 	.word	0x240005a4
 8000b30:	240003d4 	.word	0x240003d4
 8000b34:	0800e360 	.word	0x0800e360
 8000b38:	240003da 	.word	0x240003da
 8000b3c:	240001f4 	.word	0x240001f4

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	@ 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	224c      	movs	r2, #76	@ 0x4c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00b fd43 	bl	800c5da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00b fd3d 	bl	800c5da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b60:	2004      	movs	r0, #4
 8000b62:	f006 f87f 	bl	8006c64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b76:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b88:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9c:	bf00      	nop
 8000b9e:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000baa:	d1f8      	bne.n	8000b9e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <SystemClock_Config+0xec>)
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	f023 0303 	bic.w	r3, r3, #3
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c2c <SystemClock_Config+0xec>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f006 f89e 	bl	8006d18 <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000be2:	f000 fa37 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	233f      	movs	r3, #63	@ 0x3f
 8000be8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 fcde 	bl	80075cc <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c16:	f000 fa1d 	bl	8001054 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3770      	adds	r7, #112	@ 0x70
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	58000400 	.word	0x58000400
 8000c28:	58024800 	.word	0x58024800
 8000c2c:	58024400 	.word	0x58024400

08000c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c56:	4a32      	ldr	r2, [pc, #200]	@ (8000d20 <MX_ADC1_Init+0xf0>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cba:	f003 fc69 	bl	8004590 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 f9c6 	bl	8001054 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4812      	ldr	r0, [pc, #72]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000cd4:	f004 fdc6 	bl	8005864 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cde:	f000 f9b9 	bl	8001054 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_ADC1_Init+0xec>)
 8000d06:	f003 ffe5 	bl	8004cd4 <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d10:	f000 f9a0 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	240001f4 	.word	0x240001f4
 8000d20:	40022000 	.word	0x40022000

08000d24 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d9c <MX_I2C4_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <MX_I2C4_Init+0x7c>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d5e:	480e      	ldr	r0, [pc, #56]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d60:	f005 f998 	bl	8006094 <HAL_I2C_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f000 f973 	bl	8001054 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d72:	f005 fedf 	bl	8006b34 <HAL_I2CEx_ConfigAnalogFilter>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d7c:	f000 f96a 	bl	8001054 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_I2C4_Init+0x74>)
 8000d84:	f005 ff21 	bl	8006bca <HAL_I2CEx_ConfigDigitalFilter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f961 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24000258 	.word	0x24000258
 8000d9c:	58001c00 	.word	0x58001c00
 8000da0:	10707dbc 	.word	0x10707dbc

08000da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	@ (8000e38 <MX_USART2_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000dee:	f009 fc77 	bl	800a6e0 <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f92c 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000e00:	f00a fdd5 	bl	800b9ae <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 f923 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000e12:	f00a fe0a 	bl	800ba2a <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f91a 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_USART2_UART_Init+0x90>)
 8000e22:	f00a fd8b 	bl	800b93c <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f912 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	240002ac 	.word	0x240002ac
 8000e38:	40004400 	.word	0x40004400

08000e3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e40:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	@ (8000ed0 <MX_USART3_UART_Init+0x94>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e84:	4811      	ldr	r0, [pc, #68]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e86:	f009 fc2b 	bl	800a6e0 <HAL_UART_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e90:	f000 f8e0 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e98:	f00a fd89 	bl	800b9ae <HAL_UARTEx_SetTxFifoThreshold>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea2:	f000 f8d7 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000eaa:	f00a fdbe 	bl	800ba2a <HAL_UARTEx_SetRxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 f8ce 	bl	8001054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_USART3_UART_Init+0x90>)
 8000eba:	f00a fd3f 	bl	800b93c <HAL_UARTEx_DisableFifoMode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec4:	f000 f8c6 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24000340 	.word	0x24000340
 8000ed0:	40004800 	.word	0x40004800

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	4a41      	ldr	r2, [pc, #260]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f08:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f18:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	4a32      	ldr	r2, [pc, #200]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f36:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_GPIO_Init+0x124>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f86:	481d      	ldr	r0, [pc, #116]	@ (8000ffc <MX_GPIO_Init+0x128>)
 8000f88:	f005 f822 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4817      	ldr	r0, [pc, #92]	@ (8001000 <MX_GPIO_Init+0x12c>)
 8000fa4:	f004 fe4c 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <MX_GPIO_Init+0x128>)
 8000fc2:	f004 fe3d 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <MX_GPIO_Init+0x12c>)
 8000fda:	f004 fe31 	bl	8005c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f004 fdf7 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f004 fe0e 	bl	8005c0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	@ 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58021400 	.word	0x58021400
 8001000:	58020800 	.word	0x58020800

08001004 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2201      	movs	r2, #1
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <__io_putchar+0x20>)
 8001016:	f009 fbb3 	bl	800a780 <HAL_UART_Transmit>
    return ch;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24000340 	.word	0x24000340

08001028 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001038:	d103      	bne.n	8001042 <HAL_GPIO_EXTI_Callback+0x1a>
	  tare_request = 1;
 800103a:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_GPIO_EXTI_Callback+0x28>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
  }else{
	  __NOP();
  }
}
 8001040:	e000      	b.n	8001044 <HAL_GPIO_EXTI_Callback+0x1c>
	  __NOP();
 8001042:	bf00      	nop
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	240003da 	.word	0x240003da

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <opStart+0x18>
 8001072:	f06f 0302 	mvn.w	r3, #2
 8001076:	e014      	b.n	80010a2 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
 800108c:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
    }

    return rc;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	4613      	mov	r3, r2
 80010b6:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00b      	beq.n	80010d8 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	4798      	blx	r3
    }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8001128:	e004      	b.n	8001134 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 800112a:	f04f 31ff 	mov.w	r1, #4294967295
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffd6 	bl	80010e0 <opCompleted>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e00f      	b.n	800116c <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <getReportLen+0x44>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	429a      	cmp	r2, r3
 8001158:	d105      	bne.n	8001166 <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <getReportLen+0x44>)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	e006      	b.n	8001174 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001170:	d9ec      	bls.n	800114c <getReportLen+0x10>
        }
    }

    return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	0800e414 	.word	0x0800e414

08001184 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint32_t count = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 8094 	bne.w	80012d4 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return;
 80011ba:	e090      	b.n	80012de <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	3301      	adds	r3, #1
 80011c0:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 80011c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ffb4 	bl	800113c <getReportLen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 80011d8:	7dbb      	ldrb	r3, [r7, #22]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
            return;
 80011ec:	e077      	b.n	80012de <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	2bf1      	cmp	r3, #241	@ 0xf1
 80011f2:	d107      	bne.n	8001204 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 80011f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	4413      	add	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b84      	cmp	r3, #132	@ 0x84
 8001202:	e059      	b.n	80012b8 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2bfc      	cmp	r3, #252	@ 0xfc
 8001208:	d156      	bne.n	80012b8 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120e:	2b00      	cmp	r3, #0
 8001210:	d052      	beq.n	80012b8 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 8001212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	4413      	add	r3, r2
 8001218:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 800121a:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 800121c:	2202      	movs	r2, #2
 800121e:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	785a      	ldrb	r2, [r3, #1]
 8001224:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 8001226:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	789b      	ldrb	r3, [r3, #2]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 800123a:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 800123c:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 8001252:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	789b      	ldrb	r3, [r3, #2]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 8001268:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf14      	ite	ne
 8001276:	2301      	movne	r3, #1
 8001278:	2300      	moveq	r3, #0
 800127a:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 800127e:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001286:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 800128a:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8001292:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 8001294:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 800129c:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 800129e:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 80012a8:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012b2:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <sensorhubControlHdlr+0x160>)
 80012b4:	4610      	mov	r0, r2
 80012b6:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 80012b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4413      	add	r3, r2
 80012be:	7dba      	ldrb	r2, [r7, #22]
 80012c0:	b292      	uxth	r2, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	69f8      	ldr	r0, [r7, #28]
 80012c6:	f7ff fef0 	bl	80010aa <opRx>
            cursor += reportLen;
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012d0:	4413      	add	r3, r2
 80012d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (cursor < len) {
 80012d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f4ff af6f 	bcc.w	80011bc <sensorhubControlHdlr+0x38>
        }
    }
}
 80012de:	3728      	adds	r7, #40	@ 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	24000554 	.word	0x24000554

080012e8 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	4610      	mov	r0, r2
 8001306:	4798      	blx	r3
 8001308:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fea7 	bl	8001060 <opStart>
 8001312:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <opProcess+0x36>
        return status;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	e034      	b.n	8001388 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8001322:	e015      	b.n	8001350 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f04f 32ff 	mov.w	r2, #4294967295
 8001332:	621a      	str	r2, [r3, #32]
            break;
 8001334:	e01b      	b.n	800136e <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fafb 	bl	8003936 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4610      	mov	r0, r2
 800134c:	4798      	blx	r3
 800134e:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0e1      	beq.n	8001324 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad2      	subs	r2, r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d3da      	bcc.n	8001324 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f06f 0205 	mvn.w	r2, #5
 8001382:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8001390:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	4613      	mov	r3, r2
 800139e:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <touSTimestamp+0x80>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d204      	bcs.n	80013b4 <touSTimestamp+0x24>
        rollovers++;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <touSTimestamp+0x84>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <touSTimestamp+0x84>)
 80013b2:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 80013b4:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <touSTimestamp+0x80>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <touSTimestamp+0x84>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	469a      	mov	sl, r3
 80013c2:	4693      	mov	fp, r2
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	4653      	mov	r3, sl
 80013ce:	2200      	movs	r2, #0
 80013d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 80013d4:	88fa      	ldrh	r2, [r7, #6]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4413      	add	r3, r2
 80013da:	2264      	movs	r2, #100	@ 0x64
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	461c      	mov	r4, r3
 80013ea:	4615      	mov	r5, r2
 80013ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f0:	eb12 0804 	adds.w	r8, r2, r4
 80013f4:	eb43 0905 	adc.w	r9, r3, r5
 80013f8:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 80013fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000570 	.word	0x24000570
 8001414:	24000574 	.word	0x24000574

08001418 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b0a0      	sub	sp, #128	@ 0x80
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    int32_t referenceDelta = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (cursor < len) {
 8001432:	e098      	b.n	8001566 <sensorhubInputHdlr+0x14e>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8001434:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8001442:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe78 	bl	800113c <getReportLen>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        if (reportLen == 0) {
 8001452:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001456:	2b00      	cmp	r3, #0
 8001458:	d107      	bne.n	800146a <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8001468:	e083      	b.n	8001572 <sensorhubInputHdlr+0x15a>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 800146a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800146e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001470:	d10a      	bne.n	8001488 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8001472:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	667b      	str	r3, [r7, #100]	@ 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 800147c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800147e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001482:	425b      	negs	r3, r3
 8001484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001486:	e066      	b.n	8001556 <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8001488:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800148c:	2bfa      	cmp	r3, #250	@ 0xfa
 800148e:	d10b      	bne.n	80014a8 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8001490:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	4413      	add	r3, r2
 8001498:	66bb      	str	r3, [r7, #104]	@ 0x68

                referenceDelta += rpt->timebase;
 800149a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800149c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80014a0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014a2:	4413      	add	r3, r2
 80014a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014a6:	e056      	b.n	8001556 <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 80014a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014ac:	2bef      	cmp	r3, #239	@ 0xef
 80014ae:	d10b      	bne.n	80014c8 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 80014b0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4413      	add	r3, r2
 80014b8:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80014bc:	b292      	uxth	r2, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fdf2 	bl	80010aa <opRx>
 80014c6:	e046      	b.n	8001556 <sensorhubInputHdlr+0x13e>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 80014c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	673b      	str	r3, [r7, #112]	@ 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 80014d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014d4:	3302      	adds	r3, #2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80014e4:	3203      	adds	r2, #3
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 80014ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80014f2:	461a      	mov	r2, r3
 80014f4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f7ff ff4a 	bl	8001390 <touSTimestamp>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8001504:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800150a:	4413      	add	r3, r2
 800150c:	2264      	movs	r2, #100	@ 0x64
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	17da      	asrs	r2, r3, #31
 8001514:	461c      	mov	r4, r3
 8001516:	4615      	mov	r5, r2
 8001518:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 800151c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001520:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                memcpy(event.report, pReport, reportLen);
 8001524:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	3312      	adds	r3, #18
 800152e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001530:	4618      	mov	r0, r3
 8001532:	f00b f8d2 	bl	800c6da <memcpy>
                event.len = reportLen;
 8001536:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800153a:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <sensorhubInputHdlr+0x13e>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800154e:	f107 0110 	add.w	r1, r7, #16
 8001552:	4610      	mov	r0, r2
 8001554:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8001556:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800155a:	b29a      	uxth	r2, r3
 800155c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8001560:	4413      	add	r3, r2
 8001562:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    while (cursor < len) {
 8001566:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	429a      	cmp	r2, r3
 800156e:	f4ff af61 	bcc.w	8001434 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8001572:	3780      	adds	r7, #128	@ 0x80
 8001574:	46bd      	mov	sp, r7
 8001576:	bdb0      	pop	{r4, r5, r7, pc}

08001578 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff40 	bl	8001418 <sensorhubInputHdlr>
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff2c 	bl	8001418 <sensorhubInputHdlr>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b09c      	sub	sp, #112	@ 0x70
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	4613      	mov	r3, r2
 80015d6:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	66bb      	str	r3, [r7, #104]	@ 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 80015e2:	232a      	movs	r3, #42	@ 0x2a
 80015e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t reportLen = getReportLen(reportId);
 80015e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fda5 	bl	800113c <getReportLen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    while (cursor < len) {
 80015f8:	e02d      	b.n	8001656 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	461c      	mov	r4, r3
 8001600:	4615      	mov	r5, r2
 8001602:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8001606:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800160a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        memcpy(event.report, payload+cursor, reportLen);
 800160e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	18d1      	adds	r1, r2, r3
 8001616:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	3312      	adds	r3, #18
 8001620:	4618      	mov	r0, r3
 8001622:	f00b f85a 	bl	800c6da <memcpy>
        event.len = reportLen;
 8001626:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800162a:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 800162e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8001636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800163c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800163e:	f107 0110 	add.w	r1, r7, #16
 8001642:	4610      	mov	r0, r2
 8001644:	4798      	blx	r3
        }

        cursor += reportLen;
 8001646:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800164a:	b29a      	uxth	r2, r3
 800164c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001650:	4413      	add	r3, r2
 8001652:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    while (cursor < len) {
 8001656:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3cc      	bcc.n	80015fa <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3770      	adds	r7, #112	@ 0x70
 8001666:	46bd      	mov	sp, r7
 8001668:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800166c <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d007      	beq.n	8001696 <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        return;
 8001694:	e021      	b.n	80016da <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d114      	bne.n	80016c8 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2201      	movs	r2, #1
 80016a2:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 80016a4:	6978      	ldr	r0, [r7, #20]
 80016a6:	f7ff fd2d 	bl	8001104 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <executableDeviceHdlr+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00f      	beq.n	80016d8 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016c0:	4907      	ldr	r1, [pc, #28]	@ (80016e0 <executableDeviceHdlr+0x74>)
 80016c2:	4610      	mov	r0, r2
 80016c4:	4798      	blx	r3
            }
            break;
 80016c6:	e007      	b.n	80016d8 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            break;
 80016d6:	e000      	b.n	80016da <executableDeviceHdlr+0x6e>
            break;
 80016d8:	bf00      	nop
    }
}
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	24000554 	.word	0x24000554

080016e4 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	4613      	mov	r3, r2
 80016f0:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	2102      	movs	r1, #2
 80016fc:	f002 f8ea 	bl	80038d4 <shtp_send>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b08a      	sub	sp, #40	@ 0x28
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <setSensorConfigStart+0x28>
 8001726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <setSensorConfigStart+0x3c>
 800173a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <setSensorConfigStart+0x50>
 800174e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	78db      	ldrb	r3, [r3, #3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <setSensorConfigStart+0x64>
 8001762:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	791b      	ldrb	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <setSensorConfigStart+0x78>
 8001776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memset(&req, 0, sizeof(req));
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2211      	movs	r2, #17
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00a ff25 	bl	800c5da <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8001790:	23fd      	movs	r3, #253	@ 0xfd
 8001792:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800179a:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 800179c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a0:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	88db      	ldrh	r3, [r3, #6]
 80017a6:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	2211      	movs	r2, #17
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff8a 	bl	80016e4 <sendCtrl>
 80017d0:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fc83 	bl	80010e0 <opCompleted>

    return rc;
 80017da:	69fb      	ldr	r3, [r7, #28]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <sendCmd>:

// ------------------------------------------------------------------------
// Support for sending commands

static int sendCmd(sh2_t *pSh2, uint8_t cmd, uint8_t p[COMMAND_PARAMS])
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	460b      	mov	r3, r1
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	72fb      	strb	r3, [r7, #11]
    int rc = SH2_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    CommandReq_t req;

    // Clear request structure
    memset(&req, 0, sizeof(req));
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	220c      	movs	r2, #12
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f00a feeb 	bl	800c5da <memset>
    
    // Create a command sequence number for this command
    pSh2->lastCmdId = cmd;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	7afa      	ldrb	r2, [r7, #11]
 8001808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    pSh2->cmdSeq = pSh2->nextCmdSeq++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	b2d1      	uxtb	r1, r2
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f882 1036 	strb.w	r1, [r2, #54]	@ 0x36
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
    
    // set up request to issue
    req.reportId = SENSORHUB_COMMAND_REQ;
 8001822:	23f2      	movs	r3, #242	@ 0xf2
 8001824:	753b      	strb	r3, [r7, #20]
    req.seq = pSh2->cmdSeq;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800182c:	757b      	strb	r3, [r7, #21]
    req.command = cmd;
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	75bb      	strb	r3, [r7, #22]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
 8001836:	e00c      	b.n	8001852 <sendCmd+0x6e>
        req.p[n] = p[n];
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	7819      	ldrb	r1, [r3, #0]
 8001840:	f107 0217 	add.w	r2, r7, #23
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < COMMAND_PARAMS; n++) {
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	3301      	adds	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	2b08      	cmp	r3, #8
 8001856:	ddef      	ble.n	8001838 <sendCmd+0x54>
    }
    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	220c      	movs	r2, #12
 800185e:	4619      	mov	r1, r3
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff ff3f 	bl	80016e4 <sendCtrl>
 8001866:	6238      	str	r0, [r7, #32]
    
    return rc;
 8001868:	6a3b      	ldr	r3, [r7, #32]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3728      	adds	r7, #40	@ 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <sendCmdStart>:

// ------------------------------------------------------------------------
// Generic Send Command

static int sendCmdStart(sh2_t *pSh2)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
                     pSh2->opData.sendCmd.req.p);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3327      	adds	r3, #39	@ 0x27
    int status = sendCmd(pSh2, pSh2->opData.sendCmd.req.command,
 8001884:	461a      	mov	r2, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffac 	bl	80017e4 <sendCmd>
 800188c:	60f8      	str	r0, [r7, #12]

    opCompleted(pSh2, status);
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fc25 	bl	80010e0 <opCompleted>

    return status;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <shtpEventCallback+0x3c>)
 80018ae:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <shtpEventCallback+0x40>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <shtpEventCallback+0x40>)
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018cc:	4904      	ldr	r1, [pc, #16]	@ (80018e0 <shtpEventCallback+0x40>)
 80018ce:	4610      	mov	r0, r2
 80018d0:	4798      	blx	r3
    }
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	240003dc 	.word	0x240003dc
 80018e0:	24000554 	.word	0x24000554

080018e4 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 80018f0:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <sh2_open+0x114>)
 80018f2:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <sh2_open+0x1c>
 80018fa:	f06f 0301 	mvn.w	r3, #1
 80018fe:	e077      	b.n	80019f0 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8001900:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8001904:	2100      	movs	r1, #0
 8001906:	69b8      	ldr	r0, [r7, #24]
 8001908:	f00a fe67 	bl	800c5da <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2200      	movs	r2, #0
 8001910:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	639a      	str	r2, [r3, #56]	@ 0x38
    pSh2->eventCookie = eventCookie;
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	63da      	str	r2, [r3, #60]	@ 0x3c
    pSh2->sensorCallback = 0;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2200      	movs	r2, #0
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = 0;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2200      	movs	r2, #0
 800192e:	645a      	str	r2, [r3, #68]	@ 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f001 ff55 	bl	80037e4 <shtp_open>
 800193a:	4602      	mov	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	e050      	b.n	80019f0 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4929      	ldr	r1, [pc, #164]	@ (80019fc <sh2_open+0x118>)
 8001956:	4618      	mov	r0, r3
 8001958:	f001 ff78 	bl	800384c <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6858      	ldr	r0, [r3, #4]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <sh2_open+0x11c>)
 8001964:	2102      	movs	r1, #2
 8001966:	f001 ff85 	bl	8003874 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6858      	ldr	r0, [r3, #4]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4a24      	ldr	r2, [pc, #144]	@ (8001a04 <sh2_open+0x120>)
 8001972:	2103      	movs	r1, #3
 8001974:	f001 ff7e 	bl	8003874 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6858      	ldr	r0, [r3, #4]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <sh2_open+0x124>)
 8001980:	2104      	movs	r1, #4
 8001982:	f001 ff77 	bl	8003874 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6858      	ldr	r0, [r3, #4]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a0c <sh2_open+0x128>)
 800198e:	2105      	movs	r1, #5
 8001990:	f001 ff70 	bl	8003874 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6858      	ldr	r0, [r3, #4]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a10 <sh2_open+0x12c>)
 800199c:	2101      	movs	r1, #1
 800199e:	f001 ff69 	bl	8003874 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	4610      	mov	r0, r2
 80019ae:	4798      	blx	r3
 80019b0:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80019b6:	e00c      	b.n	80019d2 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 ffba 	bl	8003936 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	4610      	mov	r0, r2
 80019ce:	4798      	blx	r3
 80019d0:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a14 <sh2_open+0x130>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d807      	bhi.n	80019ee <sh2_open+0x10a>
           (!pSh2->resetComplete))
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	7a1b      	ldrb	r3, [r3, #8]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e4      	bne.n	80019b8 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	240003dc 	.word	0x240003dc
 80019fc:	080018a1 	.word	0x080018a1
 8001a00:	08001185 	.word	0x08001185
 8001a04:	08001579 	.word	0x08001579
 8001a08:	080015a1 	.word	0x080015a1
 8001a0c:	080015c9 	.word	0x080015c9
 8001a10:	0800166d 	.word	0x0800166d
 8001a14:	00030d3f 	.word	0x00030d3f

08001a18 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <sh2_service+0x24>)
 8001a20:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 ff81 	bl	8003936 <shtp_service>
    }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	240003dc 	.word	0x240003dc

08001a40 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <sh2_setSensorCallback+0x28>)
 8001a4c:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = cookie;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	645a      	str	r2, [r3, #68]	@ 0x44

    return SH2_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	240003dc 	.word	0x240003dc

08001a6c <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <sh2_setSensorConfig+0x4c>)
 8001a7a:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
 8001a88:	e012      	b.n	8001ab0 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3324      	adds	r3, #36	@ 0x24
 8001a8e:	2210      	movs	r2, #16
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00a fda1 	bl	800c5da <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8001aa6:	4905      	ldr	r1, [pc, #20]	@ (8001abc <sh2_setSensorConfig+0x50>)
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fc1d 	bl	80012e8 <opProcess>
 8001aae:	4603      	mov	r3, r0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	240003dc 	.word	0x240003dc
 8001abc:	0800e474 	.word	0x0800e474

08001ac0 <sh2_setTareNow>:
 * @param  basis Which rotation vector to use as the basis for Tare adjustment.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setTareNow(uint8_t axes,    // SH2_TARE_X | SH2_TARE_Y | SH2_TARE_Z
                   sh2_TareBasis_t basis)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
    sh2_t *pSh2 = &_sh2;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <sh2_setTareNow+0x64>)
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (pSh2->pShtp == 0) {
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <sh2_setTareNow+0x22>
        return SH2_ERR;  // sh2 API isn't open
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	e01b      	b.n	8001b1a <sh2_setTareNow+0x5a>
    }

    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3324      	adds	r3, #36	@ 0x24
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00a fd75 	bl	800c5da <memset>
    
    
    pSh2->opData.sendCmd.req.command = SH2_CMD_TARE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2203      	movs	r2, #3
 8001af4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    pSh2->opData.sendCmd.req.p[0] = SH2_TARE_TARE_NOW;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    pSh2->opData.sendCmd.req.p[1] = axes;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	79fa      	ldrb	r2, [r7, #7]
 8001b04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.sendCmd.req.p[2] = basis;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	79ba      	ldrb	r2, [r7, #6]
 8001b0c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    return opProcess(pSh2, &sendCmdOp);
 8001b10:	4905      	ldr	r1, [pc, #20]	@ (8001b28 <sh2_setTareNow+0x68>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff fbe8 	bl	80012e8 <opProcess>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	240003dc 	.word	0x240003dc
 8001b28:	0800e484 	.word	0x0800e484

08001b2c <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	7c5a      	ldrb	r2, [r3, #17]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b54:	d00b      	beq.n	8001b6e <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	7cda      	ldrb	r2, [r3, #19]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	7d1b      	ldrb	r3, [r3, #20]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	709a      	strb	r2, [r3, #2]
 8001b6c:	e005      	b.n	8001b7a <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b82:	f200 8155 	bhi.w	8001e30 <sh2_decodeSensorEvent+0x304>
 8001b86:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <sh2_decodeSensorEvent+0x60>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001c51 	.word	0x08001c51
 8001b90:	08001c81 	.word	0x08001c81
 8001b94:	08001ca5 	.word	0x08001ca5
 8001b98:	08001c5d 	.word	0x08001c5d
 8001b9c:	08001cbd 	.word	0x08001cbd
 8001ba0:	08001c69 	.word	0x08001c69
 8001ba4:	08001c8d 	.word	0x08001c8d
 8001ba8:	08001cc9 	.word	0x08001cc9
 8001bac:	08001cd5 	.word	0x08001cd5
 8001bb0:	08001ce1 	.word	0x08001ce1
 8001bb4:	08001ced 	.word	0x08001ced
 8001bb8:	08001cf9 	.word	0x08001cf9
 8001bbc:	08001d05 	.word	0x08001d05
 8001bc0:	08001d11 	.word	0x08001d11
 8001bc4:	08001cb1 	.word	0x08001cb1
 8001bc8:	08001d29 	.word	0x08001d29
 8001bcc:	08001d41 	.word	0x08001d41
 8001bd0:	08001d4d 	.word	0x08001d4d
 8001bd4:	08001d59 	.word	0x08001d59
 8001bd8:	08001c45 	.word	0x08001c45
 8001bdc:	08001c75 	.word	0x08001c75
 8001be0:	08001c99 	.word	0x08001c99
 8001be4:	08001d1d 	.word	0x08001d1d
 8001be8:	08001d35 	.word	0x08001d35
 8001bec:	08001d65 	.word	0x08001d65
 8001bf0:	08001d71 	.word	0x08001d71
 8001bf4:	08001d7d 	.word	0x08001d7d
 8001bf8:	08001d89 	.word	0x08001d89
 8001bfc:	08001e31 	.word	0x08001e31
 8001c00:	08001d95 	.word	0x08001d95
 8001c04:	08001da1 	.word	0x08001da1
 8001c08:	08001dad 	.word	0x08001dad
 8001c0c:	08001db9 	.word	0x08001db9
 8001c10:	08001dc5 	.word	0x08001dc5
 8001c14:	08001dd1 	.word	0x08001dd1
 8001c18:	08001e31 	.word	0x08001e31
 8001c1c:	08001e31 	.word	0x08001e31
 8001c20:	08001e31 	.word	0x08001e31
 8001c24:	08001e31 	.word	0x08001e31
 8001c28:	08001ddd 	.word	0x08001ddd
 8001c2c:	08001de9 	.word	0x08001de9
 8001c30:	08001df5 	.word	0x08001df5
 8001c34:	08001e01 	.word	0x08001e01
 8001c38:	08001e0d 	.word	0x08001e0d
 8001c3c:	08001e19 	.word	0x08001e19
 8001c40:	08001e25 	.word	0x08001e25
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8fc 	bl	8001e44 <decodeRawAccelerometer>
 8001c4c:	60f8      	str	r0, [r7, #12]
            break;
 8001c4e:	e0f3      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f924 	bl	8001ea0 <decodeAccelerometer>
 8001c58:	60f8      	str	r0, [r7, #12]
            break;
 8001c5a:	e0ed      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f95e 	bl	8001f20 <decodeLinearAcceleration>
 8001c64:	60f8      	str	r0, [r7, #12]
            break;
 8001c66:	e0e7      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8001c68:	6839      	ldr	r1, [r7, #0]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f998 	bl	8001fa0 <decodeGravity>
 8001c70:	60f8      	str	r0, [r7, #12]
            break;
 8001c72:	e0e1      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9d2 	bl	8002020 <decodeRawGyroscope>
 8001c7c:	60f8      	str	r0, [r7, #12]
            break;
 8001c7e:	e0db      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fa04 	bl	8002090 <decodeGyroscopeCalibrated>
 8001c88:	60f8      	str	r0, [r7, #12]
            break;
 8001c8a:	e0d5      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fa3e 	bl	8002110 <decodeGyroscopeUncal>
 8001c94:	60f8      	str	r0, [r7, #12]
            break;
 8001c96:	e0cf      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 faaa 	bl	80021f4 <decodeRawMagnetometer>
 8001ca0:	60f8      	str	r0, [r7, #12]
            break;
 8001ca2:	e0c9      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fad2 	bl	8002250 <decodeMagneticFieldCalibrated>
 8001cac:	60f8      	str	r0, [r7, #12]
            break;
 8001cae:	e0c3      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fb0c 	bl	80022d0 <decodeMagneticFieldUncal>
 8001cb8:	60f8      	str	r0, [r7, #12]
            break;
 8001cba:	e0bd      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fb78 	bl	80023b4 <decodeRotationVector>
 8001cc4:	60f8      	str	r0, [r7, #12]
            break;
 8001cc6:	e0b7      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fbd6 	bl	800247c <decodeGameRotationVector>
 8001cd0:	60f8      	str	r0, [r7, #12]
            break;
 8001cd2:	e0b1      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fc20 	bl	800251c <decodeGeomagneticRotationVector>
 8001cdc:	60f8      	str	r0, [r7, #12]
            break;
 8001cde:	e0ab      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8001ce0:	6839      	ldr	r1, [r7, #0]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fc7e 	bl	80025e4 <decodePressure>
 8001ce8:	60f8      	str	r0, [r7, #12]
            break;
 8001cea:	e0a5      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fc94 	bl	800261c <decodeAmbientLight>
 8001cf4:	60f8      	str	r0, [r7, #12]
            break;
 8001cf6:	e09f      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fcaa 	bl	8002654 <decodeHumidity>
 8001d00:	60f8      	str	r0, [r7, #12]
            break;
 8001d02:	e099      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8001d04:	6839      	ldr	r1, [r7, #0]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fcc2 	bl	8002690 <decodeProximity>
 8001d0c:	60f8      	str	r0, [r7, #12]
            break;
 8001d0e:	e093      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8001d10:	6839      	ldr	r1, [r7, #0]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fcda 	bl	80026cc <decodeTemperature>
 8001d18:	60f8      	str	r0, [r7, #12]
            break;
 8001d1a:	e08d      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8001d1c:	6839      	ldr	r1, [r7, #0]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fcf2 	bl	8002708 <decodeReserved>
 8001d24:	60f8      	str	r0, [r7, #12]
            break;
 8001d26:	e087      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fd0a 	bl	8002744 <decodeTapDetector>
 8001d30:	60f8      	str	r0, [r7, #12]
            break;
 8001d32:	e081      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fd14 	bl	8002764 <decodeStepDetector>
 8001d3c:	60f8      	str	r0, [r7, #12]
            break;
 8001d3e:	e07b      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fd20 	bl	8002788 <decodeStepCounter>
 8001d48:	60f8      	str	r0, [r7, #12]
            break;
 8001d4a:	e075      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fd35 	bl	80027be <decodeSignificantMotion>
 8001d54:	60f8      	str	r0, [r7, #12]
            break;
 8001d56:	e06f      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fd42 	bl	80027e4 <decodeStabilityClassifier>
 8001d60:	60f8      	str	r0, [r7, #12]
            break;
 8001d62:	e069      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fd4c 	bl	8002804 <decodeShakeDetector>
 8001d6c:	60f8      	str	r0, [r7, #12]
            break;
 8001d6e:	e063      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fd59 	bl	800282a <decodeFlipDetector>
 8001d78:	60f8      	str	r0, [r7, #12]
            break;
 8001d7a:	e05d      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fd66 	bl	8002850 <decodePickupDetector>
 8001d84:	60f8      	str	r0, [r7, #12]
            break;
 8001d86:	e057      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8001d88:	6839      	ldr	r1, [r7, #0]
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fd73 	bl	8002876 <decodeStabilityDetector>
 8001d90:	60f8      	str	r0, [r7, #12]
            break;
 8001d92:	e051      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fd80 	bl	800289c <decodePersonalActivityClassifier>
 8001d9c:	60f8      	str	r0, [r7, #12]
            break;
 8001d9e:	e04b      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fdad 	bl	8002902 <decodeSleepDetector>
 8001da8:	60f8      	str	r0, [r7, #12]
            break;
 8001daa:	e045      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fdb7 	bl	8002922 <decodeTiltDetector>
 8001db4:	60f8      	str	r0, [r7, #12]
            break;
 8001db6:	e03f      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fdc4 	bl	8002948 <decodePocketDetector>
 8001dc0:	60f8      	str	r0, [r7, #12]
            break;
 8001dc2:	e039      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fdd1 	bl	800296e <decodeCircleDetector>
 8001dcc:	60f8      	str	r0, [r7, #12]
            break;
 8001dce:	e033      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fdde 	bl	8002994 <decodeHeartRateMonitor>
 8001dd8:	60f8      	str	r0, [r7, #12]
            break;
 8001dda:	e02d      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fdec 	bl	80029bc <decodeArvrStabilizedRV>
 8001de4:	60f8      	str	r0, [r7, #12]
            break;
 8001de6:	e027      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fe4a 	bl	8002a84 <decodeArvrStabilizedGRV>
 8001df0:	60f8      	str	r0, [r7, #12]
            break;
 8001df2:	e021      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fe94 	bl	8002b24 <decodeGyroIntegratedRV>
 8001dfc:	60f8      	str	r0, [r7, #12]
            break;
 8001dfe:	e01b      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 ff14 	bl	8002c30 <decodeIZroRequest>
 8001e08:	60f8      	str	r0, [r7, #12]
            break;
 8001e0a:	e015      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 ff22 	bl	8002c58 <decodeRawOptFlow>
 8001e14:	60f8      	str	r0, [r7, #12]
            break;
 8001e16:	e00f      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 ff9a 	bl	8002d54 <decodeDeadReckoningPose>
 8001e20:	60f8      	str	r0, [r7, #12]
            break;
 8001e22:	e009      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 f87e 	bl	8002f28 <decodeWheelEncoder>
 8001e2c:	60f8      	str	r0, [r7, #12]
            break;
 8001e2e:	e003      	b.n	8001e38 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	60fb      	str	r3, [r7, #12]
            break;
 8001e36:	bf00      	nop
    }

    return rc;
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop

08001e44 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	3316      	adds	r3, #22
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fa3e 	bl	80032d4 <read16>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	3318      	adds	r3, #24
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fa35 	bl	80032d4 <read16>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	331a      	adds	r3, #26
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fa2c 	bl	80032d4 <read16>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	331e      	adds	r3, #30
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fa3a 	bl	8003302 <read32>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	3316      	adds	r3, #22
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fa10 	bl	80032d4 <read16>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001f1c <decodeAccelerometer+0x7c>
 8001ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 f9ff 	bl	80032d4 <read16>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001f1c <decodeAccelerometer+0x7c>
 8001ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	331a      	adds	r3, #26
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 f9ee 	bl	80032d4 <read16>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f02:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001f1c <decodeAccelerometer+0x7c>
 8001f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	3b800000 	.word	0x3b800000

08001f20 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3316      	adds	r3, #22
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f9d0 	bl	80032d4 <read16>
 8001f34:	4603      	mov	r3, r0
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001f9c <decodeLinearAcceleration+0x7c>
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3318      	adds	r3, #24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f9bf 	bl	80032d4 <read16>
 8001f56:	4603      	mov	r3, r0
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001f9c <decodeLinearAcceleration+0x7c>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	331a      	adds	r3, #26
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 f9ae 	bl	80032d4 <read16>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001f9c <decodeLinearAcceleration+0x7c>
 8001f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	3b800000 	.word	0x3b800000

08001fa0 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3316      	adds	r3, #22
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 f990 	bl	80032d4 <read16>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800201c <decodeGravity+0x7c>
 8001fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3318      	adds	r3, #24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 f97f 	bl	80032d4 <read16>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800201c <decodeGravity+0x7c>
 8001fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	331a      	adds	r3, #26
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 f96e 	bl	80032d4 <read16>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002002:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800201c <decodeGravity+0x7c>
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	3b800000 	.word	0x3b800000

08002020 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3316      	adds	r3, #22
 800202e:	4618      	mov	r0, r3
 8002030:	f001 f950 	bl	80032d4 <read16>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	3318      	adds	r3, #24
 8002040:	4618      	mov	r0, r3
 8002042:	f001 f947 	bl	80032d4 <read16>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	331a      	adds	r3, #26
 8002052:	4618      	mov	r0, r3
 8002054:	f001 f93e 	bl	80032d4 <read16>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	331c      	adds	r3, #28
 8002064:	4618      	mov	r0, r3
 8002066:	f001 f935 	bl	80032d4 <read16>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	331e      	adds	r3, #30
 8002076:	4618      	mov	r0, r3
 8002078:	f001 f943 	bl	8003302 <read32>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3316      	adds	r3, #22
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 f918 	bl	80032d4 <read16>
 80020a4:	4603      	mov	r3, r0
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ae:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800210c <decodeGyroscopeCalibrated+0x7c>
 80020b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	3318      	adds	r3, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 f907 	bl	80032d4 <read16>
 80020c6:	4603      	mov	r3, r0
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800210c <decodeGyroscopeCalibrated+0x7c>
 80020d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	331a      	adds	r3, #26
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 f8f6 	bl	80032d4 <read16>
 80020e8:	4603      	mov	r3, r0
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800210c <decodeGyroscopeCalibrated+0x7c>
 80020f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	3b000000 	.word	0x3b000000

08002110 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3316      	adds	r3, #22
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f8d8 	bl	80032d4 <read16>
 8002124:	4603      	mov	r3, r0
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80021f0 <decodeGyroscopeUncal+0xe0>
 8002132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	3318      	adds	r3, #24
 8002140:	4618      	mov	r0, r3
 8002142:	f001 f8c7 	bl	80032d4 <read16>
 8002146:	4603      	mov	r3, r0
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002150:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80021f0 <decodeGyroscopeUncal+0xe0>
 8002154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	331a      	adds	r3, #26
 8002162:	4618      	mov	r0, r3
 8002164:	f001 f8b6 	bl	80032d4 <read16>
 8002168:	4603      	mov	r3, r0
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002172:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80021f0 <decodeGyroscopeUncal+0xe0>
 8002176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	331c      	adds	r3, #28
 8002184:	4618      	mov	r0, r3
 8002186:	f001 f8a5 	bl	80032d4 <read16>
 800218a:	4603      	mov	r3, r0
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80021f0 <decodeGyroscopeUncal+0xe0>
 8002198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	331e      	adds	r3, #30
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f894 	bl	80032d4 <read16>
 80021ac:	4603      	mov	r3, r0
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80021f0 <decodeGyroscopeUncal+0xe0>
 80021ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	3320      	adds	r3, #32
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f883 	bl	80032d4 <read16>
 80021ce:	4603      	mov	r3, r0
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80021f0 <decodeGyroscopeUncal+0xe0>
 80021dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	3b000000 	.word	0x3b000000

080021f4 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	3316      	adds	r3, #22
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f866 	bl	80032d4 <read16>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	3318      	adds	r3, #24
 8002214:	4618      	mov	r0, r3
 8002216:	f001 f85d 	bl	80032d4 <read16>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	331a      	adds	r3, #26
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f854 	bl	80032d4 <read16>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	331e      	adds	r3, #30
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f862 	bl	8003302 <read32>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3316      	adds	r3, #22
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f838 	bl	80032d4 <read16>
 8002264:	4603      	mov	r3, r0
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80022cc <decodeMagneticFieldCalibrated+0x7c>
 8002272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	3318      	adds	r3, #24
 8002280:	4618      	mov	r0, r3
 8002282:	f001 f827 	bl	80032d4 <read16>
 8002286:	4603      	mov	r3, r0
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80022cc <decodeMagneticFieldCalibrated+0x7c>
 8002294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	331a      	adds	r3, #26
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 f816 	bl	80032d4 <read16>
 80022a8:	4603      	mov	r3, r0
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80022cc <decodeMagneticFieldCalibrated+0x7c>
 80022b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	3d800000 	.word	0x3d800000

080022d0 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3316      	adds	r3, #22
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fff8 	bl	80032d4 <read16>
 80022e4:	4603      	mov	r3, r0
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ee:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80023b0 <decodeMagneticFieldUncal+0xe0>
 80022f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	3318      	adds	r3, #24
 8002300:	4618      	mov	r0, r3
 8002302:	f000 ffe7 	bl	80032d4 <read16>
 8002306:	4603      	mov	r3, r0
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80023b0 <decodeMagneticFieldUncal+0xe0>
 8002314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	331a      	adds	r3, #26
 8002322:	4618      	mov	r0, r3
 8002324:	f000 ffd6 	bl	80032d4 <read16>
 8002328:	4603      	mov	r3, r0
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002332:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80023b0 <decodeMagneticFieldUncal+0xe0>
 8002336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	331c      	adds	r3, #28
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ffc5 	bl	80032d4 <read16>
 800234a:	4603      	mov	r3, r0
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002354:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80023b0 <decodeMagneticFieldUncal+0xe0>
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	331e      	adds	r3, #30
 8002366:	4618      	mov	r0, r3
 8002368:	f000 ffb4 	bl	80032d4 <read16>
 800236c:	4603      	mov	r3, r0
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002376:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80023b0 <decodeMagneticFieldUncal+0xe0>
 800237a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	3320      	adds	r3, #32
 8002388:	4618      	mov	r0, r3
 800238a:	f000 ffa3 	bl	80032d4 <read16>
 800238e:	4603      	mov	r3, r0
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002398:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80023b0 <decodeMagneticFieldUncal+0xe0>
 800239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	3d800000 	.word	0x3d800000

080023b4 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3316      	adds	r3, #22
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 ff86 	bl	80032d4 <read16>
 80023c8:	4603      	mov	r3, r0
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002474 <decodeRotationVector+0xc0>
 80023d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3318      	adds	r3, #24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 ff75 	bl	80032d4 <read16>
 80023ea:	4603      	mov	r3, r0
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002474 <decodeRotationVector+0xc0>
 80023f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	331a      	adds	r3, #26
 8002406:	4618      	mov	r0, r3
 8002408:	f000 ff64 	bl	80032d4 <read16>
 800240c:	4603      	mov	r3, r0
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002474 <decodeRotationVector+0xc0>
 800241a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	331c      	adds	r3, #28
 8002428:	4618      	mov	r0, r3
 800242a:	f000 ff53 	bl	80032d4 <read16>
 800242e:	4603      	mov	r3, r0
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002438:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002474 <decodeRotationVector+0xc0>
 800243c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	331e      	adds	r3, #30
 800244a:	4618      	mov	r0, r3
 800244c:	f000 ff42 	bl	80032d4 <read16>
 8002450:	4603      	mov	r3, r0
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002478 <decodeRotationVector+0xc4>
 800245e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	38800000 	.word	0x38800000
 8002478:	39800000 	.word	0x39800000

0800247c <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3316      	adds	r3, #22
 800248a:	4618      	mov	r0, r3
 800248c:	f000 ff22 	bl	80032d4 <read16>
 8002490:	4603      	mov	r3, r0
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002518 <decodeGameRotationVector+0x9c>
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3318      	adds	r3, #24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 ff11 	bl	80032d4 <read16>
 80024b2:	4603      	mov	r3, r0
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024bc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002518 <decodeGameRotationVector+0x9c>
 80024c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	331a      	adds	r3, #26
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 ff00 	bl	80032d4 <read16>
 80024d4:	4603      	mov	r3, r0
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024de:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002518 <decodeGameRotationVector+0x9c>
 80024e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	331c      	adds	r3, #28
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 feef 	bl	80032d4 <read16>
 80024f6:	4603      	mov	r3, r0
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002500:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002518 <decodeGameRotationVector+0x9c>
 8002504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	38800000 	.word	0x38800000

0800251c <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3316      	adds	r3, #22
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fed2 	bl	80032d4 <read16>
 8002530:	4603      	mov	r3, r0
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80025dc <decodeGeomagneticRotationVector+0xc0>
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	3318      	adds	r3, #24
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fec1 	bl	80032d4 <read16>
 8002552:	4603      	mov	r3, r0
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80025dc <decodeGeomagneticRotationVector+0xc0>
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	331a      	adds	r3, #26
 800256e:	4618      	mov	r0, r3
 8002570:	f000 feb0 	bl	80032d4 <read16>
 8002574:	4603      	mov	r3, r0
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80025dc <decodeGeomagneticRotationVector+0xc0>
 8002582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	331c      	adds	r3, #28
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fe9f 	bl	80032d4 <read16>
 8002596:	4603      	mov	r3, r0
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80025dc <decodeGeomagneticRotationVector+0xc0>
 80025a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	331e      	adds	r3, #30
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fe8e 	bl	80032d4 <read16>
 80025b8:	4603      	mov	r3, r0
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80025e0 <decodeGeomagneticRotationVector+0xc4>
 80025c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	38800000 	.word	0x38800000
 80025e0:	39800000 	.word	0x39800000

080025e4 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3316      	adds	r3, #22
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fe85 	bl	8003302 <read32>
 80025f8:	ee07 0a90 	vmov	s15, r0
 80025fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002600:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002618 <decodePressure+0x34>
 8002604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	35800000 	.word	0x35800000

0800261c <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3316      	adds	r3, #22
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fe69 	bl	8003302 <read32>
 8002630:	ee07 0a90 	vmov	s15, r0
 8002634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002638:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002650 <decodeAmbientLight+0x34>
 800263c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	3b800000 	.word	0x3b800000

08002654 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	3316      	adds	r3, #22
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fe36 	bl	80032d4 <read16>
 8002668:	4603      	mov	r3, r0
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800268c <decodeHumidity+0x38>
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	3b800000 	.word	0x3b800000

08002690 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3316      	adds	r3, #22
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fe18 	bl	80032d4 <read16>
 80026a4:	4603      	mov	r3, r0
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ae:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80026c8 <decodeProximity+0x38>
 80026b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	3d800000 	.word	0x3d800000

080026cc <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3316      	adds	r3, #22
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fdfa 	bl	80032d4 <read16>
 80026e0:	4603      	mov	r3, r0
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002704 <decodeTemperature+0x38>
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	3c000000 	.word	0x3c000000

08002708 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	3316      	adds	r3, #22
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fddc 	bl	80032d4 <read16>
 800271c:	4603      	mov	r3, r0
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002726:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002740 <decodeReserved+0x38>
 800272a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	3c000000 	.word	0x3c000000

08002744 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7d9a      	ldrb	r2, [r3, #22]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3316      	adds	r3, #22
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fd81 	bl	800327a <readu32>
 8002778:	4602      	mov	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3316      	adds	r3, #22
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fd6f 	bl	800327a <readu32>
 800279c:	4602      	mov	r2, r0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	331a      	adds	r3, #26
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fd67 	bl	800327a <readu32>
 80027ac:	4603      	mov	r3, r0
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3316      	adds	r3, #22
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fd3d 	bl	800324c <readu16>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	7d9a      	ldrb	r2, [r3, #22]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3316      	adds	r3, #22
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fd1a 	bl	800324c <readu16>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	3316      	adds	r3, #22
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fd07 	bl	800324c <readu16>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3316      	adds	r3, #22
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fcf4 	bl	800324c <readu16>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	3316      	adds	r3, #22
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fce1 	bl	800324c <readu16>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	7d9b      	ldrb	r3, [r3, #22]
 80028aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	7d9b      	ldrb	r3, [r3, #22]
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	09db      	lsrs	r3, r3, #7
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	7dda      	ldrb	r2, [r3, #23]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e00d      	b.n	80028ee <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3306      	adds	r3, #6
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	7c99      	ldrb	r1, [r3, #18]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	3317      	adds	r3, #23
 80028e4:	460a      	mov	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	ddee      	ble.n	80028d2 <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	7d9a      	ldrb	r2, [r3, #22]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	3316      	adds	r3, #22
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fc8b 	bl	800324c <readu16>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	3316      	adds	r3, #22
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fc78 	bl	800324c <readu16>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3316      	adds	r3, #22
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fc65 	bl	800324c <readu16>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	3316      	adds	r3, #22
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fc52 	bl	800324c <readu16>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	3316      	adds	r3, #22
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fc82 	bl	80032d4 <read16>
 80029d0:	4603      	mov	r3, r0
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029da:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002a7c <decodeArvrStabilizedRV+0xc0>
 80029de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3318      	adds	r3, #24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fc71 	bl	80032d4 <read16>
 80029f2:	4603      	mov	r3, r0
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002a7c <decodeArvrStabilizedRV+0xc0>
 8002a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	331a      	adds	r3, #26
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fc60 	bl	80032d4 <read16>
 8002a14:	4603      	mov	r3, r0
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002a7c <decodeArvrStabilizedRV+0xc0>
 8002a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	331c      	adds	r3, #28
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fc4f 	bl	80032d4 <read16>
 8002a36:	4603      	mov	r3, r0
 8002a38:	ee07 3a90 	vmov	s15, r3
 8002a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a40:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002a7c <decodeArvrStabilizedRV+0xc0>
 8002a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	331e      	adds	r3, #30
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fc3e 	bl	80032d4 <read16>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a62:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002a80 <decodeArvrStabilizedRV+0xc4>
 8002a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	38800000 	.word	0x38800000
 8002a80:	39800000 	.word	0x39800000

08002a84 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	3316      	adds	r3, #22
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fc1e 	bl	80032d4 <read16>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002b20 <decodeArvrStabilizedGRV+0x9c>
 8002aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fc0d 	bl	80032d4 <read16>
 8002aba:	4603      	mov	r3, r0
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002b20 <decodeArvrStabilizedGRV+0x9c>
 8002ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	331a      	adds	r3, #26
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fbfc 	bl	80032d4 <read16>
 8002adc:	4603      	mov	r3, r0
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002b20 <decodeArvrStabilizedGRV+0x9c>
 8002aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	331c      	adds	r3, #28
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fbeb 	bl	80032d4 <read16>
 8002afe:	4603      	mov	r3, r0
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b08:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b20 <decodeArvrStabilizedGRV+0x9c>
 8002b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	38800000 	.word	0x38800000

08002b24 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3312      	adds	r3, #18
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fbce 	bl	80032d4 <read16>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b42:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002c28 <decodeGyroIntegratedRV+0x104>
 8002b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fbbd 	bl	80032d4 <read16>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b64:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002c28 <decodeGyroIntegratedRV+0x104>
 8002b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3316      	adds	r3, #22
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fbac 	bl	80032d4 <read16>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b86:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002c28 <decodeGyroIntegratedRV+0x104>
 8002b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	3318      	adds	r3, #24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fb9b 	bl	80032d4 <read16>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002c28 <decodeGyroIntegratedRV+0x104>
 8002bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	331a      	adds	r3, #26
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fb8a 	bl	80032d4 <read16>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002c2c <decodeGyroIntegratedRV+0x108>
 8002bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	331c      	adds	r3, #28
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fb79 	bl	80032d4 <read16>
 8002be2:	4603      	mov	r3, r0
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002c2c <decodeGyroIntegratedRV+0x108>
 8002bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	331e      	adds	r3, #30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fb68 	bl	80032d4 <read16>
 8002c04:	4603      	mov	r3, r0
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002c2c <decodeGyroIntegratedRV+0x108>
 8002c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return SH2_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	38800000 	.word	0x38800000
 8002c2c:	3a800000 	.word	0x3a800000

08002c30 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7d9a      	ldrb	r2, [r3, #22]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	7dda      	ldrb	r2, [r3, #23]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3316      	adds	r3, #22
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fb34 	bl	80032d4 <read16>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3318      	adds	r3, #24
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fb2b 	bl	80032d4 <read16>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	331a      	adds	r3, #26
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fb22 	bl	80032d4 <read16>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	331c      	adds	r3, #28
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fb0a 	bl	80032b6 <read8>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	331d      	adds	r3, #29
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fb00 	bl	80032b6 <read8>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	331e      	adds	r3, #30
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 faf6 	bl	80032b6 <read8>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	331f      	adds	r3, #31
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 faec 	bl	80032b6 <read8>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	3320      	adds	r3, #32
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fae2 	bl	80032b6 <read8>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	3321      	adds	r3, #33	@ 0x21
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fad8 	bl	80032b6 <read8>
 8002d06:	4603      	mov	r3, r0
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3322      	adds	r3, #34	@ 0x22
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 face 	bl	80032b6 <read8>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3324      	adds	r3, #36	@ 0x24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fad3 	bl	80032d4 <read16>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3326      	adds	r3, #38	@ 0x26
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fae1 	bl	8003302 <read32>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3316      	adds	r3, #22
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 facd 	bl	8003302 <read32>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	331a      	adds	r3, #26
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fac4 	bl	8003302 <read32>
 8002d7a:	ee07 0a90 	vmov	s15, r0
 8002d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d82:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002f1c <decodeDeadReckoningPose+0x1c8>
 8002d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	331e      	adds	r3, #30
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fab4 	bl	8003302 <read32>
 8002d9a:	ee07 0a90 	vmov	s15, r0
 8002d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da2:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002f1c <decodeDeadReckoningPose+0x1c8>
 8002da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	3322      	adds	r3, #34	@ 0x22
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 faa4 	bl	8003302 <read32>
 8002dba:	ee07 0a90 	vmov	s15, r0
 8002dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002f1c <decodeDeadReckoningPose+0x1c8>
 8002dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	3326      	adds	r3, #38	@ 0x26
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fa94 	bl	8003302 <read32>
 8002dda:	ee07 0a90 	vmov	s15, r0
 8002dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002f20 <decodeDeadReckoningPose+0x1cc>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	332a      	adds	r3, #42	@ 0x2a
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa84 	bl	8003302 <read32>
 8002dfa:	ee07 0a90 	vmov	s15, r0
 8002dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e02:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002f20 <decodeDeadReckoningPose+0x1cc>
 8002e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	332e      	adds	r3, #46	@ 0x2e
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fa74 	bl	8003302 <read32>
 8002e1a:	ee07 0a90 	vmov	s15, r0
 8002e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e22:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002f20 <decodeDeadReckoningPose+0x1cc>
 8002e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	3332      	adds	r3, #50	@ 0x32
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fa64 	bl	8003302 <read32>
 8002e3a:	ee07 0a90 	vmov	s15, r0
 8002e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e42:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002f20 <decodeDeadReckoningPose+0x1cc>
 8002e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	3336      	adds	r3, #54	@ 0x36
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fa54 	bl	8003302 <read32>
 8002e5a:	ee07 0a90 	vmov	s15, r0
 8002e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e62:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002f24 <decodeDeadReckoningPose+0x1d0>
 8002e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	333a      	adds	r3, #58	@ 0x3a
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fa44 	bl	8003302 <read32>
 8002e7a:	ee07 0a90 	vmov	s15, r0
 8002e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e82:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002f24 <decodeDeadReckoningPose+0x1d0>
 8002e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	333e      	adds	r3, #62	@ 0x3e
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fa34 	bl	8003302 <read32>
 8002e9a:	ee07 0a90 	vmov	s15, r0
 8002e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002f24 <decodeDeadReckoningPose+0x1d0>
 8002ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	3342      	adds	r3, #66	@ 0x42
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa24 	bl	8003302 <read32>
 8002eba:	ee07 0a90 	vmov	s15, r0
 8002ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002f24 <decodeDeadReckoningPose+0x1d0>
 8002ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	3346      	adds	r3, #70	@ 0x46
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa14 	bl	8003302 <read32>
 8002eda:	ee07 0a90 	vmov	s15, r0
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002f24 <decodeDeadReckoningPose+0x1d0>
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	334a      	adds	r3, #74	@ 0x4a
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fa04 	bl	8003302 <read32>
 8002efa:	ee07 0a90 	vmov	s15, r0
 8002efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f02:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002f24 <decodeDeadReckoningPose+0x1d0>
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    return SH2_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	37000000 	.word	0x37000000
 8002f20:	30800000 	.word	0x30800000
 8002f24:	33000000 	.word	0x33000000

08002f28 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	3316      	adds	r3, #22
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f9e3 	bl	8003302 <read32>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	331a      	adds	r3, #26
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f9b4 	bl	80032b6 <read8>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	331b      	adds	r3, #27
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f9ab 	bl	80032b6 <read8>
 8002f60:	4603      	mov	r3, r0
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	331c      	adds	r3, #28
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f9b1 	bl	80032d4 <read16>
 8002f72:	4603      	mov	r3, r0
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <SH2_HAL_Setup>:
static IMU_Config imuC;
SensorData_t imuData = {0};

static void sensorHandler(void *cookie, sh2_SensorEvent_t *event);

void SH2_HAL_Setup(IMU_Config *c){
 8002f84:	b4b0      	push	{r4, r5, r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	imuC = *c;
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <SH2_HAL_Setup+0x28>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4614      	mov	r4, r2
 8002f92:	461d      	mov	r5, r3
 8002f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f9c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bcb0      	pop	{r4, r5, r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2400058c 	.word	0x2400058c

08002fb0 <getTimeUs>:

// --- Time function (approximate, from HAL tick) ---
static uint32_t getTimeUs(sh2_Hal_t *self) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() * 1000;  // crude ms→us conversion
 8002fb8:	f001 f832 	bl	8004020 <HAL_GetTick>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <open>:

// --- Open: init/reset the sensor ---
static int open(sh2_Hal_t *self) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    // Reset BNO08X
    HAL_GPIO_WritePin(imuC.rstPort, imuC.rstPin, GPIO_PIN_RESET);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <open+0x40>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <open+0x40>)
 8002fde:	8a91      	ldrh	r1, [r2, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fff4 	bl	8005fd0 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // hold reset
 8002fe8:	200a      	movs	r0, #10
 8002fea:	f001 f825 	bl	8004038 <HAL_Delay>
    HAL_GPIO_WritePin(imuC.rstPort, imuC.rstPin, GPIO_PIN_SET);
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <open+0x40>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <open+0x40>)
 8002ff4:	8a91      	ldrh	r1, [r2, #20]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 ffe9 	bl	8005fd0 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // allow time to boot
 8002ffe:	2032      	movs	r0, #50	@ 0x32
 8003000:	f001 f81a 	bl	8004038 <HAL_Delay>

    return 0;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2400058c 	.word	0x2400058c

08003014 <close>:

// --- Close: deinit/reset ---
static void close(sh2_Hal_t *self) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(imuC.rstPort, imuC.rstPin, GPIO_PIN_RESET);
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <close+0x20>)
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <close+0x20>)
 8003022:	8a91      	ldrh	r1, [r2, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f002 ffd2 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2400058c 	.word	0x2400058c

08003038 <read>:

// --- Read: poll INTN and read I2C data if available ---
static int read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t_us) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
    if (HAL_GPIO_ReadPin(imuC.intnPort, imuC.intnPin) == GPIO_PIN_RESET) {
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <read+0x64>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4a14      	ldr	r2, [pc, #80]	@ (800309c <read+0x64>)
 800304c:	8992      	ldrh	r2, [r2, #12]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f002 ffa5 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11a      	bne.n	8003092 <read+0x5a>
        if (HAL_I2C_Master_Receive(imuC.i2cHandle, imuC.i2cAddr, pBuffer, len, HAL_MAX_DELAY) == HAL_OK) {
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <read+0x64>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <read+0x64>)
 8003062:	791b      	ldrb	r3, [r3, #4]
 8003064:	4619      	mov	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f04f 32ff 	mov.w	r2, #4294967295
 800306e:	9200      	str	r2, [sp, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	f003 f9c3 	bl	80063fc <HAL_I2C_Master_Receive>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <read+0x5a>
            if (t_us) *t_us = getTimeUs(self);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <read+0x56>
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ff94 	bl	8002fb0 <getTimeUs>
 8003088:	4602      	mov	r2, r0
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
            return len;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	e000      	b.n	8003094 <read+0x5c>
        }
    }
    return 0;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2400058c 	.word	0x2400058c

080030a0 <write>:

// --- Write: send data to BNO08X ---
static int write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
    if (HAL_I2C_Master_Transmit(imuC.i2cHandle, imuC.i2cAddr, pBuffer, len, HAL_MAX_DELAY) == HAL_OK) {
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <write+0x3c>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <write+0x3c>)
 80030b2:	791b      	ldrb	r3, [r3, #4]
 80030b4:	4619      	mov	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	f003 f883 	bl	80061cc <HAL_I2C_Master_Transmit>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <write+0x30>
        return len;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	e000      	b.n	80030d2 <write+0x32>
    }
    return 0;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2400058c 	.word	0x2400058c

080030e0 <sh2_hal_get>:

// --- Return pointer to HAL interface ---
sh2_Hal_t *sh2_hal_get(void) {
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
    hal.open = open;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <sh2_hal_get+0x30>)
 80030e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003114 <sh2_hal_get+0x34>)
 80030e8:	601a      	str	r2, [r3, #0]
    hal.close = close;
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <sh2_hal_get+0x30>)
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <sh2_hal_get+0x38>)
 80030ee:	605a      	str	r2, [r3, #4]
    hal.read = read;
 80030f0:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <sh2_hal_get+0x30>)
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <sh2_hal_get+0x3c>)
 80030f4:	609a      	str	r2, [r3, #8]
    hal.write = write;
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <sh2_hal_get+0x30>)
 80030f8:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <sh2_hal_get+0x40>)
 80030fa:	60da      	str	r2, [r3, #12]
    hal.getTimeUs = getTimeUs;
 80030fc:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <sh2_hal_get+0x30>)
 80030fe:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <sh2_hal_get+0x44>)
 8003100:	611a      	str	r2, [r3, #16]
    return &hal;
 8003102:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <sh2_hal_get+0x30>)
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	24000578 	.word	0x24000578
 8003114:	08002fd1 	.word	0x08002fd1
 8003118:	08003015 	.word	0x08003015
 800311c:	08003039 	.word	0x08003039
 8003120:	080030a1 	.word	0x080030a1
 8003124:	08002fb1 	.word	0x08002fb1

08003128 <IMU_Init>:

void IMU_Init(void){
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
	sh2_open(sh2_hal_get(), NULL, NULL);
 800312e:	f7ff ffd7 	bl	80030e0 <sh2_hal_get>
 8003132:	4603      	mov	r3, r0
 8003134:	2200      	movs	r2, #0
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe fbd3 	bl	80018e4 <sh2_open>
	sh2_setSensorCallback(sensorHandler, NULL);
 800313e:	2100      	movs	r1, #0
 8003140:	4812      	ldr	r0, [pc, #72]	@ (800318c <IMU_Init+0x64>)
 8003142:	f7fe fc7d 	bl	8001a40 <sh2_setSensorCallback>
	sh2_SensorConfig_t config = {0};
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
	config.reportInterval_us = 50000;
 8003154:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8003158:	60fb      	str	r3, [r7, #12]

	sh2_setSensorConfig(SH2_ACCELEROMETER, &config);
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	4619      	mov	r1, r3
 800315e:	2001      	movs	r0, #1
 8003160:	f7fe fc84 	bl	8001a6c <sh2_setSensorConfig>
	sh2_setSensorConfig(SH2_GYROSCOPE_CALIBRATED, &config);
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	4619      	mov	r1, r3
 8003168:	2002      	movs	r0, #2
 800316a:	f7fe fc7f 	bl	8001a6c <sh2_setSensorConfig>
	sh2_setSensorConfig(SH2_MAGNETIC_FIELD_CALIBRATED, &config);
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	4619      	mov	r1, r3
 8003172:	2003      	movs	r0, #3
 8003174:	f7fe fc7a 	bl	8001a6c <sh2_setSensorConfig>
	sh2_setSensorConfig(SH2_ROTATION_VECTOR, &config);
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	4619      	mov	r1, r3
 800317c:	2005      	movs	r0, #5
 800317e:	f7fe fc75 	bl	8001a6c <sh2_setSensorConfig>

}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	0800319d 	.word	0x0800319d

08003190 <IMU_Service>:

void IMU_Service(void){
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
	sh2_service();
 8003194:	f7fe fc40 	bl	8001a18 <sh2_service>
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <sensorHandler>:

static void sensorHandler(void *cookie, sh2_SensorEvent_t *event){
 800319c:	b580      	push	{r7, lr}
 800319e:	b096      	sub	sp, #88	@ 0x58
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	sh2_SensorValue_t val;
	sh2_decodeSensorEvent(&val, event);
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fcbd 	bl	8001b2c <sh2_decodeSensorEvent>

	switch (event-> reportId){
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	7c5b      	ldrb	r3, [r3, #17]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d838      	bhi.n	800322e <sensorHandler+0x92>
 80031bc:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <sensorHandler+0x28>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d9 	.word	0x080031d9
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	08003201 	.word	0x08003201
 80031d0:	0800322f 	.word	0x0800322f
 80031d4:	08003215 	.word	0x08003215
		case SH2_ACCELEROMETER:
			imuData.ax = val.un.accelerometer.x;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <sensorHandler+0x9c>)
 80031dc:	6013      	str	r3, [r2, #0]
			imuData.ay = val.un.accelerometer.y;
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <sensorHandler+0x9c>)
 80031e2:	6053      	str	r3, [r2, #4]
			imuData.az = val.un.accelerometer.z;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <sensorHandler+0x9c>)
 80031e8:	6093      	str	r3, [r2, #8]
			break;
 80031ea:	e020      	b.n	800322e <sensorHandler+0x92>
		case SH2_GYROSCOPE_CALIBRATED:
			imuData.gx = val.un.gyroscope.x;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4a12      	ldr	r2, [pc, #72]	@ (8003238 <sensorHandler+0x9c>)
 80031f0:	60d3      	str	r3, [r2, #12]
			imuData.gy = val.un.gyroscope.y;
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	4a10      	ldr	r2, [pc, #64]	@ (8003238 <sensorHandler+0x9c>)
 80031f6:	6113      	str	r3, [r2, #16]
			imuData.gz = val.un.gyroscope.z;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003238 <sensorHandler+0x9c>)
 80031fc:	6153      	str	r3, [r2, #20]
			break;
 80031fe:	e016      	b.n	800322e <sensorHandler+0x92>
		case SH2_MAGNETIC_FIELD_CALIBRATED:
			imuData.mx = val.un.magneticField.x;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <sensorHandler+0x9c>)
 8003204:	6193      	str	r3, [r2, #24]
			imuData.my = val.un.magneticField.y;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	4a0b      	ldr	r2, [pc, #44]	@ (8003238 <sensorHandler+0x9c>)
 800320a:	61d3      	str	r3, [r2, #28]
			imuData.mz = val.un.magneticField.z;
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <sensorHandler+0x9c>)
 8003210:	6213      	str	r3, [r2, #32]
			break;
 8003212:	e00c      	b.n	800322e <sensorHandler+0x92>
		case SH2_ROTATION_VECTOR:
			imuData.i = val.un.rotationVector.i;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4a08      	ldr	r2, [pc, #32]	@ (8003238 <sensorHandler+0x9c>)
 8003218:	6253      	str	r3, [r2, #36]	@ 0x24
			imuData.j = val.un.rotationVector.j;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	4a06      	ldr	r2, [pc, #24]	@ (8003238 <sensorHandler+0x9c>)
 800321e:	6293      	str	r3, [r2, #40]	@ 0x28
			imuData.k = val.un.rotationVector.k;
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <sensorHandler+0x9c>)
 8003224:	62d3      	str	r3, [r2, #44]	@ 0x2c
			imuData.r = val.un.rotationVector.real;
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003228:	4a03      	ldr	r2, [pc, #12]	@ (8003238 <sensorHandler+0x9c>)
 800322a:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800322c:	bf00      	nop
	}
}
 800322e:	bf00      	nop
 8003230:	3758      	adds	r7, #88	@ 0x58
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	240005a4 	.word	0x240005a4

0800323c <Tare>:

void Tare(void){
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	sh2_setTareNow(SH2_TARE_X|SH2_TARE_Y|SH2_TARE_Z, SH2_TARE_BASIS_ROTATION_VECTOR);
 8003240:	2100      	movs	r1, #0
 8003242:	2007      	movs	r0, #7
 8003244:	f7fe fc3c 	bl	8001ac0 <sh2_setTareNow>
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}

0800324c <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b21a      	sxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3301      	adds	r3, #1
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b21b      	sxth	r3, r3
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21b      	sxth	r3, r3
 800326a:	81fb      	strh	r3, [r7, #14]
    return retval;
 800326c:	89fb      	ldrh	r3, [r7, #14]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3302      	adds	r3, #2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3303      	adds	r3, #3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
    return retval;
 80032a8:	68fb      	ldr	r3, [r7, #12]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	73fb      	strb	r3, [r7, #15]
    return retval;
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b21a      	sxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3301      	adds	r3, #1
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b21b      	sxth	r3, r3
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	81fb      	strh	r3, [r7, #14]
    return retval;
 80032f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3301      	adds	r3, #1
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3302      	adds	r3, #2
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3303      	adds	r3, #3
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	061b      	lsls	r3, r3, #24
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
    return retval;
 8003330:	68fb      	ldr	r3, [r7, #12]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	e00b      	b.n	8003364 <shtp_init+0x24>
        instances[n].pHal = 0;
 800334c:	4a0b      	ldr	r2, [pc, #44]	@ (800337c <shtp_init+0x3c>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f640 1114 	movw	r1, #2324	@ 0x914
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3301      	adds	r3, #1
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	ddf0      	ble.n	800334c <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 800336a:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <shtp_init+0x40>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	240005d8 	.word	0x240005d8
 8003380:	24000eec 	.word	0x24000eec

08003384 <getInstance>:

static shtp_t *getInstance(void)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	e014      	b.n	80033ba <getInstance+0x36>
        if (instances[n].pHal == 0) {
 8003390:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <getInstance+0x4c>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f640 1114 	movw	r1, #2324	@ 0x914
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f640 1214 	movw	r2, #2324	@ 0x914
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <getInstance+0x4c>)
 80033b0:	4413      	add	r3, r2
 80033b2:	e006      	b.n	80033c2 <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	dde7      	ble.n	8003390 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	240005d8 	.word	0x240005d8

080033d4 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	80fb      	strh	r3, [r7, #6]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	88bb      	ldrh	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d201      	bcs.n	80033f0 <min_u16+0x1c>
        return a;
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	e000      	b.n	80033f2 <min_u16+0x1e>
    }
    else {
        return b;
 80033f0:	88bb      	ldrh	r3, [r7, #4]
    }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 80033fe:	b590      	push	{r4, r7, lr}
 8003400:	b089      	sub	sp, #36	@ 0x24
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	460b      	mov	r3, r1
 800340c:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 8003412:	2300      	movs	r3, #0
 8003414:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	833b      	strh	r3, [r7, #24]
    remaining = len;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 8003422:	e079      	b.n	8003518 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8003424:	8afb      	ldrh	r3, [r7, #22]
 8003426:	217c      	movs	r1, #124	@ 0x7c
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ffd3 	bl	80033d4 <min_u16>
 800342e:	4603      	mov	r3, r0
 8003430:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8003432:	8abb      	ldrh	r3, [r7, #20]
 8003434:	3304      	adds	r3, #4
 8003436:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8003438:	8a7b      	ldrh	r3, [r7, #18]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8003440:	8a7b      	ldrh	r3, [r7, #18]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8003452:	7efb      	ldrb	r3, [r7, #27]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d006      	beq.n	8003466 <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	7b5b      	ldrb	r3, [r3, #13]
 800345c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	7afa      	ldrb	r2, [r7, #11]
 800346a:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 800346c:	7afa      	ldrb	r2, [r7, #11]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 800347e:	7819      	ldrb	r1, [r3, #0]
 8003480:	1c4b      	adds	r3, r1, #1
 8003482:	b2dc      	uxtb	r4, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4403      	add	r3, r0
 8003490:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 8003494:	4622      	mov	r2, r4
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	460a      	mov	r2, r1
 800349c:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	330c      	adds	r3, #12
 80034a2:	1d18      	adds	r0, r3, #4
 80034a4:	8b3b      	ldrh	r3, [r7, #24]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	8aba      	ldrh	r2, [r7, #20]
 80034ac:	4619      	mov	r1, r3
 80034ae:	f009 f914 	bl	800c6da <memcpy>
        remaining -= transferLen;
 80034b2:	8afa      	ldrh	r2, [r7, #22]
 80034b4:	8abb      	ldrh	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 80034ba:	8b3a      	ldrh	r2, [r7, #24]
 80034bc:	8abb      	ldrh	r3, [r7, #20]
 80034be:	4413      	add	r3, r2
 80034c0:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	6810      	ldr	r0, [r2, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f102 010c 	add.w	r1, r2, #12
 80034d2:	8a7a      	ldrh	r2, [r7, #18]
 80034d4:	4798      	blx	r3
 80034d6:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80034d8:	e00d      	b.n	80034f6 <txProcess+0xf8>
        {
            shtp_service(pShtp);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa2b 	bl	8003936 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	6810      	ldr	r0, [r2, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f102 010c 	add.w	r1, r2, #12
 80034f0:	8a7a      	ldrh	r2, [r7, #18]
 80034f2:	4798      	blx	r3
 80034f4:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ee      	beq.n	80034da <txProcess+0xdc>
        }
        
        if (status < 0)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da08      	bge.n	8003514 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
            return status;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	e005      	b.n	8003520 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8003514:	2301      	movs	r3, #1
 8003516:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8003518:	8afb      	ldrh	r3, [r7, #22]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d182      	bne.n	8003424 <txProcess+0x26>
    }

    return SH2_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3724      	adds	r7, #36	@ 0x24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd90      	pop	{r4, r7, pc}

08003528 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d813      	bhi.n	800356e <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8139 	beq.w	80037d0 <rxAssemble+0x2a8>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	2101      	movs	r1, #1
 8003568:	4610      	mov	r0, r2
 800356a:	4798      	blx	r3
        }
        return;
 800356c:	e130      	b.n	80037d0 <rxAssemble+0x2a8>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	3301      	adds	r3, #1
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	b29b      	uxth	r3, r3
 800357e:	4413      	add	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003586:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3301      	adds	r3, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b25b      	sxtb	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	09db      	lsrs	r3, r3, #7
 8003594:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	789b      	ldrb	r3, [r3, #2]
 800359a:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	78db      	ldrb	r3, [r3, #3]
 80035a0:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 80035a2:	7dfa      	ldrb	r2, [r7, #23]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	7dba      	ldrb	r2, [r7, #22]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d00a      	beq.n	80035d2 <rxAssemble+0xaa>
        if (pShtp->eventCallback) {
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <rxAssemble+0xaa>
            pShtp->eventCallback(pShtp->eventCookie,
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	6892      	ldr	r2, [r2, #8]
 80035cc:	2106      	movs	r1, #6
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 80035d2:	8abb      	ldrh	r3, [r7, #20]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d813      	bhi.n	8003600 <rxAssemble+0xd8>
        pShtp->rxShortFragments++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80f2 	beq.w	80037d4 <rxAssemble+0x2ac>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	2101      	movs	r1, #1
 80035fa:	4610      	mov	r0, r2
 80035fc:	4798      	blx	r3
        }
        return;
 80035fe:	e0e9      	b.n	80037d4 <rxAssemble+0x2ac>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b07      	cmp	r3, #7
 8003604:	d913      	bls.n	800362e <rxAssemble+0x106>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

        if (pShtp->eventCallback) {
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80dd 	beq.w	80037d8 <rxAssemble+0x2b0>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	2103      	movs	r1, #3
 8003628:	4610      	mov	r0, r2
 800362a:	4798      	blx	r3
        }
        return;
 800362c:	e0d4      	b.n	80037d8 <rxAssemble+0x2b0>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d040      	beq.n	80036ba <rxAssemble+0x192>
        // Check this against previously received data.
        if (!continuation ||
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d119      	bne.n	8003678 <rxAssemble+0x150>
            (chan != pShtp->inChan) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
        if (!continuation ||
 800364a:	7dfa      	ldrb	r2, [r7, #23]
 800364c:	429a      	cmp	r2, r3
 800364e:	d113      	bne.n	8003678 <rxAssemble+0x150>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8003650:	7dfa      	ldrb	r2, [r7, #23]
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8003662:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8003664:	7dba      	ldrb	r2, [r7, #22]
 8003666:	429a      	cmp	r2, r3
 8003668:	d106      	bne.n	8003678 <rxAssemble+0x150>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 800366a:	8abb      	ldrh	r3, [r7, #20]
 800366c:	3b04      	subs	r3, #4
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	f8b2 208c 	ldrh.w	r2, [r2, #140]	@ 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8003674:	4293      	cmp	r3, r2
 8003676:	d020      	beq.n	80036ba <rxAssemble+0x192>
            
            if (pShtp->eventCallback) {
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <rxAssemble+0x166>
                pShtp->eventCallback(pShtp->eventCookie,
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	2105      	movs	r1, #5
 800368a:	4610      	mov	r0, r2
 800368c:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

            pShtp->rxInterruptedPayloads++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            if (pShtp->eventCallback) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d006      	beq.n	80036ba <rxAssemble+0x192>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	2107      	movs	r1, #7
 80036b6:	4610      	mov	r0, r2
 80036b8:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 80036ba:	7dfa      	ldrb	r2, [r7, #23]
 80036bc:	7dbb      	ldrb	r3, [r7, #22]
 80036be:	3301      	adds	r3, #1
 80036c0:	b2d8      	uxtb	r0, r3
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80036d2:	4602      	mov	r2, r0
 80036d4:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d122      	bne.n	8003726 <rxAssemble+0x1fe>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 80036e0:	8abb      	ldrh	r3, [r7, #20]
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d912      	bls.n	800370e <rxAssemble+0x1e6>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
            
            if (pShtp->eventCallback) {
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d06e      	beq.n	80037dc <rxAssemble+0x2b4>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	2102      	movs	r1, #2
 8003708:	4610      	mov	r0, r2
 800370a:	4798      	blx	r3
            }

            return;
 800370c:	e066      	b.n	80037dc <rxAssemble+0x2b4>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
        pShtp->inChan = chan;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	7dfa      	ldrb	r2, [r7, #23]
 8003722:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	8abb      	ldrh	r3, [r7, #20]
 800372a:	429a      	cmp	r2, r3
 800372c:	d901      	bls.n	8003732 <rxAssemble+0x20a>
        // Only use the valid portion of the transfer
        len = payloadLen;
 800372e:	8abb      	ldrh	r3, [r7, #20]
 8003730:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	338f      	adds	r3, #143	@ 0x8f
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	@ 0x490
 800373c:	1898      	adds	r0, r3, r2
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1d19      	adds	r1, r3, #4
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	3b04      	subs	r3, #4
 8003746:	461a      	mov	r2, r3
 8003748:	f008 ffc7 	bl	800c6da <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	4413      	add	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b04      	subs	r3, #4
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
    pShtp->inRemaining = payloadLen - len;
 8003762:	8aba      	ldrh	r2, [r7, #20]
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d131      	bne.n	80037de <rxAssemble+0x2b6>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 800377a:	7dfa      	ldrb	r2, [r7, #23]
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d025      	beq.n	80037de <rxAssemble+0x2b6>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8003792:	7dfa      	ldrb	r2, [r7, #23]
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 80037a4:	681c      	ldr	r4, [r3, #0]
 80037a6:	7dfa      	ldrb	r2, [r7, #23]
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80037b8:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f103 018f 	add.w	r1, r3, #143	@ 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80037cc:	47a0      	blx	r4
 80037ce:	e006      	b.n	80037de <rxAssemble+0x2b6>
        return;
 80037d0:	bf00      	nop
 80037d2:	e004      	b.n	80037de <rxAssemble+0x2b6>
        return;
 80037d4:	bf00      	nop
 80037d6:	e002      	b.n	80037de <rxAssemble+0x2b6>
        return;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <rxAssemble+0x2b6>
            return;
 80037dc:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 80037ec:	4b16      	ldr	r3, [pc, #88]	@ (8003848 <shtp_open+0x64>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	f083 0301 	eor.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 80037fa:	f7ff fda1 	bl	8003340 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <shtp_open+0x24>
        // Error
        return 0;
 8003804:	2300      	movs	r3, #0
 8003806:	e01b      	b.n	8003840 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8003808:	f7ff fdbc 	bl	8003384 <getInstance>
 800380c:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8003814:	2300      	movs	r3, #0
 8003816:	e013      	b.n	8003840 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8003818:	f640 1214 	movw	r2, #2324	@ 0x914
 800381c:	2100      	movs	r1, #0
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f008 fedb 	bl	800c5da <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
 800382c:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <shtp_open+0x54>
        return 0;
 8003834:	2300      	movs	r3, #0
 8003836:	e003      	b.n	8003840 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]

    return pShtp;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	24000eec 	.word	0x24000eec

0800384c <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	460b      	mov	r3, r1
 8003882:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8003888:	7afb      	ldrb	r3, [r7, #11]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <shtp_listenChan+0x20>
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	2b07      	cmp	r3, #7
 8003892:	d902      	bls.n	800389a <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8003894:	f06f 0301 	mvn.w	r3, #1
 8003898:	e016      	b.n	80038c8 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 800389a:	7afa      	ldrb	r2, [r7, #11]
 800389c:	6979      	ldr	r1, [r7, #20]
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 80038b0:	7afa      	ldrb	r2, [r7, #11]
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	461a      	mov	r2, r3
 80038e0:	460b      	mov	r3, r1
 80038e2:	72fb      	strb	r3, [r7, #11]
 80038e4:	4613      	mov	r3, r2
 80038e6:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	2b80      	cmp	r3, #128	@ 0x80
 80038f0:	d909      	bls.n	8003906 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
        return SH2_ERR_BAD_PARAM;
 8003900:	f06f 0301 	mvn.w	r3, #1
 8003904:	e013      	b.n	800392e <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	2b07      	cmp	r3, #7
 800390a:	d909      	bls.n	8003920 <shtp_send+0x4c>
        pShtp->badTxChan++;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
        return SH2_ERR_BAD_PARAM;
 800391a:	f06f 0301 	mvn.w	r3, #1
 800391e:	e006      	b.n	800392e <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	7af9      	ldrb	r1, [r7, #11]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff fd69 	bl	80033fe <txProcess>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689c      	ldr	r4, [r3, #8]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800395e:	47a0      	blx	r4
 8003960:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	dd08      	ble.n	800397a <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7ff fdd7 	bl	8003528 <rxAssemble>
    }
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
	...

08003984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <HAL_MspInit+0x30>)
 800398c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003990:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <HAL_MspInit+0x30>)
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_MspInit+0x30>)
 800399c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	58024400 	.word	0x58024400

080039b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b0b4      	sub	sp, #208	@ 0xd0
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039c0:	f107 0310 	add.w	r3, r7, #16
 80039c4:	22c0      	movs	r2, #192	@ 0xc0
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f008 fe06 	bl	800c5da <memset>
  if(hadc->Instance==ADC1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <HAL_ADC_MspInit+0xb8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d146      	bne.n	8003a66 <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80039d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80039e4:	2302      	movs	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80039e8:	230c      	movs	r3, #12
 80039ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80039ec:	2302      	movs	r3, #2
 80039ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80039f0:	2302      	movs	r3, #2
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80039f4:	2302      	movs	r3, #2
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80039f8:	23c0      	movs	r3, #192	@ 0xc0
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80039fc:	2320      	movs	r3, #32
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a0a:	f107 0310 	add.w	r3, r7, #16
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 f968 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8003a1a:	f7fd fb1b 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <HAL_ADC_MspInit+0xbc>)
 8003a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a24:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <HAL_ADC_MspInit+0xbc>)
 8003a26:	f043 0320 	orr.w	r3, r3, #32
 8003a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a2e:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <HAL_ADC_MspInit+0xbc>)
 8003a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <HAL_ADC_MspInit+0xbc>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a42:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <HAL_ADC_MspInit+0xbc>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_ADC_MspInit+0xbc>)
 8003a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003a5a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8003a5e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003a62:	f000 fb19 	bl	8004098 <HAL_SYSCFG_AnalogSwitchConfig>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003a66:	bf00      	nop
 8003a68:	37d0      	adds	r7, #208	@ 0xd0
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40022000 	.word	0x40022000
 8003a74:	58024400 	.word	0x58024400

08003a78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a90:	f107 0310 	add.w	r3, r7, #16
 8003a94:	22c0      	movs	r2, #192	@ 0xc0
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f008 fd9e 	bl	800c5da <memset>
  if(hi2c->Instance==I2C4)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a27      	ldr	r2, [pc, #156]	@ (8003b40 <HAL_I2C_MspInit+0xc8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d146      	bne.n	8003b36 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003aa8:	f04f 0210 	mov.w	r2, #16
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 f910 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003aca:	f7fd fac3 	bl	8001054 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_I2C_MspInit+0xcc>)
 8003ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b44 <HAL_I2C_MspInit+0xcc>)
 8003ad6:	f043 0308 	orr.w	r3, r3, #8
 8003ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ade:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <HAL_I2C_MspInit+0xcc>)
 8003ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003aec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003af0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003af4:	2312      	movs	r3, #18
 8003af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003b06:	2304      	movs	r3, #4
 8003b08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b10:	4619      	mov	r1, r3
 8003b12:	480d      	ldr	r0, [pc, #52]	@ (8003b48 <HAL_I2C_MspInit+0xd0>)
 8003b14:	f002 f894 	bl	8005c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_I2C_MspInit+0xcc>)
 8003b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b1e:	4a09      	ldr	r2, [pc, #36]	@ (8003b44 <HAL_I2C_MspInit+0xcc>)
 8003b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_I2C_MspInit+0xcc>)
 8003b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C4_MspInit 1 */

  }

}
 8003b36:	bf00      	nop
 8003b38:	37e8      	adds	r7, #232	@ 0xe8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	58001c00 	.word	0x58001c00
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58020c00 	.word	0x58020c00

08003b4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0bc      	sub	sp, #240	@ 0xf0
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	22c0      	movs	r2, #192	@ 0xc0
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f008 fd34 	bl	800c5da <memset>
  if(huart->Instance==USART2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4d      	ldr	r2, [pc, #308]	@ (8003cac <HAL_UART_MspInit+0x160>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d146      	bne.n	8003c0a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b7c:	f04f 0202 	mov.w	r2, #2
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b8e:	f107 0318 	add.w	r3, r7, #24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 f8a6 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003b9e:	f7fd fa59 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ba2:	4b43      	ldr	r3, [pc, #268]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ba8:	4a41      	ldr	r2, [pc, #260]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bc6:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003bc8:	f043 0308 	orr.w	r3, r3, #8
 8003bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bd0:	4b37      	ldr	r3, [pc, #220]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003bde:	2360      	movs	r3, #96	@ 0x60
 8003be0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bfc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003c00:	4619      	mov	r1, r3
 8003c02:	482c      	ldr	r0, [pc, #176]	@ (8003cb4 <HAL_UART_MspInit+0x168>)
 8003c04:	f002 f81c 	bl	8005c40 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c08:	e04b      	b.n	8003ca2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <HAL_UART_MspInit+0x16c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d146      	bne.n	8003ca2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c14:	f04f 0202 	mov.w	r2, #2
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c26:	f107 0318 	add.w	r3, r7, #24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 f85a 	bl	8007ce4 <HAL_RCCEx_PeriphCLKConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003c36:	f7fd fa0d 	bl	8001054 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c40:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c4a:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c58:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c5e:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_UART_MspInit+0x164>)
 8003c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c90:	2307      	movs	r3, #7
 8003c92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c96:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4807      	ldr	r0, [pc, #28]	@ (8003cbc <HAL_UART_MspInit+0x170>)
 8003c9e:	f001 ffcf 	bl	8005c40 <HAL_GPIO_Init>
}
 8003ca2:	bf00      	nop
 8003ca4:	37f0      	adds	r7, #240	@ 0xf0
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40004400 	.word	0x40004400
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	58020c00 	.word	0x58020c00
 8003cb8:	40004800 	.word	0x40004800
 8003cbc:	58020400 	.word	0x58020400

08003cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <NMI_Handler+0x4>

08003cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <HardFault_Handler+0x4>

08003cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <MemManage_Handler+0x4>

08003cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <BusFault_Handler+0x4>

08003ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <UsageFault_Handler+0x4>

08003ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d16:	f000 f96f 	bl	8003ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d22:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003d26:	f002 f96c 	bl	8006002 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  return 1;
 8003d32:	2301      	movs	r3, #1
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_kill>:

int _kill(int pid, int sig)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d48:	f008 fc9a 	bl	800c680 <__errno>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2216      	movs	r2, #22
 8003d50:	601a      	str	r2, [r3, #0]
  return -1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_exit>:

void _exit (int status)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d66:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffe7 	bl	8003d3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <_exit+0x12>

08003d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00a      	b.n	8003d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d86:	f3af 8000 	nop.w
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	60ba      	str	r2, [r7, #8]
 8003d92:	b2ca      	uxtb	r2, r1
 8003d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	dbf0      	blt.n	8003d86 <_read+0x12>
  }

  return len;
 8003da4:	687b      	ldr	r3, [r7, #4]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e009      	b.n	8003dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	60ba      	str	r2, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd f91b 	bl	8001004 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dbf1      	blt.n	8003dc0 <_write+0x12>
  }
  return len;
 8003ddc:	687b      	ldr	r3, [r7, #4]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_close>:

int _close(int file)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_isatty>:

int _isatty(int file)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e58:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <_sbrk+0x5c>)
 8003e5a:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <_sbrk+0x60>)
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e64:	4b13      	ldr	r3, [pc, #76]	@ (8003eb4 <_sbrk+0x64>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <_sbrk+0x64>)
 8003e6e:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <_sbrk+0x68>)
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <_sbrk+0x64>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d207      	bcs.n	8003e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e80:	f008 fbfe 	bl	800c680 <__errno>
 8003e84:	4603      	mov	r3, r0
 8003e86:	220c      	movs	r2, #12
 8003e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	e009      	b.n	8003ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e90:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <_sbrk+0x64>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e96:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <_sbrk+0x64>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	4a05      	ldr	r2, [pc, #20]	@ (8003eb4 <_sbrk+0x64>)
 8003ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	24080000 	.word	0x24080000
 8003eb0:	00000400 	.word	0x00000400
 8003eb4:	24000ef0 	.word	0x24000ef0
 8003eb8:	24001048 	.word	0x24001048

08003ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ebc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003ef8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003ec0:	f7fc fcaa 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ec4:	f7fc fbfa 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ec8:	480c      	ldr	r0, [pc, #48]	@ (8003efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eca:	490d      	ldr	r1, [pc, #52]	@ (8003f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed0:	e002      	b.n	8003ed8 <LoopCopyDataInit>

08003ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ed6:	3304      	adds	r3, #4

08003ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003edc:	d3f9      	bcc.n	8003ed2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ede:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8003f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee4:	e001      	b.n	8003eea <LoopFillZerobss>

08003ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee8:	3204      	adds	r2, #4

08003eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eec:	d3fb      	bcc.n	8003ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eee:	f008 fbcd 	bl	800c68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ef2:	f7fc fcf1 	bl	80008d8 <main>
  bx  lr
 8003ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ef8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003efc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f00:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8003f04:	0800e844 	.word	0x0800e844
  ldr r2, =_sbss
 8003f08:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8003f0c:	24001044 	.word	0x24001044

08003f10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f10:	e7fe      	b.n	8003f10 <ADC3_IRQHandler>
	...

08003f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f1a:	2003      	movs	r0, #3
 8003f1c:	f001 fe50 	bl	8005bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f20:	f003 fd0a 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <HAL_Init+0x68>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4913      	ldr	r1, [pc, #76]	@ (8003f80 <HAL_Init+0x6c>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <HAL_Init+0x68>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a0e      	ldr	r2, [pc, #56]	@ (8003f80 <HAL_Init+0x6c>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	4a0b      	ldr	r2, [pc, #44]	@ (8003f84 <HAL_Init+0x70>)
 8003f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f58:	4a0b      	ldr	r2, [pc, #44]	@ (8003f88 <HAL_Init+0x74>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f5e:	2000      	movs	r0, #0
 8003f60:	f000 f814 	bl	8003f8c <HAL_InitTick>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e002      	b.n	8003f74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f6e:	f7ff fd09 	bl	8003984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	0800e404 	.word	0x0800e404
 8003f84:	24000004 	.word	0x24000004
 8003f88:	24000000 	.word	0x24000000

08003f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f94:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <HAL_InitTick+0x60>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e021      	b.n	8003fe4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fa0:	4b13      	ldr	r3, [pc, #76]	@ (8003ff0 <HAL_InitTick+0x64>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_InitTick+0x60>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 fe35 	bl	8005c26 <HAL_SYSTICK_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e00e      	b.n	8003fe4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d80a      	bhi.n	8003fe2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	f001 fdff 	bl	8005bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fd8:	4a06      	ldr	r2, [pc, #24]	@ (8003ff4 <HAL_InitTick+0x68>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e000      	b.n	8003fe4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2400000c 	.word	0x2400000c
 8003ff0:	24000000 	.word	0x24000000
 8003ff4:	24000008 	.word	0x24000008

08003ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_IncTick+0x20>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_IncTick+0x24>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4413      	add	r3, r2
 8004008:	4a04      	ldr	r2, [pc, #16]	@ (800401c <HAL_IncTick+0x24>)
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	2400000c 	.word	0x2400000c
 800401c:	24000ef4 	.word	0x24000ef4

08004020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return uwTick;
 8004024:	4b03      	ldr	r3, [pc, #12]	@ (8004034 <HAL_GetTick+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	24000ef4 	.word	0x24000ef4

08004038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7ff ffee 	bl	8004020 <HAL_GetTick>
 8004044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d005      	beq.n	800405e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <HAL_Delay+0x44>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800405e:	bf00      	nop
 8004060:	f7ff ffde 	bl	8004020 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	429a      	cmp	r2, r3
 800406e:	d8f7      	bhi.n	8004060 <HAL_Delay+0x28>
  {
  }
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2400000c 	.word	0x2400000c

08004080 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <HAL_GetREVID+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0c1b      	lsrs	r3, r3, #16
}
 800408a:	4618      	mov	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	5c001000 	.word	0x5c001000

08004098 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	4904      	ldr	r1, [pc, #16]	@ (80040c0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	58000400 	.word	0x58000400

080040c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800413c:	2b00      	cmp	r3, #0
 800413e:	d107      	bne.n	8004150 <LL_ADC_SetChannelPreselection+0x24>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2201      	movs	r2, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	e015      	b.n	800417c <LL_ADC_SetChannelPreselection+0x50>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8004166:	2320      	movs	r3, #32
 8004168:	e003      	b.n	8004172 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2201      	movs	r2, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	69d2      	ldr	r2, [r2, #28]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3360      	adds	r3, #96	@ 0x60
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	430b      	orrs	r3, r1
 80041c0:	431a      	orrs	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	611a      	str	r2, [r3, #16]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3360      	adds	r3, #96	@ 0x60
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	431a      	orrs	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	601a      	str	r2, [r3, #0]
  }
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3330      	adds	r3, #48	@ 0x30
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	211f      	movs	r1, #31
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	401a      	ands	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	0e9b      	lsrs	r3, r3, #26
 8004298:	f003 011f 	and.w	r1, r3, #31
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	431a      	orrs	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3314      	adds	r3, #20
 80042c8:	461a      	mov	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	0e5b      	lsrs	r3, r3, #25
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	4413      	add	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0d1b      	lsrs	r3, r3, #20
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2107      	movs	r1, #7
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	401a      	ands	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0d1b      	lsrs	r3, r3, #20
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004328:	43db      	mvns	r3, r3
 800432a:	401a      	ands	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0318 	and.w	r3, r3, #24
 8004332:	4908      	ldr	r1, [pc, #32]	@ (8004354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004334:	40d9      	lsrs	r1, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	400b      	ands	r3, r1
 800433a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433e:	431a      	orrs	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	000fffff 	.word	0x000fffff

08004358 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 031f 	and.w	r3, r3, #31
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800439e:	4013      	ands	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6093      	str	r3, [r2, #8]
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	5fffffc0 	.word	0x5fffffc0

080043b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c8:	d101      	bne.n	80043ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <LL_ADC_EnableInternalRegulator+0x24>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	6fffffc0 	.word	0x6fffffc0

08004404 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004418:	d101      	bne.n	800441e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <LL_ADC_Enable+0x24>)
 800443a:	4013      	ands	r3, r2
 800443c:	f043 0201 	orr.w	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	7fffffc0 	.word	0x7fffffc0

08004454 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <LL_ADC_Disable+0x24>)
 8004462:	4013      	ands	r3, r2
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	7fffffc0 	.word	0x7fffffc0

0800447c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <LL_ADC_IsEnabled+0x18>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <LL_ADC_IsEnabled+0x1a>
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d101      	bne.n	80044ba <LL_ADC_IsDisableOngoing+0x18>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <LL_ADC_IsDisableOngoing+0x1a>
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <LL_ADC_REG_StartConversion+0x24>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	7fffffc0 	.word	0x7fffffc0

080044f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <LL_ADC_REG_StopConversion+0x24>)
 80044fe:	4013      	ands	r3, r2
 8004500:	f043 0210 	orr.w	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	7fffffc0 	.word	0x7fffffc0

08004518 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d101      	bne.n	8004530 <LL_ADC_REG_IsConversionOngoing+0x18>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <LL_ADC_INJ_StopConversion+0x24>)
 800454e:	4013      	ands	r3, r2
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	7fffffc0 	.word	0x7fffffc0

08004568 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d101      	bne.n	8004580 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b089      	sub	sp, #36	@ 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e18f      	b.n	80048ca <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff f9fd 	bl	80039b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff feef 	bl	80043b4 <LL_ADC_IsDeepPowerDownEnabled>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fed5 	bl	8004390 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff0a 	bl	8004404 <LL_ADC_IsInternalRegulatorEnabled>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d114      	bne.n	8004620 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff feee 	bl	80043dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004600:	4b87      	ldr	r3, [pc, #540]	@ (8004820 <HAL_ADC_Init+0x290>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	4a87      	ldr	r2, [pc, #540]	@ (8004824 <HAL_ADC_Init+0x294>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	3301      	adds	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004612:	e002      	b.n	800461a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f9      	bne.n	8004614 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff feed 	bl	8004404 <LL_ADC_IsInternalRegulatorEnabled>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f043 0210 	orr.w	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	f043 0201 	orr.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff61 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 8004656:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 8129 	bne.w	80048b8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 8125 	bne.w	80048b8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004676:	f043 0202 	orr.w	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fefa 	bl	800447c <LL_ADC_IsEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d136      	bne.n	80046fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a65      	ldr	r2, [pc, #404]	@ (8004828 <HAL_ADC_Init+0x298>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_ADC_Init+0x112>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a63      	ldr	r2, [pc, #396]	@ (800482c <HAL_ADC_Init+0x29c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10e      	bne.n	80046c0 <HAL_ADC_Init+0x130>
 80046a2:	4861      	ldr	r0, [pc, #388]	@ (8004828 <HAL_ADC_Init+0x298>)
 80046a4:	f7ff feea 	bl	800447c <LL_ADC_IsEnabled>
 80046a8:	4604      	mov	r4, r0
 80046aa:	4860      	ldr	r0, [pc, #384]	@ (800482c <HAL_ADC_Init+0x29c>)
 80046ac:	f7ff fee6 	bl	800447c <LL_ADC_IsEnabled>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4323      	orrs	r3, r4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e008      	b.n	80046d2 <HAL_ADC_Init+0x142>
 80046c0:	485b      	ldr	r0, [pc, #364]	@ (8004830 <HAL_ADC_Init+0x2a0>)
 80046c2:	f7ff fedb 	bl	800447c <LL_ADC_IsEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a53      	ldr	r2, [pc, #332]	@ (8004828 <HAL_ADC_Init+0x298>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_ADC_Init+0x15a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a51      	ldr	r2, [pc, #324]	@ (800482c <HAL_ADC_Init+0x29c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_Init+0x15e>
 80046ea:	4a52      	ldr	r2, [pc, #328]	@ (8004834 <HAL_ADC_Init+0x2a4>)
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_Init+0x160>
 80046ee:	4a52      	ldr	r2, [pc, #328]	@ (8004838 <HAL_ADC_Init+0x2a8>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7ff fce4 	bl	80040c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046fc:	f7ff fcc0 	bl	8004080 <HAL_GetREVID>
 8004700:	4603      	mov	r3, r0
 8004702:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004706:	4293      	cmp	r3, r2
 8004708:	d914      	bls.n	8004734 <HAL_ADC_Init+0x1a4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d110      	bne.n	8004734 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7d5b      	ldrb	r3, [r3, #21]
 8004716:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800471c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004722:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7f1b      	ldrb	r3, [r3, #28]
 8004728:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800472a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800472c:	f043 030c 	orr.w	r3, r3, #12
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e00d      	b.n	8004750 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	7d5b      	ldrb	r3, [r3, #21]
 8004738:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800473e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004744:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	7f1b      	ldrb	r3, [r3, #28]
 800474a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7f1b      	ldrb	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	3b01      	subs	r3, #1
 800475e:	045b      	lsls	r3, r3, #17
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	4b2c      	ldr	r3, [pc, #176]	@ (800483c <HAL_ADC_Init+0x2ac>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	430b      	orrs	r3, r1
 8004794:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff febc 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 80047a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fede 	bl	8004568 <LL_ADC_INJ_IsConversionOngoing>
 80047ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d15f      	bne.n	8004874 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d15c      	bne.n	8004874 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7d1b      	ldrb	r3, [r3, #20]
 80047be:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <HAL_ADC_Init+0x2b0>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d130      	bne.n	8004848 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <HAL_ADC_Init+0x2b4>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047fa:	3a01      	subs	r2, #1
 80047fc:	0411      	lsls	r1, r2, #16
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800480e:	430a      	orrs	r2, r1
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	611a      	str	r2, [r3, #16]
 800481c:	e01c      	b.n	8004858 <HAL_ADC_Init+0x2c8>
 800481e:	bf00      	nop
 8004820:	24000000 	.word	0x24000000
 8004824:	053e2d63 	.word	0x053e2d63
 8004828:	40022000 	.word	0x40022000
 800482c:	40022100 	.word	0x40022100
 8004830:	58026000 	.word	0x58026000
 8004834:	40022300 	.word	0x40022300
 8004838:	58026300 	.word	0x58026300
 800483c:	fff0c003 	.word	0xfff0c003
 8004840:	ffffbffc 	.word	0xffffbffc
 8004844:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fec6 	bl	8005600 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10c      	bne.n	8004896 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	f023 010f 	bic.w	r1, r3, #15
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	1e5a      	subs	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
 8004894:	e007      	b.n	80048a6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 020f 	bic.w	r2, r2, #15
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	f043 0201 	orr.w	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80048b6:	e007      	b.n	80048c8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	f043 0210 	orr.w	r2, r3, #16
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	@ 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	bf00      	nop

080048d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004a54 <HAL_ADC_Start+0x180>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_Start+0x1c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004a58 <HAL_ADC_Start+0x184>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_Start+0x20>
 80048f0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a5c <HAL_ADC_Start+0x188>)
 80048f2:	e000      	b.n	80048f6 <HAL_ADC_Start+0x22>
 80048f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004a60 <HAL_ADC_Start+0x18c>)
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fd2e 	bl	8004358 <LL_ADC_GetMultimode>
 80048fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fe08 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 809a 	bne.w	8004a44 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_ADC_Start+0x4a>
 800491a:	2302      	movs	r3, #2
 800491c:	e095      	b.n	8004a4a <HAL_ADC_Start+0x176>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fd80 	bl	800542c <ADC_Enable>
 800492c:	4603      	mov	r3, r0
 800492e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 8081 	bne.w	8004a3a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493c:	4b49      	ldr	r3, [pc, #292]	@ (8004a64 <HAL_ADC_Start+0x190>)
 800493e:	4013      	ands	r3, r2
 8004940:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a42      	ldr	r2, [pc, #264]	@ (8004a58 <HAL_ADC_Start+0x184>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d002      	beq.n	8004958 <HAL_ADC_Start+0x84>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	e000      	b.n	800495a <HAL_ADC_Start+0x86>
 8004958:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <HAL_ADC_Start+0x180>)
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	4293      	cmp	r3, r2
 8004960:	d002      	beq.n	8004968 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004980:	d106      	bne.n	8004990 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f023 0206 	bic.w	r2, r3, #6
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	659a      	str	r2, [r3, #88]	@ 0x58
 800498e:	e002      	b.n	8004996 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	221c      	movs	r2, #28
 800499c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <HAL_ADC_Start+0x184>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d002      	beq.n	80049b6 <HAL_ADC_Start+0xe2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	e000      	b.n	80049b8 <HAL_ADC_Start+0xe4>
 80049b6:	4b27      	ldr	r3, [pc, #156]	@ (8004a54 <HAL_ADC_Start+0x180>)
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	4293      	cmp	r3, r2
 80049be:	d008      	beq.n	80049d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d002      	beq.n	80049d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	d114      	bne.n	80049fc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fd67 	bl	80044c8 <LL_ADC_REG_StartConversion>
 80049fa:	e025      	b.n	8004a48 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a12      	ldr	r2, [pc, #72]	@ (8004a58 <HAL_ADC_Start+0x184>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d002      	beq.n	8004a18 <HAL_ADC_Start+0x144>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	e000      	b.n	8004a1a <HAL_ADC_Start+0x146>
 8004a18:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_ADC_Start+0x180>)
 8004a1a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00f      	beq.n	8004a48 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a38:	e006      	b.n	8004a48 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004a42:	e001      	b.n	8004a48 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
 8004a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40022100 	.word	0x40022100
 8004a5c:	40022300 	.word	0x40022300
 8004a60:	58026300 	.word	0x58026300
 8004a64:	fffff0fe 	.word	0xfffff0fe

08004a68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_ADC_Stop+0x16>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e021      	b.n	8004ac2 <HAL_ADC_Stop+0x5a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004a86:	2103      	movs	r1, #3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fc13 	bl	80052b4 <ADC_ConversionStop>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fd51 	bl	8005540 <ADC_Disable>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aac:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <HAL_ADC_Stop+0x64>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	f043 0201 	orr.w	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	ffffeefe 	.word	0xffffeefe

08004ad0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a72      	ldr	r2, [pc, #456]	@ (8004ca8 <HAL_ADC_PollForConversion+0x1d8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_ADC_PollForConversion+0x1e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a70      	ldr	r2, [pc, #448]	@ (8004cac <HAL_ADC_PollForConversion+0x1dc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_PollForConversion+0x22>
 8004aee:	4b70      	ldr	r3, [pc, #448]	@ (8004cb0 <HAL_ADC_PollForConversion+0x1e0>)
 8004af0:	e000      	b.n	8004af4 <HAL_ADC_PollForConversion+0x24>
 8004af2:	4b70      	ldr	r3, [pc, #448]	@ (8004cb4 <HAL_ADC_PollForConversion+0x1e4>)
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fc2f 	bl	8004358 <LL_ADC_GetMultimode>
 8004afa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d102      	bne.n	8004b0a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004b04:	2308      	movs	r3, #8
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	e037      	b.n	8004b7a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d002      	beq.n	8004b1c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b09      	cmp	r3, #9
 8004b1a:	d111      	bne.n	8004b40 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0b1      	b.n	8004c9e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004b3a:	2304      	movs	r3, #4
 8004b3c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004b3e:	e01c      	b.n	8004b7a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a58      	ldr	r2, [pc, #352]	@ (8004ca8 <HAL_ADC_PollForConversion+0x1d8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_ADC_PollForConversion+0x84>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a57      	ldr	r2, [pc, #348]	@ (8004cac <HAL_ADC_PollForConversion+0x1dc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_ADC_PollForConversion+0x88>
 8004b54:	4b56      	ldr	r3, [pc, #344]	@ (8004cb0 <HAL_ADC_PollForConversion+0x1e0>)
 8004b56:	e000      	b.n	8004b5a <HAL_ADC_PollForConversion+0x8a>
 8004b58:	4b56      	ldr	r3, [pc, #344]	@ (8004cb4 <HAL_ADC_PollForConversion+0x1e4>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fc0a 	bl	8004374 <LL_ADC_GetMultiDMATransfer>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e093      	b.n	8004c9e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004b76:	2304      	movs	r3, #4
 8004b78:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b7a:	f7ff fa51 	bl	8004020 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004b80:	e021      	b.n	8004bc6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d01d      	beq.n	8004bc6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004b8a:	f7ff fa49 	bl	8004020 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <HAL_ADC_PollForConversion+0xd0>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d112      	bne.n	8004bc6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	f043 0204 	orr.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e06b      	b.n	8004c9e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0d6      	beq.n	8004b82 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fb28 	bl	800423a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01c      	beq.n	8004c2a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7d5b      	ldrb	r3, [r3, #21]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d118      	bne.n	8004c2a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d111      	bne.n	8004c2a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <HAL_ADC_PollForConversion+0x1dc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d002      	beq.n	8004c3a <HAL_ADC_PollForConversion+0x16a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	e000      	b.n	8004c3c <HAL_ADC_PollForConversion+0x16c>
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_ADC_PollForConversion+0x1d8>)
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d008      	beq.n	8004c56 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d002      	beq.n	8004c56 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d104      	bne.n	8004c60 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e00c      	b.n	8004c7a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a11      	ldr	r2, [pc, #68]	@ (8004cac <HAL_ADC_PollForConversion+0x1dc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d002      	beq.n	8004c70 <HAL_ADC_PollForConversion+0x1a0>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	e000      	b.n	8004c72 <HAL_ADC_PollForConversion+0x1a2>
 8004c70:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <HAL_ADC_PollForConversion+0x1d8>)
 8004c72:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2208      	movs	r2, #8
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e008      	b.n	8004c9c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	220c      	movs	r2, #12
 8004c9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40022000 	.word	0x40022000
 8004cac:	40022100 	.word	0x40022100
 8004cb0:	40022300 	.word	0x40022300
 8004cb4:	58026300 	.word	0x58026300

08004cb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b08d      	sub	sp, #52	@ 0x34
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a65      	ldr	r2, [pc, #404]	@ (8004e84 <HAL_ADC_ConfigChannel+0x1b0>)
 8004cee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x2a>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e2c7      	b.n	800528e <HAL_ADC_ConfigChannel+0x5ba>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fc04 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 82ac 	bne.w	8005270 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	db2c      	blt.n	8004d7a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d108      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x6a>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	e016      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x98>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	613b      	str	r3, [r7, #16]
  return result;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8004d56:	2320      	movs	r3, #32
 8004d58:	e003      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2201      	movs	r2, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	69d1      	ldr	r1, [r2, #28]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	430b      	orrs	r3, r1
 8004d78:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7ff fa6a 	bl	8004260 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fbc1 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 8004d96:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fbe3 	bl	8004568 <LL_ADC_INJ_IsConversionOngoing>
 8004da2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 80b8 	bne.w	8004f1c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 80b4 	bne.w	8004f1c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6819      	ldr	r1, [r3, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f7ff fa79 	bl	80042b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004dc6:	4b30      	ldr	r3, [pc, #192]	@ (8004e88 <HAL_ADC_ConfigChannel+0x1b4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dd2:	d10b      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x118>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	e01d      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x154>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x13e>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	e00a      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x154>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d02c      	beq.n	8004e8c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6919      	ldr	r1, [r3, #16]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f7ff f9a7 	bl	8004192 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6919      	ldr	r1, [r3, #16]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	7e5b      	ldrb	r3, [r3, #25]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d102      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x186>
 8004e54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x188>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f7ff f9d1 	bl	8004204 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	7e1b      	ldrb	r3, [r3, #24]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d102      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x1a4>
 8004e72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e76:	e000      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x1a6>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7ff f9a9 	bl	80041d2 <LL_ADC_SetDataRightShift>
 8004e80:	e04c      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x248>
 8004e82:	bf00      	nop
 8004e84:	47ff0000 	.word	0x47ff0000
 8004e88:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	069b      	lsls	r3, r3, #26
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d107      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	069b      	lsls	r3, r3, #26
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d107      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ed2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	069b      	lsls	r3, r3, #26
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d107      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ef6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	069b      	lsls	r3, r3, #26
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d107      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff faab 	bl	800447c <LL_ADC_IsEnabled>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 81aa 	bne.w	8005282 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7ff f9e8 	bl	8004310 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a87      	ldr	r2, [pc, #540]	@ (8005164 <HAL_ADC_ConfigChannel+0x490>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f040 809a 	bne.w	8005080 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4984      	ldr	r1, [pc, #528]	@ (8005168 <HAL_ADC_ConfigChannel+0x494>)
 8004f56:	428b      	cmp	r3, r1
 8004f58:	d147      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x316>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4983      	ldr	r1, [pc, #524]	@ (800516c <HAL_ADC_ConfigChannel+0x498>)
 8004f60:	428b      	cmp	r3, r1
 8004f62:	d040      	beq.n	8004fe6 <HAL_ADC_ConfigChannel+0x312>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4981      	ldr	r1, [pc, #516]	@ (8005170 <HAL_ADC_ConfigChannel+0x49c>)
 8004f6a:	428b      	cmp	r3, r1
 8004f6c:	d039      	beq.n	8004fe2 <HAL_ADC_ConfigChannel+0x30e>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4980      	ldr	r1, [pc, #512]	@ (8005174 <HAL_ADC_ConfigChannel+0x4a0>)
 8004f74:	428b      	cmp	r3, r1
 8004f76:	d032      	beq.n	8004fde <HAL_ADC_ConfigChannel+0x30a>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	497e      	ldr	r1, [pc, #504]	@ (8005178 <HAL_ADC_ConfigChannel+0x4a4>)
 8004f7e:	428b      	cmp	r3, r1
 8004f80:	d02b      	beq.n	8004fda <HAL_ADC_ConfigChannel+0x306>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	497d      	ldr	r1, [pc, #500]	@ (800517c <HAL_ADC_ConfigChannel+0x4a8>)
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	d024      	beq.n	8004fd6 <HAL_ADC_ConfigChannel+0x302>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	497b      	ldr	r1, [pc, #492]	@ (8005180 <HAL_ADC_ConfigChannel+0x4ac>)
 8004f92:	428b      	cmp	r3, r1
 8004f94:	d01d      	beq.n	8004fd2 <HAL_ADC_ConfigChannel+0x2fe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	497a      	ldr	r1, [pc, #488]	@ (8005184 <HAL_ADC_ConfigChannel+0x4b0>)
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	d016      	beq.n	8004fce <HAL_ADC_ConfigChannel+0x2fa>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4978      	ldr	r1, [pc, #480]	@ (8005188 <HAL_ADC_ConfigChannel+0x4b4>)
 8004fa6:	428b      	cmp	r3, r1
 8004fa8:	d00f      	beq.n	8004fca <HAL_ADC_ConfigChannel+0x2f6>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4977      	ldr	r1, [pc, #476]	@ (800518c <HAL_ADC_ConfigChannel+0x4b8>)
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	d008      	beq.n	8004fc6 <HAL_ADC_ConfigChannel+0x2f2>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4975      	ldr	r1, [pc, #468]	@ (8005190 <HAL_ADC_ConfigChannel+0x4bc>)
 8004fba:	428b      	cmp	r3, r1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x2ee>
 8004fbe:	4b75      	ldr	r3, [pc, #468]	@ (8005194 <HAL_ADC_ConfigChannel+0x4c0>)
 8004fc0:	e05a      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e058      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fc6:	4b74      	ldr	r3, [pc, #464]	@ (8005198 <HAL_ADC_ConfigChannel+0x4c4>)
 8004fc8:	e056      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fca:	4b74      	ldr	r3, [pc, #464]	@ (800519c <HAL_ADC_ConfigChannel+0x4c8>)
 8004fcc:	e054      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fce:	4b6e      	ldr	r3, [pc, #440]	@ (8005188 <HAL_ADC_ConfigChannel+0x4b4>)
 8004fd0:	e052      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8005184 <HAL_ADC_ConfigChannel+0x4b0>)
 8004fd4:	e050      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fd6:	4b72      	ldr	r3, [pc, #456]	@ (80051a0 <HAL_ADC_ConfigChannel+0x4cc>)
 8004fd8:	e04e      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fda:	4b72      	ldr	r3, [pc, #456]	@ (80051a4 <HAL_ADC_ConfigChannel+0x4d0>)
 8004fdc:	e04c      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fde:	4b72      	ldr	r3, [pc, #456]	@ (80051a8 <HAL_ADC_ConfigChannel+0x4d4>)
 8004fe0:	e04a      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fe2:	4b72      	ldr	r3, [pc, #456]	@ (80051ac <HAL_ADC_ConfigChannel+0x4d8>)
 8004fe4:	e048      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e046      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4970      	ldr	r1, [pc, #448]	@ (80051b0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	d140      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x3a2>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	495c      	ldr	r1, [pc, #368]	@ (800516c <HAL_ADC_ConfigChannel+0x498>)
 8004ffa:	428b      	cmp	r3, r1
 8004ffc:	d039      	beq.n	8005072 <HAL_ADC_ConfigChannel+0x39e>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	495b      	ldr	r1, [pc, #364]	@ (8005170 <HAL_ADC_ConfigChannel+0x49c>)
 8005004:	428b      	cmp	r3, r1
 8005006:	d032      	beq.n	800506e <HAL_ADC_ConfigChannel+0x39a>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4959      	ldr	r1, [pc, #356]	@ (8005174 <HAL_ADC_ConfigChannel+0x4a0>)
 800500e:	428b      	cmp	r3, r1
 8005010:	d02b      	beq.n	800506a <HAL_ADC_ConfigChannel+0x396>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4958      	ldr	r1, [pc, #352]	@ (8005178 <HAL_ADC_ConfigChannel+0x4a4>)
 8005018:	428b      	cmp	r3, r1
 800501a:	d024      	beq.n	8005066 <HAL_ADC_ConfigChannel+0x392>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4956      	ldr	r1, [pc, #344]	@ (800517c <HAL_ADC_ConfigChannel+0x4a8>)
 8005022:	428b      	cmp	r3, r1
 8005024:	d01d      	beq.n	8005062 <HAL_ADC_ConfigChannel+0x38e>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4955      	ldr	r1, [pc, #340]	@ (8005180 <HAL_ADC_ConfigChannel+0x4ac>)
 800502c:	428b      	cmp	r3, r1
 800502e:	d016      	beq.n	800505e <HAL_ADC_ConfigChannel+0x38a>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4953      	ldr	r1, [pc, #332]	@ (8005184 <HAL_ADC_ConfigChannel+0x4b0>)
 8005036:	428b      	cmp	r3, r1
 8005038:	d00f      	beq.n	800505a <HAL_ADC_ConfigChannel+0x386>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4952      	ldr	r1, [pc, #328]	@ (8005188 <HAL_ADC_ConfigChannel+0x4b4>)
 8005040:	428b      	cmp	r3, r1
 8005042:	d008      	beq.n	8005056 <HAL_ADC_ConfigChannel+0x382>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4951      	ldr	r1, [pc, #324]	@ (8005190 <HAL_ADC_ConfigChannel+0x4bc>)
 800504a:	428b      	cmp	r3, r1
 800504c:	d101      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x37e>
 800504e:	4b51      	ldr	r3, [pc, #324]	@ (8005194 <HAL_ADC_ConfigChannel+0x4c0>)
 8005050:	e012      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8005052:	2300      	movs	r3, #0
 8005054:	e010      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8005056:	4b51      	ldr	r3, [pc, #324]	@ (800519c <HAL_ADC_ConfigChannel+0x4c8>)
 8005058:	e00e      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 800505a:	4b4b      	ldr	r3, [pc, #300]	@ (8005188 <HAL_ADC_ConfigChannel+0x4b4>)
 800505c:	e00c      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 800505e:	4b49      	ldr	r3, [pc, #292]	@ (8005184 <HAL_ADC_ConfigChannel+0x4b0>)
 8005060:	e00a      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8005062:	4b4f      	ldr	r3, [pc, #316]	@ (80051a0 <HAL_ADC_ConfigChannel+0x4cc>)
 8005064:	e008      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8005066:	4b4f      	ldr	r3, [pc, #316]	@ (80051a4 <HAL_ADC_ConfigChannel+0x4d0>)
 8005068:	e006      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 800506a:	4b4f      	ldr	r3, [pc, #316]	@ (80051a8 <HAL_ADC_ConfigChannel+0x4d4>)
 800506c:	e004      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 800506e:	4b4f      	ldr	r3, [pc, #316]	@ (80051ac <HAL_ADC_ConfigChannel+0x4d8>)
 8005070:	e002      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_ADC_ConfigChannel+0x3a4>
 8005076:	2300      	movs	r3, #0
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7ff f856 	bl	800412c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f280 80fc 	bge.w	8005282 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a36      	ldr	r2, [pc, #216]	@ (8005168 <HAL_ADC_ConfigChannel+0x494>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_ADC_ConfigChannel+0x3ca>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a45      	ldr	r2, [pc, #276]	@ (80051b0 <HAL_ADC_ConfigChannel+0x4dc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x3ce>
 800509e:	4b45      	ldr	r3, [pc, #276]	@ (80051b4 <HAL_ADC_ConfigChannel+0x4e0>)
 80050a0:	e000      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x3d0>
 80050a2:	4b45      	ldr	r3, [pc, #276]	@ (80051b8 <HAL_ADC_ConfigChannel+0x4e4>)
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff f833 	bl	8004110 <LL_ADC_GetCommonPathInternalCh>
 80050aa:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <HAL_ADC_ConfigChannel+0x494>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_ADC_ConfigChannel+0x3ec>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a3d      	ldr	r2, [pc, #244]	@ (80051b0 <HAL_ADC_ConfigChannel+0x4dc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10e      	bne.n	80050de <HAL_ADC_ConfigChannel+0x40a>
 80050c0:	4829      	ldr	r0, [pc, #164]	@ (8005168 <HAL_ADC_ConfigChannel+0x494>)
 80050c2:	f7ff f9db 	bl	800447c <LL_ADC_IsEnabled>
 80050c6:	4604      	mov	r4, r0
 80050c8:	4839      	ldr	r0, [pc, #228]	@ (80051b0 <HAL_ADC_ConfigChannel+0x4dc>)
 80050ca:	f7ff f9d7 	bl	800447c <LL_ADC_IsEnabled>
 80050ce:	4603      	mov	r3, r0
 80050d0:	4323      	orrs	r3, r4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e008      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x41c>
 80050de:	4837      	ldr	r0, [pc, #220]	@ (80051bc <HAL_ADC_ConfigChannel+0x4e8>)
 80050e0:	f7ff f9cc 	bl	800447c <LL_ADC_IsEnabled>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80b3 	beq.w	800525c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a31      	ldr	r2, [pc, #196]	@ (80051c0 <HAL_ADC_ConfigChannel+0x4ec>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d165      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x4f8>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d160      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <HAL_ADC_ConfigChannel+0x4e8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	f040 80b6 	bne.w	8005282 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <HAL_ADC_ConfigChannel+0x494>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d004      	beq.n	800512a <HAL_ADC_ConfigChannel+0x456>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a22      	ldr	r2, [pc, #136]	@ (80051b0 <HAL_ADC_ConfigChannel+0x4dc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d101      	bne.n	800512e <HAL_ADC_ConfigChannel+0x45a>
 800512a:	4a22      	ldr	r2, [pc, #136]	@ (80051b4 <HAL_ADC_ConfigChannel+0x4e0>)
 800512c:	e000      	b.n	8005130 <HAL_ADC_ConfigChannel+0x45c>
 800512e:	4a22      	ldr	r2, [pc, #136]	@ (80051b8 <HAL_ADC_ConfigChannel+0x4e4>)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe ffd6 	bl	80040ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800513e:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <HAL_ADC_ConfigChannel+0x4f0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	099b      	lsrs	r3, r3, #6
 8005144:	4a20      	ldr	r2, [pc, #128]	@ (80051c8 <HAL_ADC_ConfigChannel+0x4f4>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	3301      	adds	r3, #1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005152:	e002      	b.n	800515a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3b01      	subs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f9      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005160:	e08f      	b.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
 8005162:	bf00      	nop
 8005164:	47ff0000 	.word	0x47ff0000
 8005168:	40022000 	.word	0x40022000
 800516c:	04300002 	.word	0x04300002
 8005170:	08600004 	.word	0x08600004
 8005174:	0c900008 	.word	0x0c900008
 8005178:	10c00010 	.word	0x10c00010
 800517c:	14f00020 	.word	0x14f00020
 8005180:	2a000400 	.word	0x2a000400
 8005184:	2e300800 	.word	0x2e300800
 8005188:	32601000 	.word	0x32601000
 800518c:	43210000 	.word	0x43210000
 8005190:	4b840000 	.word	0x4b840000
 8005194:	4fb80000 	.word	0x4fb80000
 8005198:	47520000 	.word	0x47520000
 800519c:	36902000 	.word	0x36902000
 80051a0:	25b00200 	.word	0x25b00200
 80051a4:	21800100 	.word	0x21800100
 80051a8:	1d500080 	.word	0x1d500080
 80051ac:	19200040 	.word	0x19200040
 80051b0:	40022100 	.word	0x40022100
 80051b4:	40022300 	.word	0x40022300
 80051b8:	58026300 	.word	0x58026300
 80051bc:	58026000 	.word	0x58026000
 80051c0:	cb840000 	.word	0xcb840000
 80051c4:	24000000 	.word	0x24000000
 80051c8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a31      	ldr	r2, [pc, #196]	@ (8005298 <HAL_ADC_ConfigChannel+0x5c4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d11e      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x540>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d119      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2d      	ldr	r2, [pc, #180]	@ (800529c <HAL_ADC_ConfigChannel+0x5c8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d14b      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a2c      	ldr	r2, [pc, #176]	@ (80052a0 <HAL_ADC_ConfigChannel+0x5cc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_ADC_ConfigChannel+0x52a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	@ (80052a4 <HAL_ADC_ConfigChannel+0x5d0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x52e>
 80051fe:	4a2a      	ldr	r2, [pc, #168]	@ (80052a8 <HAL_ADC_ConfigChannel+0x5d4>)
 8005200:	e000      	b.n	8005204 <HAL_ADC_ConfigChannel+0x530>
 8005202:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <HAL_ADC_ConfigChannel+0x5d8>)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7fe ff6c 	bl	80040ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005212:	e036      	b.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a25      	ldr	r2, [pc, #148]	@ (80052b0 <HAL_ADC_ConfigChannel+0x5dc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d131      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d12c      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1b      	ldr	r2, [pc, #108]	@ (800529c <HAL_ADC_ConfigChannel+0x5c8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d127      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1a      	ldr	r2, [pc, #104]	@ (80052a0 <HAL_ADC_ConfigChannel+0x5cc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_ADC_ConfigChannel+0x572>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a18      	ldr	r2, [pc, #96]	@ (80052a4 <HAL_ADC_ConfigChannel+0x5d0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_ADC_ConfigChannel+0x576>
 8005246:	4a18      	ldr	r2, [pc, #96]	@ (80052a8 <HAL_ADC_ConfigChannel+0x5d4>)
 8005248:	e000      	b.n	800524c <HAL_ADC_ConfigChannel+0x578>
 800524a:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <HAL_ADC_ConfigChannel+0x5d8>)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7fe ff48 	bl	80040ea <LL_ADC_SetCommonPathInternalCh>
 800525a:	e012      	b.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800526e:	e008      	b.n	8005282 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800528a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800528e:	4618      	mov	r0, r3
 8005290:	3734      	adds	r7, #52	@ 0x34
 8005292:	46bd      	mov	sp, r7
 8005294:	bd90      	pop	{r4, r7, pc}
 8005296:	bf00      	nop
 8005298:	c7520000 	.word	0xc7520000
 800529c:	58026000 	.word	0x58026000
 80052a0:	40022000 	.word	0x40022000
 80052a4:	40022100 	.word	0x40022100
 80052a8:	40022300 	.word	0x40022300
 80052ac:	58026300 	.word	0x58026300
 80052b0:	cfb80000 	.word	0xcfb80000

080052b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f924 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 80052d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f946 	bl	8004568 <LL_ADC_INJ_IsConversionOngoing>
 80052dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d103      	bne.n	80052ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8098 	beq.w	800541c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02a      	beq.n	8005350 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7d5b      	ldrb	r3, [r3, #21]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d126      	bne.n	8005350 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	7d1b      	ldrb	r3, [r3, #20]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d122      	bne.n	8005350 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800530a:	2301      	movs	r3, #1
 800530c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800530e:	e014      	b.n	800533a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4a45      	ldr	r2, [pc, #276]	@ (8005428 <ADC_ConversionStop+0x174>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d90d      	bls.n	8005334 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531c:	f043 0210 	orr.w	r2, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005328:	f043 0201 	orr.w	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e074      	b.n	800541e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3301      	adds	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d1e3      	bne.n	8005310 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2240      	movs	r2, #64	@ 0x40
 800534e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d014      	beq.n	8005380 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff f8dc 	bl	8004518 <LL_ADC_REG_IsConversionOngoing>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f899 	bl	80044a2 <LL_ADC_IsDisableOngoing>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff f8b8 	bl	80044f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d014      	beq.n	80053b0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff f8ec 	bl	8004568 <LL_ADC_INJ_IsConversionOngoing>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f881 	bl	80044a2 <LL_ADC_IsDisableOngoing>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d104      	bne.n	80053b0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff f8c8 	bl	8004540 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d005      	beq.n	80053c2 <ADC_ConversionStop+0x10e>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d105      	bne.n	80053c8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80053bc:	230c      	movs	r3, #12
 80053be:	617b      	str	r3, [r7, #20]
        break;
 80053c0:	e005      	b.n	80053ce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80053c2:	2308      	movs	r3, #8
 80053c4:	617b      	str	r3, [r7, #20]
        break;
 80053c6:	e002      	b.n	80053ce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80053c8:	2304      	movs	r3, #4
 80053ca:	617b      	str	r3, [r7, #20]
        break;
 80053cc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80053ce:	f7fe fe27 	bl	8004020 <HAL_GetTick>
 80053d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053d4:	e01b      	b.n	800540e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80053d6:	f7fe fe23 	bl	8004020 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d914      	bls.n	800540e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e007      	b.n	800541e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1dc      	bne.n	80053d6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	000cdbff 	.word	0x000cdbff

0800542c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff f81f 	bl	800447c <LL_ADC_IsEnabled>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d16e      	bne.n	8005522 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	4b38      	ldr	r3, [pc, #224]	@ (800552c <ADC_Enable+0x100>)
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	f043 0210 	orr.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e05a      	b.n	8005524 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe ffda 	bl	800442c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005478:	f7fe fdd2 	bl	8004020 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2b      	ldr	r2, [pc, #172]	@ (8005530 <ADC_Enable+0x104>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <ADC_Enable+0x66>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a29      	ldr	r2, [pc, #164]	@ (8005534 <ADC_Enable+0x108>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <ADC_Enable+0x6a>
 8005492:	4b29      	ldr	r3, [pc, #164]	@ (8005538 <ADC_Enable+0x10c>)
 8005494:	e000      	b.n	8005498 <ADC_Enable+0x6c>
 8005496:	4b29      	ldr	r3, [pc, #164]	@ (800553c <ADC_Enable+0x110>)
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe ff5d 	bl	8004358 <LL_ADC_GetMultimode>
 800549e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a23      	ldr	r2, [pc, #140]	@ (8005534 <ADC_Enable+0x108>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d002      	beq.n	80054b0 <ADC_Enable+0x84>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	e000      	b.n	80054b2 <ADC_Enable+0x86>
 80054b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005530 <ADC_Enable+0x104>)
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02c      	beq.n	8005514 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d130      	bne.n	8005522 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054c0:	e028      	b.n	8005514 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe ffd8 	bl	800447c <LL_ADC_IsEnabled>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe ffa8 	bl	800442c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054dc:	f7fe fda0 	bl	8004020 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d914      	bls.n	8005514 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d00d      	beq.n	8005514 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fc:	f043 0210 	orr.w	r2, r3, #16
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e007      	b.n	8005524 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d1cf      	bne.n	80054c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	8000003f 	.word	0x8000003f
 8005530:	40022000 	.word	0x40022000
 8005534:	40022100 	.word	0x40022100
 8005538:	40022300 	.word	0x40022300
 800553c:	58026300 	.word	0x58026300

08005540 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe ffa8 	bl	80044a2 <LL_ADC_IsDisableOngoing>
 8005552:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe ff8f 	bl	800447c <LL_ADC_IsEnabled>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d047      	beq.n	80055f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d144      	bne.n	80055f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030d 	and.w	r3, r3, #13
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10c      	bne.n	8005592 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe ff69 	bl	8004454 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2203      	movs	r2, #3
 8005588:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800558a:	f7fe fd49 	bl	8004020 <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005590:	e029      	b.n	80055e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f043 0210 	orr.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e023      	b.n	80055f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80055ae:	f7fe fd37 	bl	8004020 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d914      	bls.n	80055e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ce:	f043 0210 	orr.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	f043 0201 	orr.w	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e007      	b.n	80055f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1dc      	bne.n	80055ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a7a      	ldr	r2, [pc, #488]	@ (80057f8 <ADC_ConfigureBoostMode+0x1f8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <ADC_ConfigureBoostMode+0x1c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a79      	ldr	r2, [pc, #484]	@ (80057fc <ADC_ConfigureBoostMode+0x1fc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d109      	bne.n	8005630 <ADC_ConfigureBoostMode+0x30>
 800561c:	4b78      	ldr	r3, [pc, #480]	@ (8005800 <ADC_ConfigureBoostMode+0x200>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e008      	b.n	8005642 <ADC_ConfigureBoostMode+0x42>
 8005630:	4b74      	ldr	r3, [pc, #464]	@ (8005804 <ADC_ConfigureBoostMode+0x204>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01c      	beq.n	8005680 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005646:	f002 faf1 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 800564a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005654:	d010      	beq.n	8005678 <ADC_ConfigureBoostMode+0x78>
 8005656:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800565a:	d873      	bhi.n	8005744 <ADC_ConfigureBoostMode+0x144>
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005660:	d002      	beq.n	8005668 <ADC_ConfigureBoostMode+0x68>
 8005662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005666:	d16d      	bne.n	8005744 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	60fb      	str	r3, [r7, #12]
        break;
 8005676:	e068      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	60fb      	str	r3, [r7, #12]
        break;
 800567e:	e064      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005680:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	f003 fd36 	bl	80090f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800568c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005696:	d051      	beq.n	800573c <ADC_ConfigureBoostMode+0x13c>
 8005698:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800569c:	d854      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 800569e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80056a2:	d047      	beq.n	8005734 <ADC_ConfigureBoostMode+0x134>
 80056a4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80056a8:	d84e      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056aa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80056ae:	d03d      	beq.n	800572c <ADC_ConfigureBoostMode+0x12c>
 80056b0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80056b4:	d848      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056ba:	d033      	beq.n	8005724 <ADC_ConfigureBoostMode+0x124>
 80056bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056c0:	d842      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056c2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80056c6:	d029      	beq.n	800571c <ADC_ConfigureBoostMode+0x11c>
 80056c8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80056cc:	d83c      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056ce:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80056d2:	d01a      	beq.n	800570a <ADC_ConfigureBoostMode+0x10a>
 80056d4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80056d8:	d836      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056da:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80056de:	d014      	beq.n	800570a <ADC_ConfigureBoostMode+0x10a>
 80056e0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80056e4:	d830      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ea:	d00e      	beq.n	800570a <ADC_ConfigureBoostMode+0x10a>
 80056ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056f0:	d82a      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056f6:	d008      	beq.n	800570a <ADC_ConfigureBoostMode+0x10a>
 80056f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056fc:	d824      	bhi.n	8005748 <ADC_ConfigureBoostMode+0x148>
 80056fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005702:	d002      	beq.n	800570a <ADC_ConfigureBoostMode+0x10a>
 8005704:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005708:	d11e      	bne.n	8005748 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0c9b      	lsrs	r3, r3, #18
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	60fb      	str	r3, [r7, #12]
        break;
 800571a:	e016      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	60fb      	str	r3, [r7, #12]
        break;
 8005722:	e012      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	60fb      	str	r3, [r7, #12]
        break;
 800572a:	e00e      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	60fb      	str	r3, [r7, #12]
        break;
 8005732:	e00a      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
        break;
 800573a:	e006      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	60fb      	str	r3, [r7, #12]
        break;
 8005742:	e002      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005748:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800574a:	f7fe fc99 	bl	8004080 <HAL_GetREVID>
 800574e:	4603      	mov	r3, r0
 8005750:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005754:	4293      	cmp	r3, r2
 8005756:	d815      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a2b      	ldr	r2, [pc, #172]	@ (8005808 <ADC_ConfigureBoostMode+0x208>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d908      	bls.n	8005772 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800576e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005770:	e03e      	b.n	80057f0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005780:	609a      	str	r2, [r3, #8]
}
 8005782:	e035      	b.n	80057f0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <ADC_ConfigureBoostMode+0x20c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d808      	bhi.n	80057a4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80057a0:	609a      	str	r2, [r3, #8]
}
 80057a2:	e025      	b.n	80057f0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005810 <ADC_ConfigureBoostMode+0x210>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d80a      	bhi.n	80057c2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	e016      	b.n	80057f0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a13      	ldr	r2, [pc, #76]	@ (8005814 <ADC_ConfigureBoostMode+0x214>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d80a      	bhi.n	80057e0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	e007      	b.n	80057f0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40022000 	.word	0x40022000
 80057fc:	40022100 	.word	0x40022100
 8005800:	40022300 	.word	0x40022300
 8005804:	58026300 	.word	0x58026300
 8005808:	01312d00 	.word	0x01312d00
 800580c:	005f5e10 	.word	0x005f5e10
 8005810:	00bebc20 	.word	0x00bebc20
 8005814:	017d7840 	.word	0x017d7840

08005818 <LL_ADC_IsEnabled>:
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <LL_ADC_IsEnabled+0x18>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <LL_ADC_IsEnabled+0x1a>
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <LL_ADC_REG_IsConversionOngoing>:
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d101      	bne.n	8005856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b09f      	sub	sp, #124	@ 0x7c
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800587e:	2302      	movs	r3, #2
 8005880:	e0be      	b.n	8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800588e:	2300      	movs	r3, #0
 8005890:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a5c      	ldr	r2, [pc, #368]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d102      	bne.n	80058a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800589c:	4b5b      	ldr	r3, [pc, #364]	@ (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800589e:	60bb      	str	r3, [r7, #8]
 80058a0:	e001      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	f043 0220 	orr.w	r2, r3, #32
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e09d      	b.n	8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff ffb9 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 80058cc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff ffb3 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d17f      	bne.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80058de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d17c      	bne.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a47      	ldr	r2, [pc, #284]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a46      	ldr	r2, [pc, #280]	@ (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80058f8:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058fa:	e000      	b.n	80058fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80058fc:	4b45      	ldr	r3, [pc, #276]	@ (8005a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d039      	beq.n	800597c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	431a      	orrs	r2, r3
 8005916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005918:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a38      	ldr	r2, [pc, #224]	@ (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d10e      	bne.n	800594c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800592e:	4836      	ldr	r0, [pc, #216]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005930:	f7ff ff72 	bl	8005818 <LL_ADC_IsEnabled>
 8005934:	4604      	mov	r4, r0
 8005936:	4835      	ldr	r0, [pc, #212]	@ (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005938:	f7ff ff6e 	bl	8005818 <LL_ADC_IsEnabled>
 800593c:	4603      	mov	r3, r0
 800593e:	4323      	orrs	r3, r4
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e008      	b.n	800595e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800594c:	4832      	ldr	r0, [pc, #200]	@ (8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800594e:	f7ff ff63 	bl	8005818 <LL_ADC_IsEnabled>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d047      	beq.n	80059f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	4b2d      	ldr	r3, [pc, #180]	@ (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005968:	4013      	ands	r3, r2
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	6811      	ldr	r1, [r2, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	6892      	ldr	r2, [r2, #8]
 8005972:	430a      	orrs	r2, r1
 8005974:	431a      	orrs	r2, r3
 8005976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005978:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800597a:	e03a      	b.n	80059f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800597c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005986:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10e      	bne.n	80059ba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800599c:	481a      	ldr	r0, [pc, #104]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800599e:	f7ff ff3b 	bl	8005818 <LL_ADC_IsEnabled>
 80059a2:	4604      	mov	r4, r0
 80059a4:	4819      	ldr	r0, [pc, #100]	@ (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059a6:	f7ff ff37 	bl	8005818 <LL_ADC_IsEnabled>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4323      	orrs	r3, r4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf0c      	ite	eq
 80059b2:	2301      	moveq	r3, #1
 80059b4:	2300      	movne	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	e008      	b.n	80059cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80059ba:	4817      	ldr	r0, [pc, #92]	@ (8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80059bc:	f7ff ff2c 	bl	8005818 <LL_ADC_IsEnabled>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf0c      	ite	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	2300      	movne	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	4b11      	ldr	r3, [pc, #68]	@ (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059dc:	e009      	b.n	80059f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80059f0:	e000      	b.n	80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80059fc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	377c      	adds	r7, #124	@ 0x7c
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd90      	pop	{r4, r7, pc}
 8005a08:	40022000 	.word	0x40022000
 8005a0c:	40022100 	.word	0x40022100
 8005a10:	40022300 	.word	0x40022300
 8005a14:	58026300 	.word	0x58026300
 8005a18:	58026000 	.word	0x58026000
 8005a1c:	fffff0e0 	.word	0xfffff0e0

08005a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <__NVIC_SetPriorityGrouping+0x40>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <__NVIC_SetPriorityGrouping+0x44>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a4e:	4a04      	ldr	r2, [pc, #16]	@ (8005a60 <__NVIC_SetPriorityGrouping+0x40>)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	60d3      	str	r3, [r2, #12]
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	e000ed00 	.word	0xe000ed00
 8005a64:	05fa0000 	.word	0x05fa0000

08005a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a6c:	4b04      	ldr	r3, [pc, #16]	@ (8005a80 <__NVIC_GetPriorityGrouping+0x18>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 0307 	and.w	r3, r3, #7
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	db0b      	blt.n	8005aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	f003 021f 	and.w	r2, r3, #31
 8005a9c:	4907      	ldr	r1, [pc, #28]	@ (8005abc <__NVIC_EnableIRQ+0x38>)
 8005a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	e000e100 	.word	0xe000e100

08005ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db0a      	blt.n	8005aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	490c      	ldr	r1, [pc, #48]	@ (8005b0c <__NVIC_SetPriority+0x4c>)
 8005ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ade:	0112      	lsls	r2, r2, #4
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ae8:	e00a      	b.n	8005b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4908      	ldr	r1, [pc, #32]	@ (8005b10 <__NVIC_SetPriority+0x50>)
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3b04      	subs	r3, #4
 8005af8:	0112      	lsls	r2, r2, #4
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	440b      	add	r3, r1
 8005afe:	761a      	strb	r2, [r3, #24]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	e000e100 	.word	0xe000e100
 8005b10:	e000ed00 	.word	0xe000ed00

08005b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	@ 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f1c3 0307 	rsb	r3, r3, #7
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	bf28      	it	cs
 8005b32:	2304      	movcs	r3, #4
 8005b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d902      	bls.n	8005b44 <NVIC_EncodePriority+0x30>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3b03      	subs	r3, #3
 8005b42:	e000      	b.n	8005b46 <NVIC_EncodePriority+0x32>
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43da      	mvns	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	401a      	ands	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	43d9      	mvns	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	4313      	orrs	r3, r2
         );
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	@ 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b8c:	d301      	bcc.n	8005b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00f      	b.n	8005bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b92:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <SysTick_Config+0x40>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b9a:	210f      	movs	r1, #15
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	f7ff ff8e 	bl	8005ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <SysTick_Config+0x40>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005baa:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <SysTick_Config+0x40>)
 8005bac:	2207      	movs	r2, #7
 8005bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000e010 	.word	0xe000e010

08005bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff29 	bl	8005a20 <__NVIC_SetPriorityGrouping>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005be4:	f7ff ff40 	bl	8005a68 <__NVIC_GetPriorityGrouping>
 8005be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	6978      	ldr	r0, [r7, #20]
 8005bf0:	f7ff ff90 	bl	8005b14 <NVIC_EncodePriority>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff ff5f 	bl	8005ac0 <__NVIC_SetPriority>
}
 8005c02:	bf00      	nop
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	4603      	mov	r3, r0
 8005c12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff33 	bl	8005a84 <__NVIC_EnableIRQ>
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffa4 	bl	8005b7c <SysTick_Config>
 8005c34:	4603      	mov	r3, r0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	@ 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <HAL_GPIO_Init+0x234>)
 8005c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c52:	e194      	b.n	8005f7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2101      	movs	r1, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8186 	beq.w	8005f78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d005      	beq.n	8005c84 <HAL_GPIO_Init+0x44>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d130      	bne.n	8005ce6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	2203      	movs	r2, #3
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cba:	2201      	movs	r2, #1
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0201 	and.w	r2, r3, #1
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d017      	beq.n	8005d22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d123      	bne.n	8005d76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	08da      	lsrs	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3208      	adds	r2, #8
 8005d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	220f      	movs	r2, #15
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	08da      	lsrs	r2, r3, #3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3208      	adds	r2, #8
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	2203      	movs	r2, #3
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0203 	and.w	r2, r3, #3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80e0 	beq.w	8005f78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <HAL_GPIO_Init+0x238>)
 8005dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8005e78 <HAL_GPIO_Init+0x238>)
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e78 <HAL_GPIO_Init+0x238>)
 8005dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dd6:	4a29      	ldr	r2, [pc, #164]	@ (8005e7c <HAL_GPIO_Init+0x23c>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	3302      	adds	r3, #2
 8005dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	220f      	movs	r2, #15
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	@ (8005e80 <HAL_GPIO_Init+0x240>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d052      	beq.n	8005ea8 <HAL_GPIO_Init+0x268>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1f      	ldr	r2, [pc, #124]	@ (8005e84 <HAL_GPIO_Init+0x244>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d031      	beq.n	8005e6e <HAL_GPIO_Init+0x22e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e88 <HAL_GPIO_Init+0x248>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02b      	beq.n	8005e6a <HAL_GPIO_Init+0x22a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	@ (8005e8c <HAL_GPIO_Init+0x24c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d025      	beq.n	8005e66 <HAL_GPIO_Init+0x226>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <HAL_GPIO_Init+0x250>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <HAL_GPIO_Init+0x222>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <HAL_GPIO_Init+0x254>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d019      	beq.n	8005e5e <HAL_GPIO_Init+0x21e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e98 <HAL_GPIO_Init+0x258>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_GPIO_Init+0x21a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <HAL_GPIO_Init+0x25c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00d      	beq.n	8005e56 <HAL_GPIO_Init+0x216>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ea0 <HAL_GPIO_Init+0x260>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <HAL_GPIO_Init+0x212>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a17      	ldr	r2, [pc, #92]	@ (8005ea4 <HAL_GPIO_Init+0x264>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d101      	bne.n	8005e4e <HAL_GPIO_Init+0x20e>
 8005e4a:	2309      	movs	r3, #9
 8005e4c:	e02d      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e02b      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e52:	2308      	movs	r3, #8
 8005e54:	e029      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e56:	2307      	movs	r3, #7
 8005e58:	e027      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	e025      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e5e:	2305      	movs	r3, #5
 8005e60:	e023      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e62:	2304      	movs	r3, #4
 8005e64:	e021      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e01f      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e01d      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e01b      	b.n	8005eaa <HAL_GPIO_Init+0x26a>
 8005e72:	bf00      	nop
 8005e74:	58000080 	.word	0x58000080
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	58000400 	.word	0x58000400
 8005e80:	58020000 	.word	0x58020000
 8005e84:	58020400 	.word	0x58020400
 8005e88:	58020800 	.word	0x58020800
 8005e8c:	58020c00 	.word	0x58020c00
 8005e90:	58021000 	.word	0x58021000
 8005e94:	58021400 	.word	0x58021400
 8005e98:	58021800 	.word	0x58021800
 8005e9c:	58021c00 	.word	0x58021c00
 8005ea0:	58022000 	.word	0x58022000
 8005ea4:	58022400 	.word	0x58022400
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	f002 0203 	and.w	r2, r2, #3
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eba:	4938      	ldr	r1, [pc, #224]	@ (8005f9c <HAL_GPIO_Init+0x35c>)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f ae63 	bne.w	8005c54 <HAL_GPIO_Init+0x14>
  }
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	3724      	adds	r7, #36	@ 0x24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	58000400 	.word	0x58000400

08005fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e001      	b.n	8005fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fec:	e003      	b.n	8005ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fee:	887b      	ldrh	r3, [r7, #2]
 8005ff0:	041a      	lsls	r2, r3, #16
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	619a      	str	r2, [r3, #24]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	4603      	mov	r3, r0
 800600a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800600c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006010:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800601c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	4618      	mov	r0, r3
 800602a:	f7fa fffd 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006040:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <HAL_HSEM_FastTake+0x2c>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3320      	adds	r3, #32
 8006046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604a:	4a07      	ldr	r2, [pc, #28]	@ (8006068 <HAL_HSEM_FastTake+0x30>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	58026400 	.word	0x58026400
 8006068:	80000300 	.word	0x80000300

0800606c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006076:	4906      	ldr	r1, [pc, #24]	@ (8006090 <HAL_HSEM_Release+0x24>)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	58026400 	.word	0x58026400

08006094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e08b      	b.n	80061be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fd fcdc 	bl	8003a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	@ 0x24
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d107      	bne.n	800610e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	e006      	b.n	800611c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800611a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d108      	bne.n	8006136 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	e007      	b.n	8006146 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006144:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <HAL_I2C_Init+0x134>)
 8006152:	430b      	orrs	r3, r1
 8006154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69d9      	ldr	r1, [r3, #28]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	02008000 	.word	0x02008000

080061cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	461a      	mov	r2, r3
 80061d8:	460b      	mov	r3, r1
 80061da:	817b      	strh	r3, [r7, #10]
 80061dc:	4613      	mov	r3, r2
 80061de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 80fd 	bne.w	80063e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_I2C_Master_Transmit+0x30>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e0f6      	b.n	80063ea <HAL_I2C_Master_Transmit+0x21e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006204:	f7fd ff0c 	bl	8004020 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2319      	movs	r3, #25
 8006210:	2201      	movs	r2, #1
 8006212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fa0a 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0e1      	b.n	80063ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2221      	movs	r2, #33	@ 0x21
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2210      	movs	r2, #16
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	893a      	ldrh	r2, [r7, #8]
 8006246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	2bff      	cmp	r3, #255	@ 0xff
 8006256:	d906      	bls.n	8006266 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	22ff      	movs	r2, #255	@ 0xff
 800625c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800625e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e007      	b.n	8006276 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006270:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006274:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d024      	beq.n	80062c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	3301      	adds	r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	8979      	ldrh	r1, [r7, #10]
 80062ba:	4b4e      	ldr	r3, [pc, #312]	@ (80063f4 <HAL_I2C_Master_Transmit+0x228>)
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fc05 	bl	8006ad0 <I2C_TransferConfig>
 80062c6:	e066      	b.n	8006396 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	8979      	ldrh	r1, [r7, #10]
 80062d0:	4b48      	ldr	r3, [pc, #288]	@ (80063f4 <HAL_I2C_Master_Transmit+0x228>)
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fbfa 	bl	8006ad0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80062dc:	e05b      	b.n	8006396 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	6a39      	ldr	r1, [r7, #32]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f9fd 	bl	80066e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e07b      	b.n	80063ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	781a      	ldrb	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d034      	beq.n	8006396 <HAL_I2C_Master_Transmit+0x1ca>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d130      	bne.n	8006396 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2200      	movs	r2, #0
 800633c:	2180      	movs	r1, #128	@ 0x80
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f976 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e04d      	b.n	80063ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	2bff      	cmp	r3, #255	@ 0xff
 8006356:	d90e      	bls.n	8006376 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	22ff      	movs	r2, #255	@ 0xff
 800635c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006362:	b2da      	uxtb	r2, r3
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	2300      	movs	r3, #0
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fbae 	bl	8006ad0 <I2C_TransferConfig>
 8006374:	e00f      	b.n	8006396 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8979      	ldrh	r1, [r7, #10]
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fb9d 	bl	8006ad0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d19e      	bne.n	80062de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	6a39      	ldr	r1, [r7, #32]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f9e3 	bl	8006770 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e01a      	b.n	80063ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2220      	movs	r2, #32
 80063ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <HAL_I2C_Master_Transmit+0x22c>)
 80063c8:	400b      	ands	r3, r1
 80063ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	80002000 	.word	0x80002000
 80063f8:	fe00e800 	.word	0xfe00e800

080063fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	461a      	mov	r2, r3
 8006408:	460b      	mov	r3, r1
 800640a:	817b      	strh	r3, [r7, #10]
 800640c:	4613      	mov	r3, r2
 800640e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b20      	cmp	r3, #32
 800641a:	f040 80db 	bne.w	80065d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_I2C_Master_Receive+0x30>
 8006428:	2302      	movs	r3, #2
 800642a:	e0d4      	b.n	80065d6 <HAL_I2C_Master_Receive+0x1da>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006434:	f7fd fdf4 	bl	8004020 <HAL_GetTick>
 8006438:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2319      	movs	r3, #25
 8006440:	2201      	movs	r2, #1
 8006442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f8f2 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0bf      	b.n	80065d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2222      	movs	r2, #34	@ 0x22
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2210      	movs	r2, #16
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	893a      	ldrh	r2, [r7, #8]
 8006476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006482:	b29b      	uxth	r3, r3
 8006484:	2bff      	cmp	r3, #255	@ 0xff
 8006486:	d90e      	bls.n	80064a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	22ff      	movs	r2, #255	@ 0xff
 800648c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006492:	b2da      	uxtb	r2, r3
 8006494:	8979      	ldrh	r1, [r7, #10]
 8006496:	4b52      	ldr	r3, [pc, #328]	@ (80065e0 <HAL_I2C_Master_Receive+0x1e4>)
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fb16 	bl	8006ad0 <I2C_TransferConfig>
 80064a4:	e06d      	b.n	8006582 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	8979      	ldrh	r1, [r7, #10]
 80064b8:	4b49      	ldr	r3, [pc, #292]	@ (80065e0 <HAL_I2C_Master_Receive+0x1e4>)
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fb05 	bl	8006ad0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80064c6:	e05c      	b.n	8006582 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	6a39      	ldr	r1, [r7, #32]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f993 	bl	80067f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e07c      	b.n	80065d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d034      	beq.n	8006582 <HAL_I2C_Master_Receive+0x186>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d130      	bne.n	8006582 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	2200      	movs	r2, #0
 8006528:	2180      	movs	r1, #128	@ 0x80
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f880 	bl	8006630 <I2C_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e04d      	b.n	80065d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	2bff      	cmp	r3, #255	@ 0xff
 8006542:	d90e      	bls.n	8006562 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	22ff      	movs	r2, #255	@ 0xff
 8006548:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654e:	b2da      	uxtb	r2, r3
 8006550:	8979      	ldrh	r1, [r7, #10]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fab8 	bl	8006ad0 <I2C_TransferConfig>
 8006560:	e00f      	b.n	8006582 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	b2da      	uxtb	r2, r3
 8006572:	8979      	ldrh	r1, [r7, #10]
 8006574:	2300      	movs	r3, #0
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 faa7 	bl	8006ad0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d19d      	bne.n	80064c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	6a39      	ldr	r1, [r7, #32]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f8ed 	bl	8006770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e01a      	b.n	80065d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2220      	movs	r2, #32
 80065a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <HAL_I2C_Master_Receive+0x1e8>)
 80065b4:	400b      	ands	r3, r1
 80065b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	80002400 	.word	0x80002400
 80065e4:	fe00e800 	.word	0xfe00e800

080065e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d103      	bne.n	8006606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d007      	beq.n	8006624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	619a      	str	r2, [r3, #24]
  }
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006640:	e03b      	b.n	80066ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f962 	bl	8006910 <I2C_IsErrorOccurred>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e041      	b.n	80066da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d02d      	beq.n	80066ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665e:	f7fd fcdf 	bl	8004020 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <I2C_WaitOnFlagUntilTimeout+0x44>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d122      	bne.n	80066ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	429a      	cmp	r2, r3
 8006690:	d113      	bne.n	80066ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e00f      	b.n	80066da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d0b4      	beq.n	8006642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066ee:	e033      	b.n	8006758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f90b 	bl	8006910 <I2C_IsErrorOccurred>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e031      	b.n	8006768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d025      	beq.n	8006758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fd fc88 	bl	8004020 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11a      	bne.n	8006758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d013      	beq.n	8006758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e007      	b.n	8006768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d1c4      	bne.n	80066f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800677c:	e02f      	b.n	80067de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f8c4 	bl	8006910 <I2C_IsErrorOccurred>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e02d      	b.n	80067ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006792:	f7fd fc45 	bl	8004020 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11a      	bne.n	80067de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d013      	beq.n	80067de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e007      	b.n	80067ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d1c8      	bne.n	800677e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006808:	e071      	b.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f87e 	bl	8006910 <I2C_IsErrorOccurred>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b20      	cmp	r3, #32
 800682a:	d13b      	bne.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d138      	bne.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d105      	bne.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b10      	cmp	r3, #16
 8006858:	d121      	bne.n	800689e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2210      	movs	r2, #16
 8006860:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2204      	movs	r2, #4
 8006866:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2220      	movs	r2, #32
 800686e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b24      	ldr	r3, [pc, #144]	@ (800690c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800687c:	400b      	ands	r3, r1
 800687e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
 800689c:	e002      	b.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80068a4:	f7fd fbbc 	bl	8004020 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d302      	bcc.n	80068ba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d119      	bne.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d116      	bne.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d00f      	beq.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d2:	f043 0220 	orr.w	r2, r3, #32
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d002      	beq.n	8006902 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d083      	beq.n	800680a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	fe00e800 	.word	0xfe00e800

08006910 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	@ 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d068      	beq.n	8006a0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2210      	movs	r2, #16
 8006942:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006944:	e049      	b.n	80069da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d045      	beq.n	80069da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800694e:	f7fd fb67 	bl	8004020 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <I2C_IsErrorOccurred+0x54>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d13a      	bne.n	80069da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006976:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006986:	d121      	bne.n	80069cc <I2C_IsErrorOccurred+0xbc>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800698e:	d01d      	beq.n	80069cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006990:	7cfb      	ldrb	r3, [r7, #19]
 8006992:	2b20      	cmp	r3, #32
 8006994:	d01a      	beq.n	80069cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069a6:	f7fd fb3b 	bl	8004020 <HAL_GetTick>
 80069aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069ac:	e00e      	b.n	80069cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069ae:	f7fd fb37 	bl	8004020 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b19      	cmp	r3, #25
 80069ba:	d907      	bls.n	80069cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	f043 0320 	orr.w	r3, r3, #32
 80069c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069ca:	e006      	b.n	80069da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d1e9      	bne.n	80069ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d003      	beq.n	80069f0 <I2C_IsErrorOccurred+0xe0>
 80069e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0aa      	beq.n	8006946 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2220      	movs	r2, #32
 80069fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f043 0304 	orr.w	r3, r3, #4
 8006a06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f043 0308 	orr.w	r3, r3, #8
 8006a48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff fdaf 	bl	80065e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <I2C_IsErrorOccurred+0x1bc>)
 8006a96:	400b      	ands	r3, r1
 8006a98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3728      	adds	r7, #40	@ 0x28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	fe00e800 	.word	0xfe00e800

08006ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	607b      	str	r3, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	817b      	strh	r3, [r7, #10]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ae8:	7a7b      	ldrb	r3, [r7, #9]
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006afe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	0d5b      	lsrs	r3, r3, #21
 8006b0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b0e:	4b08      	ldr	r3, [pc, #32]	@ (8006b30 <I2C_TransferConfig+0x60>)
 8006b10:	430b      	orrs	r3, r1
 8006b12:	43db      	mvns	r3, r3
 8006b14:	ea02 0103 	and.w	r1, r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	03ff63ff 	.word	0x03ff63ff

08006b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d138      	bne.n	8006bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e032      	b.n	8006bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2224      	movs	r2, #36	@ 0x24
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d139      	bne.n	8006c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e033      	b.n	8006c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2224      	movs	r2, #36	@ 0x24
 8006bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0201 	bic.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006c6c:	4b29      	ldr	r3, [pc, #164]	@ (8006d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	2b06      	cmp	r3, #6
 8006c76:	d00a      	beq.n	8006c8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c78:	4b26      	ldr	r3, [pc, #152]	@ (8006d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d001      	beq.n	8006c8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e040      	b.n	8006d0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e03e      	b.n	8006d0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c8e:	4b21      	ldr	r3, [pc, #132]	@ (8006d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006c96:	491f      	ldr	r1, [pc, #124]	@ (8006d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c9e:	f7fd f9bf 	bl	8004020 <HAL_GetTick>
 8006ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ca4:	e009      	b.n	8006cba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ca6:	f7fd f9bb 	bl	8004020 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cb4:	d901      	bls.n	8006cba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e028      	b.n	8006d0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cba:	4b16      	ldr	r3, [pc, #88]	@ (8006d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cc6:	d1ee      	bne.n	8006ca6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b1e      	cmp	r3, #30
 8006ccc:	d008      	beq.n	8006ce0 <HAL_PWREx_ConfigSupply+0x7c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cd2:	d005      	beq.n	8006ce0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b1d      	cmp	r3, #29
 8006cd8:	d002      	beq.n	8006ce0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b2d      	cmp	r3, #45	@ 0x2d
 8006cde:	d114      	bne.n	8006d0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006ce0:	f7fd f99e 	bl	8004020 <HAL_GetTick>
 8006ce4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ce6:	e009      	b.n	8006cfc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ce8:	f7fd f99a 	bl	8004020 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cf6:	d901      	bls.n	8006cfc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e007      	b.n	8006d0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006cfc:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d08:	d1ee      	bne.n	8006ce8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	58024800 	.word	0x58024800

08006d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	@ 0x30
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f000 bc48 	b.w	80075bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8088 	beq.w	8006e4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d3a:	4b99      	ldr	r3, [pc, #612]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d44:	4b96      	ldr	r3, [pc, #600]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d007      	beq.n	8006d60 <HAL_RCC_OscConfig+0x48>
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d52:	2b18      	cmp	r3, #24
 8006d54:	d111      	bne.n	8006d7a <HAL_RCC_OscConfig+0x62>
 8006d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d10c      	bne.n	8006d7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d60:	4b8f      	ldr	r3, [pc, #572]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d06d      	beq.n	8006e48 <HAL_RCC_OscConfig+0x130>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d169      	bne.n	8006e48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f000 bc21 	b.w	80075bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d82:	d106      	bne.n	8006d92 <HAL_RCC_OscConfig+0x7a>
 8006d84:	4b86      	ldr	r3, [pc, #536]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a85      	ldr	r2, [pc, #532]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e02e      	b.n	8006df0 <HAL_RCC_OscConfig+0xd8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x9c>
 8006d9a:	4b81      	ldr	r3, [pc, #516]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a80      	ldr	r2, [pc, #512]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b7e      	ldr	r3, [pc, #504]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a7d      	ldr	r2, [pc, #500]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e01d      	b.n	8006df0 <HAL_RCC_OscConfig+0xd8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCC_OscConfig+0xc0>
 8006dbe:	4b78      	ldr	r3, [pc, #480]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a77      	ldr	r2, [pc, #476]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	4b75      	ldr	r3, [pc, #468]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a74      	ldr	r2, [pc, #464]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	e00b      	b.n	8006df0 <HAL_RCC_OscConfig+0xd8>
 8006dd8:	4b71      	ldr	r3, [pc, #452]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a70      	ldr	r2, [pc, #448]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	4b6e      	ldr	r3, [pc, #440]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a6d      	ldr	r2, [pc, #436]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d013      	beq.n	8006e20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df8:	f7fd f912 	bl	8004020 <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e00:	f7fd f90e 	bl	8004020 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b64      	cmp	r3, #100	@ 0x64
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e3d4      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e12:	4b63      	ldr	r3, [pc, #396]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0xe8>
 8006e1e:	e014      	b.n	8006e4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fd f8fe 	bl	8004020 <HAL_GetTick>
 8006e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fd f8fa 	bl	8004020 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	@ 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e3c0      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e3a:	4b59      	ldr	r3, [pc, #356]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f0      	bne.n	8006e28 <HAL_RCC_OscConfig+0x110>
 8006e46:	e000      	b.n	8006e4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80ca 	beq.w	8006fec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e58:	4b51      	ldr	r3, [pc, #324]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e62:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <HAL_RCC_OscConfig+0x166>
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	2b18      	cmp	r3, #24
 8006e72:	d156      	bne.n	8006f22 <HAL_RCC_OscConfig+0x20a>
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d151      	bne.n	8006f22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e7e:	4b48      	ldr	r3, [pc, #288]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_RCC_OscConfig+0x17e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e392      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e96:	4b42      	ldr	r3, [pc, #264]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 0219 	bic.w	r2, r3, #25
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	493f      	ldr	r1, [pc, #252]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fd f8ba 	bl	8004020 <HAL_GetTick>
 8006eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb0:	f7fd f8b6 	bl	8004020 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e37c      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ec2:	4b37      	ldr	r3, [pc, #220]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ece:	f7fd f8d7 	bl	8004080 <HAL_GetREVID>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d817      	bhi.n	8006f0c <HAL_RCC_OscConfig+0x1f4>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b40      	cmp	r3, #64	@ 0x40
 8006ee2:	d108      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
 8006ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006eec:	4a2c      	ldr	r2, [pc, #176]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef4:	e07a      	b.n	8006fec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	4926      	ldr	r1, [pc, #152]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f0a:	e06f      	b.n	8006fec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0c:	4b24      	ldr	r3, [pc, #144]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	4921      	ldr	r1, [pc, #132]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f20:	e064      	b.n	8006fec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d047      	beq.n	8006fba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 0219 	bic.w	r2, r3, #25
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	491a      	ldr	r1, [pc, #104]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fd f870 	bl	8004020 <HAL_GetTick>
 8006f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f44:	f7fd f86c 	bl	8004020 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e332      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f56:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f62:	f7fd f88d 	bl	8004080 <HAL_GetREVID>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d819      	bhi.n	8006fa4 <HAL_RCC_OscConfig+0x28c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b40      	cmp	r3, #64	@ 0x40
 8006f76:	d108      	bne.n	8006f8a <HAL_RCC_OscConfig+0x272>
 8006f78:	4b09      	ldr	r3, [pc, #36]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f80:	4a07      	ldr	r2, [pc, #28]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f86:	6053      	str	r3, [r2, #4]
 8006f88:	e030      	b.n	8006fec <HAL_RCC_OscConfig+0x2d4>
 8006f8a:	4b05      	ldr	r3, [pc, #20]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	031b      	lsls	r3, r3, #12
 8006f98:	4901      	ldr	r1, [pc, #4]	@ (8006fa0 <HAL_RCC_OscConfig+0x288>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	604b      	str	r3, [r1, #4]
 8006f9e:	e025      	b.n	8006fec <HAL_RCC_OscConfig+0x2d4>
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	4b9a      	ldr	r3, [pc, #616]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	4997      	ldr	r1, [pc, #604]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	604b      	str	r3, [r1, #4]
 8006fb8:	e018      	b.n	8006fec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fba:	4b95      	ldr	r3, [pc, #596]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a94      	ldr	r2, [pc, #592]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc6:	f7fd f82b 	bl	8004020 <HAL_GetTick>
 8006fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fce:	f7fd f827 	bl	8004020 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e2ed      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80a9 	beq.w	800714c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffa:	4b85      	ldr	r3, [pc, #532]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007002:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007004:	4b82      	ldr	r3, [pc, #520]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d007      	beq.n	8007020 <HAL_RCC_OscConfig+0x308>
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b18      	cmp	r3, #24
 8007014:	d13a      	bne.n	800708c <HAL_RCC_OscConfig+0x374>
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d135      	bne.n	800708c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007020:	4b7b      	ldr	r3, [pc, #492]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_OscConfig+0x320>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	2b80      	cmp	r3, #128	@ 0x80
 8007032:	d001      	beq.n	8007038 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e2c1      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007038:	f7fd f822 	bl	8004080 <HAL_GetREVID>
 800703c:	4603      	mov	r3, r0
 800703e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007042:	4293      	cmp	r3, r2
 8007044:	d817      	bhi.n	8007076 <HAL_RCC_OscConfig+0x35e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	2b20      	cmp	r3, #32
 800704c:	d108      	bne.n	8007060 <HAL_RCC_OscConfig+0x348>
 800704e:	4b70      	ldr	r3, [pc, #448]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007056:	4a6e      	ldr	r2, [pc, #440]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800705c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800705e:	e075      	b.n	800714c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007060:	4b6b      	ldr	r3, [pc, #428]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	069b      	lsls	r3, r3, #26
 800706e:	4968      	ldr	r1, [pc, #416]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007074:	e06a      	b.n	800714c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007076:	4b66      	ldr	r3, [pc, #408]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	061b      	lsls	r3, r3, #24
 8007084:	4962      	ldr	r1, [pc, #392]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800708a:	e05f      	b.n	800714c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d042      	beq.n	800711a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007094:	4b5e      	ldr	r3, [pc, #376]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a5d      	ldr	r2, [pc, #372]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 800709a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fc ffbe 	bl	8004020 <HAL_GetTick>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070a8:	f7fc ffba 	bl	8004020 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e280      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070ba:	4b55      	ldr	r3, [pc, #340]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070c6:	f7fc ffdb 	bl	8004080 <HAL_GetREVID>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d817      	bhi.n	8007104 <HAL_RCC_OscConfig+0x3ec>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d108      	bne.n	80070ee <HAL_RCC_OscConfig+0x3d6>
 80070dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80070e4:	4a4a      	ldr	r2, [pc, #296]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80070e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070ea:	6053      	str	r3, [r2, #4]
 80070ec:	e02e      	b.n	800714c <HAL_RCC_OscConfig+0x434>
 80070ee:	4b48      	ldr	r3, [pc, #288]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	069b      	lsls	r3, r3, #26
 80070fc:	4944      	ldr	r1, [pc, #272]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	604b      	str	r3, [r1, #4]
 8007102:	e023      	b.n	800714c <HAL_RCC_OscConfig+0x434>
 8007104:	4b42      	ldr	r3, [pc, #264]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	061b      	lsls	r3, r3, #24
 8007112:	493f      	ldr	r1, [pc, #252]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007114:	4313      	orrs	r3, r2
 8007116:	60cb      	str	r3, [r1, #12]
 8007118:	e018      	b.n	800714c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800711a:	4b3d      	ldr	r3, [pc, #244]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a3c      	ldr	r2, [pc, #240]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007126:	f7fc ff7b 	bl	8004020 <HAL_GetTick>
 800712a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800712e:	f7fc ff77 	bl	8004020 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e23d      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007140:	4b33      	ldr	r3, [pc, #204]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f0      	bne.n	800712e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d036      	beq.n	80071c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d019      	beq.n	8007194 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007160:	4b2b      	ldr	r3, [pc, #172]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007164:	4a2a      	ldr	r2, [pc, #168]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007166:	f043 0301 	orr.w	r3, r3, #1
 800716a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716c:	f7fc ff58 	bl	8004020 <HAL_GetTick>
 8007170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007174:	f7fc ff54 	bl	8004020 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e21a      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007186:	4b22      	ldr	r3, [pc, #136]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0f0      	beq.n	8007174 <HAL_RCC_OscConfig+0x45c>
 8007192:	e018      	b.n	80071c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007194:	4b1e      	ldr	r3, [pc, #120]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007198:	4a1d      	ldr	r2, [pc, #116]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a0:	f7fc ff3e 	bl	8004020 <HAL_GetTick>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071a8:	f7fc ff3a 	bl	8004020 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e200      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071ba:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d039      	beq.n	8007246 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d01c      	beq.n	8007214 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a0c      	ldr	r2, [pc, #48]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 80071e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071e6:	f7fc ff1b 	bl	8004020 <HAL_GetTick>
 80071ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ee:	f7fc ff17 	bl	8004020 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e1dd      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <HAL_RCC_OscConfig+0x4f8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f0      	beq.n	80071ee <HAL_RCC_OscConfig+0x4d6>
 800720c:	e01b      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007214:	4b9b      	ldr	r3, [pc, #620]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a9a      	ldr	r2, [pc, #616]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800721a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800721e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007220:	f7fc fefe 	bl	8004020 <HAL_GetTick>
 8007224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007228:	f7fc fefa 	bl	8004020 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e1c0      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800723a:	4b92      	ldr	r3, [pc, #584]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8081 	beq.w	8007356 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007254:	4b8c      	ldr	r3, [pc, #560]	@ (8007488 <HAL_RCC_OscConfig+0x770>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a8b      	ldr	r2, [pc, #556]	@ (8007488 <HAL_RCC_OscConfig+0x770>)
 800725a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007260:	f7fc fede 	bl	8004020 <HAL_GetTick>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007268:	f7fc feda 	bl	8004020 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	@ 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e1a0      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800727a:	4b83      	ldr	r3, [pc, #524]	@ (8007488 <HAL_RCC_OscConfig+0x770>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d106      	bne.n	800729c <HAL_RCC_OscConfig+0x584>
 800728e:	4b7d      	ldr	r3, [pc, #500]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	4a7c      	ldr	r2, [pc, #496]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	6713      	str	r3, [r2, #112]	@ 0x70
 800729a:	e02d      	b.n	80072f8 <HAL_RCC_OscConfig+0x5e0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10c      	bne.n	80072be <HAL_RCC_OscConfig+0x5a6>
 80072a4:	4b77      	ldr	r3, [pc, #476]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a8:	4a76      	ldr	r2, [pc, #472]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072aa:	f023 0301 	bic.w	r3, r3, #1
 80072ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b0:	4b74      	ldr	r3, [pc, #464]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b4:	4a73      	ldr	r2, [pc, #460]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072b6:	f023 0304 	bic.w	r3, r3, #4
 80072ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80072bc:	e01c      	b.n	80072f8 <HAL_RCC_OscConfig+0x5e0>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0x5c8>
 80072c6:	4b6f      	ldr	r3, [pc, #444]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ca:	4a6e      	ldr	r2, [pc, #440]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072cc:	f043 0304 	orr.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d2:	4b6c      	ldr	r3, [pc, #432]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	4a6b      	ldr	r2, [pc, #428]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072de:	e00b      	b.n	80072f8 <HAL_RCC_OscConfig+0x5e0>
 80072e0:	4b68      	ldr	r3, [pc, #416]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	4a67      	ldr	r2, [pc, #412]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ec:	4b65      	ldr	r3, [pc, #404]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	4a64      	ldr	r2, [pc, #400]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80072f2:	f023 0304 	bic.w	r3, r3, #4
 80072f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007300:	f7fc fe8e 	bl	8004020 <HAL_GetTick>
 8007304:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007306:	e00a      	b.n	800731e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007308:	f7fc fe8a 	bl	8004020 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e14e      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800731e:	4b59      	ldr	r3, [pc, #356]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ee      	beq.n	8007308 <HAL_RCC_OscConfig+0x5f0>
 800732a:	e014      	b.n	8007356 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fc fe78 	bl	8004020 <HAL_GetTick>
 8007330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fc fe74 	bl	8004020 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e138      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800734a:	4b4e      	ldr	r3, [pc, #312]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ee      	bne.n	8007334 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 812d 	beq.w	80075ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007360:	4b48      	ldr	r3, [pc, #288]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007368:	2b18      	cmp	r3, #24
 800736a:	f000 80bd 	beq.w	80074e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007372:	2b02      	cmp	r3, #2
 8007374:	f040 809e 	bne.w	80074b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007378:	4b42      	ldr	r3, [pc, #264]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a41      	ldr	r2, [pc, #260]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800737e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fc fe4c 	bl	8004020 <HAL_GetTick>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800738c:	f7fc fe48 	bl	8004020 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e10e      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800739e:	4b39      	ldr	r3, [pc, #228]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073aa:	4b36      	ldr	r3, [pc, #216]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80073ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073ae:	4b37      	ldr	r3, [pc, #220]	@ (800748c <HAL_RCC_OscConfig+0x774>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073ba:	0112      	lsls	r2, r2, #4
 80073bc:	430a      	orrs	r2, r1
 80073be:	4931      	ldr	r1, [pc, #196]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c8:	3b01      	subs	r3, #1
 80073ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d2:	3b01      	subs	r3, #1
 80073d4:	025b      	lsls	r3, r3, #9
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	3b01      	subs	r3, #1
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ec:	3b01      	subs	r3, #1
 80073ee:	061b      	lsls	r3, r3, #24
 80073f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073f4:	4923      	ldr	r1, [pc, #140]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073fa:	4b22      	ldr	r3, [pc, #136]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	4a21      	ldr	r2, [pc, #132]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007406:	4b1f      	ldr	r3, [pc, #124]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800740a:	4b21      	ldr	r3, [pc, #132]	@ (8007490 <HAL_RCC_OscConfig+0x778>)
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007412:	00d2      	lsls	r2, r2, #3
 8007414:	491b      	ldr	r1, [pc, #108]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800741a:	4b1a      	ldr	r3, [pc, #104]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	f023 020c 	bic.w	r2, r3, #12
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007426:	4917      	ldr	r1, [pc, #92]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800742c:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	f023 0202 	bic.w	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007438:	4912      	ldr	r1, [pc, #72]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800743e:	4b11      	ldr	r3, [pc, #68]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	4a10      	ldr	r2, [pc, #64]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744a:	4b0e      	ldr	r3, [pc, #56]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744e:	4a0d      	ldr	r2, [pc, #52]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007456:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a0a      	ldr	r2, [pc, #40]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 800745c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007462:	4b08      	ldr	r3, [pc, #32]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	4a07      	ldr	r2, [pc, #28]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007468:	f043 0301 	orr.w	r3, r3, #1
 800746c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800746e:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a04      	ldr	r2, [pc, #16]	@ (8007484 <HAL_RCC_OscConfig+0x76c>)
 8007474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747a:	f7fc fdd1 	bl	8004020 <HAL_GetTick>
 800747e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007480:	e011      	b.n	80074a6 <HAL_RCC_OscConfig+0x78e>
 8007482:	bf00      	nop
 8007484:	58024400 	.word	0x58024400
 8007488:	58024800 	.word	0x58024800
 800748c:	fffffc0c 	.word	0xfffffc0c
 8007490:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007494:	f7fc fdc4 	bl	8004020 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e08a      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074a6:	4b47      	ldr	r3, [pc, #284]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0x77c>
 80074b2:	e082      	b.n	80075ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b4:	4b43      	ldr	r3, [pc, #268]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a42      	ldr	r2, [pc, #264]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80074ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c0:	f7fc fdae 	bl	8004020 <HAL_GetTick>
 80074c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c8:	f7fc fdaa 	bl	8004020 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e070      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074da:	4b3a      	ldr	r3, [pc, #232]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <HAL_RCC_OscConfig+0x7b0>
 80074e6:	e068      	b.n	80075ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074e8:	4b36      	ldr	r3, [pc, #216]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074ee:	4b35      	ldr	r3, [pc, #212]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d031      	beq.n	8007560 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f003 0203 	and.w	r2, r3, #3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d12a      	bne.n	8007560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	091b      	lsrs	r3, r3, #4
 800750e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007516:	429a      	cmp	r2, r3
 8007518:	d122      	bne.n	8007560 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007524:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007526:	429a      	cmp	r2, r3
 8007528:	d11a      	bne.n	8007560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	0a5b      	lsrs	r3, r3, #9
 800752e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007536:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007538:	429a      	cmp	r2, r3
 800753a:	d111      	bne.n	8007560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d108      	bne.n	8007560 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	0e1b      	lsrs	r3, r3, #24
 8007552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800755c:	429a      	cmp	r2, r3
 800755e:	d001      	beq.n	8007564 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e02b      	b.n	80075bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007564:	4b17      	ldr	r3, [pc, #92]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 8007566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800756e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	d01f      	beq.n	80075ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800757a:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 800757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757e:	4a11      	ldr	r2, [pc, #68]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007586:	f7fc fd4b 	bl	8004020 <HAL_GetTick>
 800758a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800758c:	bf00      	nop
 800758e:	f7fc fd47 	bl	8004020 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	4293      	cmp	r3, r2
 8007598:	d0f9      	beq.n	800758e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800759a:	4b0a      	ldr	r3, [pc, #40]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 800759c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800759e:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <HAL_RCC_OscConfig+0x8b0>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075a6:	00d2      	lsls	r2, r2, #3
 80075a8:	4906      	ldr	r1, [pc, #24]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075ae:	4b05      	ldr	r3, [pc, #20]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	4a04      	ldr	r2, [pc, #16]	@ (80075c4 <HAL_RCC_OscConfig+0x8ac>)
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3730      	adds	r7, #48	@ 0x30
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	58024400 	.word	0x58024400
 80075c8:	ffff0007 	.word	0xffff0007

080075cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e19c      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075e0:	4b8a      	ldr	r3, [pc, #552]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d910      	bls.n	8007610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ee:	4b87      	ldr	r3, [pc, #540]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 020f 	bic.w	r2, r3, #15
 80075f6:	4985      	ldr	r1, [pc, #532]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fe:	4b83      	ldr	r3, [pc, #524]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e184      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	4b7b      	ldr	r3, [pc, #492]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007628:	429a      	cmp	r2, r3
 800762a:	d908      	bls.n	800763e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800762c:	4b78      	ldr	r3, [pc, #480]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4975      	ldr	r1, [pc, #468]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800763a:	4313      	orrs	r3, r2
 800763c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d010      	beq.n	800766c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	4b70      	ldr	r3, [pc, #448]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007656:	429a      	cmp	r2, r3
 8007658:	d908      	bls.n	800766c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800765a:	4b6d      	ldr	r3, [pc, #436]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	496a      	ldr	r1, [pc, #424]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007668:	4313      	orrs	r3, r2
 800766a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d010      	beq.n	800769a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	4b64      	ldr	r3, [pc, #400]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007684:	429a      	cmp	r2, r3
 8007686:	d908      	bls.n	800769a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007688:	4b61      	ldr	r3, [pc, #388]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	495e      	ldr	r1, [pc, #376]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007696:	4313      	orrs	r3, r2
 8007698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	4b59      	ldr	r3, [pc, #356]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d908      	bls.n	80076c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076b6:	4b56      	ldr	r3, [pc, #344]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4953      	ldr	r1, [pc, #332]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d010      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d908      	bls.n	80076f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e4:	4b4a      	ldr	r3, [pc, #296]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f023 020f 	bic.w	r2, r3, #15
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4947      	ldr	r1, [pc, #284]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d055      	beq.n	80077ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007702:	4b43      	ldr	r3, [pc, #268]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	4940      	ldr	r1, [pc, #256]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007710:	4313      	orrs	r3, r2
 8007712:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d107      	bne.n	800772c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800771c:	4b3c      	ldr	r3, [pc, #240]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d121      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0f6      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b03      	cmp	r3, #3
 8007732:	d107      	bne.n	8007744 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007734:	4b36      	ldr	r3, [pc, #216]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d115      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0ea      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d107      	bne.n	800775c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800774c:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0de      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800775c:	4b2c      	ldr	r3, [pc, #176]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0d6      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800776c:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f023 0207 	bic.w	r2, r3, #7
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	4925      	ldr	r1, [pc, #148]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800777a:	4313      	orrs	r3, r2
 800777c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777e:	f7fc fc4f 	bl	8004020 <HAL_GetTick>
 8007782:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007784:	e00a      	b.n	800779c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007786:	f7fc fc4b 	bl	8004020 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e0be      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779c:	4b1c      	ldr	r3, [pc, #112]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1eb      	bne.n	8007786 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d208      	bcs.n	80077dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ca:	4b11      	ldr	r3, [pc, #68]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f023 020f 	bic.w	r2, r3, #15
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	490e      	ldr	r1, [pc, #56]	@ (8007810 <HAL_RCC_ClockConfig+0x244>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077dc:	4b0b      	ldr	r3, [pc, #44]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d214      	bcs.n	8007814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b08      	ldr	r3, [pc, #32]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 020f 	bic.w	r2, r3, #15
 80077f2:	4906      	ldr	r1, [pc, #24]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b04      	ldr	r3, [pc, #16]	@ (800780c <HAL_RCC_ClockConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d005      	beq.n	8007814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e086      	b.n	800791a <HAL_RCC_ClockConfig+0x34e>
 800780c:	52002000 	.word	0x52002000
 8007810:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d010      	beq.n	8007842 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	4b3f      	ldr	r3, [pc, #252]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800782c:	429a      	cmp	r2, r3
 800782e:	d208      	bcs.n	8007842 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007830:	4b3c      	ldr	r3, [pc, #240]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	4939      	ldr	r1, [pc, #228]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800783e:	4313      	orrs	r3, r2
 8007840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695a      	ldr	r2, [r3, #20]
 8007852:	4b34      	ldr	r3, [pc, #208]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800785a:	429a      	cmp	r2, r3
 800785c:	d208      	bcs.n	8007870 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800785e:	4b31      	ldr	r3, [pc, #196]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	492e      	ldr	r1, [pc, #184]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800786c:	4313      	orrs	r3, r2
 800786e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007888:	429a      	cmp	r2, r3
 800788a:	d208      	bcs.n	800789e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800788c:	4b25      	ldr	r3, [pc, #148]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	4922      	ldr	r1, [pc, #136]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 800789a:	4313      	orrs	r3, r2
 800789c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d010      	beq.n	80078cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d208      	bcs.n	80078cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	4917      	ldr	r1, [pc, #92]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078cc:	f000 f834 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 80078d0:	4602      	mov	r2, r0
 80078d2:	4b14      	ldr	r3, [pc, #80]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	4912      	ldr	r1, [pc, #72]	@ (8007928 <HAL_RCC_ClockConfig+0x35c>)
 80078de:	5ccb      	ldrb	r3, [r1, r3]
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
 80078e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <HAL_RCC_ClockConfig+0x358>)
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007928 <HAL_RCC_ClockConfig+0x35c>)
 80078f4:	5cd3      	ldrb	r3, [r2, r3]
 80078f6:	f003 031f 	and.w	r3, r3, #31
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <HAL_RCC_ClockConfig+0x360>)
 8007902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007904:	4a0a      	ldr	r2, [pc, #40]	@ (8007930 <HAL_RCC_ClockConfig+0x364>)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800790a:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <HAL_RCC_ClockConfig+0x368>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f7fc fb3c 	bl	8003f8c <HAL_InitTick>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
 8007928:	0800e404 	.word	0x0800e404
 800792c:	24000004 	.word	0x24000004
 8007930:	24000000 	.word	0x24000000
 8007934:	24000008 	.word	0x24000008

08007938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007938:	b480      	push	{r7}
 800793a:	b089      	sub	sp, #36	@ 0x24
 800793c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800793e:	4bb3      	ldr	r3, [pc, #716]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007946:	2b18      	cmp	r3, #24
 8007948:	f200 8155 	bhi.w	8007bf6 <HAL_RCC_GetSysClockFreq+0x2be>
 800794c:	a201      	add	r2, pc, #4	@ (adr r2, 8007954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	080079b9 	.word	0x080079b9
 8007958:	08007bf7 	.word	0x08007bf7
 800795c:	08007bf7 	.word	0x08007bf7
 8007960:	08007bf7 	.word	0x08007bf7
 8007964:	08007bf7 	.word	0x08007bf7
 8007968:	08007bf7 	.word	0x08007bf7
 800796c:	08007bf7 	.word	0x08007bf7
 8007970:	08007bf7 	.word	0x08007bf7
 8007974:	080079df 	.word	0x080079df
 8007978:	08007bf7 	.word	0x08007bf7
 800797c:	08007bf7 	.word	0x08007bf7
 8007980:	08007bf7 	.word	0x08007bf7
 8007984:	08007bf7 	.word	0x08007bf7
 8007988:	08007bf7 	.word	0x08007bf7
 800798c:	08007bf7 	.word	0x08007bf7
 8007990:	08007bf7 	.word	0x08007bf7
 8007994:	080079e5 	.word	0x080079e5
 8007998:	08007bf7 	.word	0x08007bf7
 800799c:	08007bf7 	.word	0x08007bf7
 80079a0:	08007bf7 	.word	0x08007bf7
 80079a4:	08007bf7 	.word	0x08007bf7
 80079a8:	08007bf7 	.word	0x08007bf7
 80079ac:	08007bf7 	.word	0x08007bf7
 80079b0:	08007bf7 	.word	0x08007bf7
 80079b4:	080079eb 	.word	0x080079eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b8:	4b94      	ldr	r3, [pc, #592]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c4:	4b91      	ldr	r3, [pc, #580]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	08db      	lsrs	r3, r3, #3
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	4a90      	ldr	r2, [pc, #576]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
 80079d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079d6:	e111      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079d8:	4b8d      	ldr	r3, [pc, #564]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079da:	61bb      	str	r3, [r7, #24]
      break;
 80079dc:	e10e      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079de:	4b8d      	ldr	r3, [pc, #564]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079e0:	61bb      	str	r3, [r7, #24]
      break;
 80079e2:	e10b      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079e6:	61bb      	str	r3, [r7, #24]
      break;
 80079e8:	e108      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079ea:	4b88      	ldr	r3, [pc, #544]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079f4:	4b85      	ldr	r3, [pc, #532]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a00:	4b82      	ldr	r3, [pc, #520]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a0a:	4b80      	ldr	r3, [pc, #512]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	fb02 f303 	mul.w	r3, r2, r3
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80e1 	beq.w	8007bf0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	f000 8083 	beq.w	8007b3c <HAL_RCC_GetSysClockFreq+0x204>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	f200 80a1 	bhi.w	8007b80 <HAL_RCC_GetSysClockFreq+0x248>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0x114>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d056      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a4a:	e099      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02d      	beq.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a58:	4b6c      	ldr	r3, [pc, #432]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	08db      	lsrs	r3, r3, #3
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	4a6b      	ldr	r2, [pc, #428]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
 8007a68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b62      	ldr	r3, [pc, #392]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007ab2:	e087      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b51      	ldr	r3, [pc, #324]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ada:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007af6:	e065      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b40      	ldr	r3, [pc, #256]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b3a:	e043      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b7e:	e021      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b1e      	ldr	r3, [pc, #120]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bc4:	4b11      	ldr	r3, [pc, #68]	@ (8007c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	0a5b      	lsrs	r3, r3, #9
 8007bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bce:	3301      	adds	r3, #1
 8007bd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be8:	ee17 3a90 	vmov	r3, s15
 8007bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007bee:	e005      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
      break;
 8007bf4:	e002      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007bf6:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bf8:	61bb      	str	r3, [r7, #24]
      break;
 8007bfa:	bf00      	nop
  }

  return sysclockfreq;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3724      	adds	r7, #36	@ 0x24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	03d09000 	.word	0x03d09000
 8007c14:	003d0900 	.word	0x003d0900
 8007c18:	017d7840 	.word	0x017d7840
 8007c1c:	46000000 	.word	0x46000000
 8007c20:	4c742400 	.word	0x4c742400
 8007c24:	4a742400 	.word	0x4a742400
 8007c28:	4bbebc20 	.word	0x4bbebc20

08007c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c32:	f7ff fe81 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 8007c36:	4602      	mov	r2, r0
 8007c38:	4b10      	ldr	r3, [pc, #64]	@ (8007c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	0a1b      	lsrs	r3, r3, #8
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	490f      	ldr	r1, [pc, #60]	@ (8007c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c44:	5ccb      	ldrb	r3, [r1, r3]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c50:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	4a09      	ldr	r2, [pc, #36]	@ (8007c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c5a:	5cd3      	ldrb	r3, [r2, r3]
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	4a07      	ldr	r2, [pc, #28]	@ (8007c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c6a:	4a07      	ldr	r2, [pc, #28]	@ (8007c88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c70:	4b04      	ldr	r3, [pc, #16]	@ (8007c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c72:	681b      	ldr	r3, [r3, #0]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	0800e404 	.word	0x0800e404
 8007c84:	24000004 	.word	0x24000004
 8007c88:	24000000 	.word	0x24000000

08007c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c90:	f7ff ffcc 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b06      	ldr	r3, [pc, #24]	@ (8007cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ca2:	5ccb      	ldrb	r3, [r1, r3]
 8007ca4:	f003 031f 	and.w	r3, r3, #31
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	58024400 	.word	0x58024400
 8007cb4:	0800e404 	.word	0x0800e404

08007cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cbc:	f7ff ffb6 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	0a1b      	lsrs	r3, r3, #8
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	4904      	ldr	r1, [pc, #16]	@ (8007ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cce:	5ccb      	ldrb	r3, [r1, r3]
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	0800e404 	.word	0x0800e404

08007ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ce8:	b0ca      	sub	sp, #296	@ 0x128
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007d08:	2500      	movs	r5, #0
 8007d0a:	ea54 0305 	orrs.w	r3, r4, r5
 8007d0e:	d049      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d1a:	d02f      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d20:	d828      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d26:	d01a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d2c:	d822      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d36:	d007      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d38:	e01c      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3a:	4bb8      	ldr	r3, [pc, #736]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	4ab7      	ldr	r2, [pc, #732]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d46:	e01a      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fb61 	bl	800a418 <RCCEx_PLL2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d5c:	e00f      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d62:	3328      	adds	r3, #40	@ 0x28
 8007d64:	2102      	movs	r1, #2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f002 fc08 	bl	800a57c <RCCEx_PLL3_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d72:	e004      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d7a:	e000      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d86:	4ba5      	ldr	r3, [pc, #660]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d94:	4aa1      	ldr	r2, [pc, #644]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d96:	430b      	orrs	r3, r1
 8007d98:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d9a:	e003      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007db0:	f04f 0900 	mov.w	r9, #0
 8007db4:	ea58 0309 	orrs.w	r3, r8, r9
 8007db8:	d047      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d82a      	bhi.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007de1 	.word	0x08007de1
 8007dd0:	08007def 	.word	0x08007def
 8007dd4:	08007e05 	.word	0x08007e05
 8007dd8:	08007e23 	.word	0x08007e23
 8007ddc:	08007e23 	.word	0x08007e23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de0:	4b8e      	ldr	r3, [pc, #568]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	4a8d      	ldr	r2, [pc, #564]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dec:	e01a      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	3308      	adds	r3, #8
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f002 fb0e 	bl	800a418 <RCCEx_PLL2_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e02:	e00f      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e08:	3328      	adds	r3, #40	@ 0x28
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f002 fbb5 	bl	800a57c <RCCEx_PLL3_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e18:	e004      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e20:	e000      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e30:	f023 0107 	bic.w	r1, r3, #7
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3a:	4a78      	ldr	r2, [pc, #480]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e40:	e003      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007e56:	f04f 0b00 	mov.w	fp, #0
 8007e5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e5e:	d04c      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6a:	d030      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e70:	d829      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e74:	d02d      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007e76:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e78:	d825      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007e7a:	2b80      	cmp	r3, #128	@ 0x80
 8007e7c:	d018      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007e7e:	2b80      	cmp	r3, #128	@ 0x80
 8007e80:	d821      	bhi.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007e86:	2b40      	cmp	r3, #64	@ 0x40
 8007e88:	d007      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007e8a:	e01c      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e8c:	4b63      	ldr	r3, [pc, #396]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e90:	4a62      	ldr	r2, [pc, #392]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e98:	e01c      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 fab8 	bl	800a418 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	3328      	adds	r3, #40	@ 0x28
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fb5f 	bl	800a57c <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007edc:	4b4f      	ldr	r3, [pc, #316]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eea:	4a4c      	ldr	r2, [pc, #304]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ef0:	e003      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007f06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007f10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007f14:	460b      	mov	r3, r1
 8007f16:	4313      	orrs	r3, r2
 8007f18:	d053      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f26:	d035      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f2c:	d82e      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f32:	d031      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007f34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f38:	d828      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f3e:	d01a      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f44:	d822      	bhi.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f4e:	d007      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007f50:	e01c      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f52:	4b32      	ldr	r3, [pc, #200]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f56:	4a31      	ldr	r2, [pc, #196]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f5e:	e01c      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f64:	3308      	adds	r3, #8
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f002 fa55 	bl	800a418 <RCCEx_PLL2_Config>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007f74:	e011      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7a:	3328      	adds	r3, #40	@ 0x28
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 fafc 	bl	800a57c <RCCEx_PLL3_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f8a:	e006      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f92:	e002      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007f94:	bf00      	nop
 8007f96:	e000      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10b      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007fce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007fd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	d056      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fee:	d038      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ff4:	d831      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ff6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ffa:	d034      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007ffc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008000:	d82b      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008006:	d01d      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800800c:	d825      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008016:	d00a      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008018:	e01f      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800801a:	bf00      	nop
 800801c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008020:	4ba2      	ldr	r3, [pc, #648]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	4aa1      	ldr	r2, [pc, #644]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800802a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800802c:	e01c      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008032:	3308      	adds	r3, #8
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f002 f9ee 	bl	800a418 <RCCEx_PLL2_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008042:	e011      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	3328      	adds	r3, #40	@ 0x28
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f002 fa95 	bl	800a57c <RCCEx_PLL3_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008058:	e006      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008060:	e002      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008062:	bf00      	nop
 8008064:	e000      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008070:	4b8e      	ldr	r3, [pc, #568]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008074:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008080:	4a8a      	ldr	r2, [pc, #552]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008082:	430b      	orrs	r3, r1
 8008084:	6593      	str	r3, [r2, #88]	@ 0x58
 8008086:	e003      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800808c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800809c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80080a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80080aa:	460b      	mov	r3, r1
 80080ac:	4313      	orrs	r3, r2
 80080ae:	d03a      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80080b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b6:	2b30      	cmp	r3, #48	@ 0x30
 80080b8:	d01f      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80080ba:	2b30      	cmp	r3, #48	@ 0x30
 80080bc:	d819      	bhi.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d00c      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d815      	bhi.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d019      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d111      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ce:	4b77      	ldr	r3, [pc, #476]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	4a76      	ldr	r2, [pc, #472]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80080da:	e011      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e0:	3308      	adds	r3, #8
 80080e2:	2102      	movs	r1, #2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f002 f997 	bl	800a418 <RCCEx_PLL2_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80080f0:	e006      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080f8:	e002      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80080fa:	bf00      	nop
 80080fc:	e000      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80080fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008108:	4b68      	ldr	r3, [pc, #416]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800810a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008116:	4a65      	ldr	r2, [pc, #404]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008118:	430b      	orrs	r3, r1
 800811a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800811c:	e003      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008136:	2300      	movs	r3, #0
 8008138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800813c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008140:	460b      	mov	r3, r1
 8008142:	4313      	orrs	r3, r2
 8008144:	d051      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008150:	d035      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008156:	d82e      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008158:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800815c:	d031      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800815e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008162:	d828      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008168:	d01a      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816e:	d822      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008178:	d007      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800817a:	e01c      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817c:	4b4b      	ldr	r3, [pc, #300]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008180:	4a4a      	ldr	r2, [pc, #296]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008188:	e01c      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	3308      	adds	r3, #8
 8008190:	2100      	movs	r1, #0
 8008192:	4618      	mov	r0, r3
 8008194:	f002 f940 	bl	800a418 <RCCEx_PLL2_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800819e:	e011      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	3328      	adds	r3, #40	@ 0x28
 80081a6:	2100      	movs	r1, #0
 80081a8:	4618      	mov	r0, r3
 80081aa:	f002 f9e7 	bl	800a57c <RCCEx_PLL3_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081b4:	e006      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081bc:	e002      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80081c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80081cc:	4b37      	ldr	r3, [pc, #220]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081da:	4a34      	ldr	r2, [pc, #208]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081dc:	430b      	orrs	r3, r1
 80081de:	6513      	str	r3, [r2, #80]	@ 0x50
 80081e0:	e003      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80081f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081fa:	2300      	movs	r3, #0
 80081fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008200:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008204:	460b      	mov	r3, r1
 8008206:	4313      	orrs	r3, r2
 8008208:	d056      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008214:	d033      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008216:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800821a:	d82c      	bhi.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800821c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008220:	d02f      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008222:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008226:	d826      	bhi.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008228:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800822c:	d02b      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800822e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008232:	d820      	bhi.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008238:	d012      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800823a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823e:	d81a      	bhi.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d022      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008248:	d115      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	3308      	adds	r3, #8
 8008250:	2101      	movs	r1, #1
 8008252:	4618      	mov	r0, r3
 8008254:	f002 f8e0 	bl	800a418 <RCCEx_PLL2_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800825e:	e015      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008264:	3328      	adds	r3, #40	@ 0x28
 8008266:	2101      	movs	r1, #1
 8008268:	4618      	mov	r0, r3
 800826a:	f002 f987 	bl	800a57c <RCCEx_PLL3_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008274:	e00a      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800827c:	e006      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800827e:	bf00      	nop
 8008280:	e004      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008282:	bf00      	nop
 8008284:	e002      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800828a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800828c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10d      	bne.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008294:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008298:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a2:	4a02      	ldr	r2, [pc, #8]	@ (80082ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082a4:	430b      	orrs	r3, r1
 80082a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80082a8:	e006      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80082aa:	bf00      	nop
 80082ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80082c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4313      	orrs	r3, r2
 80082d6:	d055      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80082e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082e4:	d033      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80082e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082ea:	d82c      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80082ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f0:	d02f      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80082f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f6:	d826      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80082f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082fc:	d02b      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80082fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008302:	d820      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008308:	d012      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800830a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800830e:	d81a      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008310:	2b00      	cmp	r3, #0
 8008312:	d022      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008318:	d115      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831e:	3308      	adds	r3, #8
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f002 f878 	bl	800a418 <RCCEx_PLL2_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800832e:	e015      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008334:	3328      	adds	r3, #40	@ 0x28
 8008336:	2101      	movs	r1, #1
 8008338:	4618      	mov	r0, r3
 800833a:	f002 f91f 	bl	800a57c <RCCEx_PLL3_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008344:	e00a      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800834c:	e006      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800834e:	bf00      	nop
 8008350:	e004      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008352:	bf00      	nop
 8008354:	e002      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008356:	bf00      	nop
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800835a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008364:	4ba3      	ldr	r3, [pc, #652]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008368:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008374:	4a9f      	ldr	r2, [pc, #636]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008376:	430b      	orrs	r3, r1
 8008378:	6593      	str	r3, [r2, #88]	@ 0x58
 800837a:	e003      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008394:	2300      	movs	r3, #0
 8008396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800839a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d037      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ae:	d00e      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b4:	d816      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d018      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80083ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083be:	d111      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c0:	4b8c      	ldr	r3, [pc, #560]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4a8b      	ldr	r2, [pc, #556]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083cc:	e00f      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d2:	3308      	adds	r3, #8
 80083d4:	2101      	movs	r1, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f002 f81e 	bl	800a418 <RCCEx_PLL2_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80083e2:	e004      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083ea:	e000      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80083ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083f6:	4b7f      	ldr	r3, [pc, #508]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008404:	4a7b      	ldr	r2, [pc, #492]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008406:	430b      	orrs	r3, r1
 8008408:	6513      	str	r3, [r2, #80]	@ 0x50
 800840a:	e003      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008424:	2300      	movs	r3, #0
 8008426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800842a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800842e:	460b      	mov	r3, r1
 8008430:	4313      	orrs	r3, r2
 8008432:	d039      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	2b03      	cmp	r3, #3
 800843c:	d81c      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008481 	.word	0x08008481
 8008448:	08008455 	.word	0x08008455
 800844c:	08008463 	.word	0x08008463
 8008450:	08008481 	.word	0x08008481
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008454:	4b67      	ldr	r3, [pc, #412]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008458:	4a66      	ldr	r2, [pc, #408]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800845a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800845e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008460:	e00f      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008466:	3308      	adds	r3, #8
 8008468:	2102      	movs	r1, #2
 800846a:	4618      	mov	r0, r3
 800846c:	f001 ffd4 	bl	800a418 <RCCEx_PLL2_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008476:	e004      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800848a:	4b5a      	ldr	r3, [pc, #360]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800848c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800848e:	f023 0103 	bic.w	r1, r3, #3
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008498:	4a56      	ldr	r2, [pc, #344]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800849a:	430b      	orrs	r3, r1
 800849c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800849e:	e003      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80084b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f000 809f 	beq.w	8008608 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084ca:	4b4b      	ldr	r3, [pc, #300]	@ (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a4a      	ldr	r2, [pc, #296]	@ (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80084d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084d6:	f7fb fda3 	bl	8004020 <HAL_GetTick>
 80084da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084de:	e00b      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e0:	f7fb fd9e 	bl	8004020 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b64      	cmp	r3, #100	@ 0x64
 80084ee:	d903      	bls.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084f6:	e005      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084f8:	4b3f      	ldr	r3, [pc, #252]	@ (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0ed      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008508:	2b00      	cmp	r3, #0
 800850a:	d179      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800850c:	4b39      	ldr	r3, [pc, #228]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800850e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008518:	4053      	eors	r3, r2
 800851a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851e:	2b00      	cmp	r3, #0
 8008520:	d015      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008522:	4b34      	ldr	r3, [pc, #208]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800852a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800852e:	4b31      	ldr	r3, [pc, #196]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008532:	4a30      	ldr	r2, [pc, #192]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008538:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800853a:	4b2e      	ldr	r3, [pc, #184]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800853c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853e:	4a2d      	ldr	r2, [pc, #180]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008544:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008546:	4a2b      	ldr	r2, [pc, #172]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800854c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800855a:	d118      	bne.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855c:	f7fb fd60 	bl	8004020 <HAL_GetTick>
 8008560:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008564:	e00d      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008566:	f7fb fd5b 	bl	8004020 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008570:	1ad2      	subs	r2, r2, r3
 8008572:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008576:	429a      	cmp	r2, r3
 8008578:	d903      	bls.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008580:	e005      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008582:	4b1c      	ldr	r3, [pc, #112]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0eb      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800858e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008592:	2b00      	cmp	r3, #0
 8008594:	d129      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800859e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085a6:	d10e      	bne.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80085a8:	4b12      	ldr	r3, [pc, #72]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085b8:	091a      	lsrs	r2, r3, #4
 80085ba:	4b10      	ldr	r3, [pc, #64]	@ (80085fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80085bc:	4013      	ands	r3, r2
 80085be:	4a0d      	ldr	r2, [pc, #52]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6113      	str	r3, [r2, #16]
 80085c4:	e005      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80085c6:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80085d0:	6113      	str	r3, [r2, #16]
 80085d2:	4b08      	ldr	r3, [pc, #32]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085e2:	4a04      	ldr	r2, [pc, #16]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085e4:	430b      	orrs	r3, r1
 80085e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e8:	e00e      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80085f2:	e009      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80085f4:	58024400 	.word	0x58024400
 80085f8:	58024800 	.word	0x58024800
 80085fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f002 0301 	and.w	r3, r2, #1
 8008614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008618:	2300      	movs	r3, #0
 800861a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800861e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008622:	460b      	mov	r3, r1
 8008624:	4313      	orrs	r3, r2
 8008626:	f000 8089 	beq.w	800873c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008630:	2b28      	cmp	r3, #40	@ 0x28
 8008632:	d86b      	bhi.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008634:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	08008715 	.word	0x08008715
 8008640:	0800870d 	.word	0x0800870d
 8008644:	0800870d 	.word	0x0800870d
 8008648:	0800870d 	.word	0x0800870d
 800864c:	0800870d 	.word	0x0800870d
 8008650:	0800870d 	.word	0x0800870d
 8008654:	0800870d 	.word	0x0800870d
 8008658:	0800870d 	.word	0x0800870d
 800865c:	080086e1 	.word	0x080086e1
 8008660:	0800870d 	.word	0x0800870d
 8008664:	0800870d 	.word	0x0800870d
 8008668:	0800870d 	.word	0x0800870d
 800866c:	0800870d 	.word	0x0800870d
 8008670:	0800870d 	.word	0x0800870d
 8008674:	0800870d 	.word	0x0800870d
 8008678:	0800870d 	.word	0x0800870d
 800867c:	080086f7 	.word	0x080086f7
 8008680:	0800870d 	.word	0x0800870d
 8008684:	0800870d 	.word	0x0800870d
 8008688:	0800870d 	.word	0x0800870d
 800868c:	0800870d 	.word	0x0800870d
 8008690:	0800870d 	.word	0x0800870d
 8008694:	0800870d 	.word	0x0800870d
 8008698:	0800870d 	.word	0x0800870d
 800869c:	08008715 	.word	0x08008715
 80086a0:	0800870d 	.word	0x0800870d
 80086a4:	0800870d 	.word	0x0800870d
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	0800870d 	.word	0x0800870d
 80086b0:	0800870d 	.word	0x0800870d
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	0800870d 	.word	0x0800870d
 80086bc:	08008715 	.word	0x08008715
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	0800870d 	.word	0x0800870d
 80086c8:	0800870d 	.word	0x0800870d
 80086cc:	0800870d 	.word	0x0800870d
 80086d0:	0800870d 	.word	0x0800870d
 80086d4:	0800870d 	.word	0x0800870d
 80086d8:	0800870d 	.word	0x0800870d
 80086dc:	08008715 	.word	0x08008715
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e4:	3308      	adds	r3, #8
 80086e6:	2101      	movs	r1, #1
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fe95 	bl	800a418 <RCCEx_PLL2_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086f4:	e00f      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	3328      	adds	r3, #40	@ 0x28
 80086fc:	2101      	movs	r1, #1
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 ff3c 	bl	800a57c <RCCEx_PLL3_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800870a:	e004      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008712:	e000      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800871e:	4bbf      	ldr	r3, [pc, #764]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008722:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800872c:	4abb      	ldr	r2, [pc, #748]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800872e:	430b      	orrs	r3, r1
 8008730:	6553      	str	r3, [r2, #84]	@ 0x54
 8008732:	e003      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f002 0302 	and.w	r3, r2, #2
 8008748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800874c:	2300      	movs	r3, #0
 800874e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008752:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008756:	460b      	mov	r3, r1
 8008758:	4313      	orrs	r3, r2
 800875a:	d041      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008762:	2b05      	cmp	r3, #5
 8008764:	d824      	bhi.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008766:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	080087b9 	.word	0x080087b9
 8008770:	08008785 	.word	0x08008785
 8008774:	0800879b 	.word	0x0800879b
 8008778:	080087b9 	.word	0x080087b9
 800877c:	080087b9 	.word	0x080087b9
 8008780:	080087b9 	.word	0x080087b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008788:	3308      	adds	r3, #8
 800878a:	2101      	movs	r1, #1
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fe43 	bl	800a418 <RCCEx_PLL2_Config>
 8008792:	4603      	mov	r3, r0
 8008794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008798:	e00f      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	3328      	adds	r3, #40	@ 0x28
 80087a0:	2101      	movs	r1, #1
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 feea 	bl	800a57c <RCCEx_PLL3_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087ae:	e004      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087b6:	e000      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80087b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087c2:	4b96      	ldr	r3, [pc, #600]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c6:	f023 0107 	bic.w	r1, r3, #7
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087d0:	4a92      	ldr	r2, [pc, #584]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087d2:	430b      	orrs	r3, r1
 80087d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80087d6:	e003      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f002 0304 	and.w	r3, r2, #4
 80087ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087f0:	2300      	movs	r3, #0
 80087f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4313      	orrs	r3, r2
 80087fe:	d044      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008808:	2b05      	cmp	r3, #5
 800880a:	d825      	bhi.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800880c:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008861 	.word	0x08008861
 8008818:	0800882d 	.word	0x0800882d
 800881c:	08008843 	.word	0x08008843
 8008820:	08008861 	.word	0x08008861
 8008824:	08008861 	.word	0x08008861
 8008828:	08008861 	.word	0x08008861
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008830:	3308      	adds	r3, #8
 8008832:	2101      	movs	r1, #1
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fdef 	bl	800a418 <RCCEx_PLL2_Config>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008840:	e00f      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008846:	3328      	adds	r3, #40	@ 0x28
 8008848:	2101      	movs	r1, #1
 800884a:	4618      	mov	r0, r3
 800884c:	f001 fe96 	bl	800a57c <RCCEx_PLL3_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008856:	e004      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800886a:	4b6c      	ldr	r3, [pc, #432]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800886c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886e:	f023 0107 	bic.w	r1, r3, #7
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800887a:	4a68      	ldr	r2, [pc, #416]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800887c:	430b      	orrs	r3, r1
 800887e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008880:	e003      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f002 0320 	and.w	r3, r2, #32
 8008896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800889a:	2300      	movs	r3, #0
 800889c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088a4:	460b      	mov	r3, r1
 80088a6:	4313      	orrs	r3, r2
 80088a8:	d055      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088b6:	d033      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80088b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088bc:	d82c      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80088be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c2:	d02f      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80088c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c8:	d826      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80088ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088ce:	d02b      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80088d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088d4:	d820      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80088d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088da:	d012      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80088dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e0:	d81a      	bhi.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d022      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80088e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ea:	d115      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f0:	3308      	adds	r3, #8
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 fd8f 	bl	800a418 <RCCEx_PLL2_Config>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008900:	e015      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008906:	3328      	adds	r3, #40	@ 0x28
 8008908:	2102      	movs	r1, #2
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fe36 	bl	800a57c <RCCEx_PLL3_Config>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008916:	e00a      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800891e:	e006      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008920:	bf00      	nop
 8008922:	e004      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008924:	bf00      	nop
 8008926:	e002      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008928:	bf00      	nop
 800892a:	e000      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800892c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008936:	4b39      	ldr	r3, [pc, #228]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800893a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008946:	4a35      	ldr	r2, [pc, #212]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008948:	430b      	orrs	r3, r1
 800894a:	6553      	str	r3, [r2, #84]	@ 0x54
 800894c:	e003      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008966:	2300      	movs	r3, #0
 8008968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800896c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008970:	460b      	mov	r3, r1
 8008972:	4313      	orrs	r3, r2
 8008974:	d058      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800897e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008982:	d033      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008984:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008988:	d82c      	bhi.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898e:	d02f      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008994:	d826      	bhi.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008996:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800899a:	d02b      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800899c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089a0:	d820      	bhi.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089a6:	d012      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80089a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089ac:	d81a      	bhi.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d022      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80089b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b6:	d115      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089bc:	3308      	adds	r3, #8
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 fd29 	bl	800a418 <RCCEx_PLL2_Config>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089cc:	e015      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d2:	3328      	adds	r3, #40	@ 0x28
 80089d4:	2102      	movs	r1, #2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 fdd0 	bl	800a57c <RCCEx_PLL3_Config>
 80089dc:	4603      	mov	r3, r0
 80089de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80089e2:	e00a      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089ea:	e006      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80089ec:	bf00      	nop
 80089ee:	e004      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80089f0:	bf00      	nop
 80089f2:	e002      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80089f4:	bf00      	nop
 80089f6:	e000      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80089f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10e      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a02:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a06:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a12:	4a02      	ldr	r2, [pc, #8]	@ (8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a14:	430b      	orrs	r3, r1
 8008a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a18:	e006      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008a1a:	bf00      	nop
 8008a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008a42:	460b      	mov	r3, r1
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d055      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a50:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a54:	d033      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008a56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008a5a:	d82c      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a60:	d02f      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a66:	d826      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008a68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a6c:	d02b      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008a6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008a72:	d820      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a78:	d012      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a7e:	d81a      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d022      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a88:	d115      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8e:	3308      	adds	r3, #8
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 fcc0 	bl	800a418 <RCCEx_PLL2_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a9e:	e015      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa4:	3328      	adds	r3, #40	@ 0x28
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 fd67 	bl	800a57c <RCCEx_PLL3_Config>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ab4:	e00a      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008abc:	e006      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008abe:	bf00      	nop
 8008ac0:	e004      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e002      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ac6:	bf00      	nop
 8008ac8:	e000      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ad4:	4ba1      	ldr	r3, [pc, #644]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ae4:	4a9d      	ldr	r2, [pc, #628]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ae6:	430b      	orrs	r3, r1
 8008ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008aea:	e003      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f002 0308 	and.w	r3, r2, #8
 8008b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4313      	orrs	r3, r2
 8008b12:	d01e      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b20:	d10c      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b26:	3328      	adds	r3, #40	@ 0x28
 8008b28:	2102      	movs	r1, #2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fd26 	bl	800a57c <RCCEx_PLL3_Config>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b3c:	4b87      	ldr	r3, [pc, #540]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b4c:	4a83      	ldr	r2, [pc, #524]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f002 0310 	and.w	r3, r2, #16
 8008b5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b62:	2300      	movs	r3, #0
 8008b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	d01e      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b7e:	d10c      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b84:	3328      	adds	r3, #40	@ 0x28
 8008b86:	2102      	movs	r1, #2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 fcf7 	bl	800a57c <RCCEx_PLL3_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b9a:	4b70      	ldr	r3, [pc, #448]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008baa:	4a6c      	ldr	r2, [pc, #432]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bac:	430b      	orrs	r3, r1
 8008bae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bc6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	d03e      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bdc:	d022      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be2:	d81b      	bhi.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bec:	d00b      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008bee:	e015      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 fc0d 	bl	800a418 <RCCEx_PLL2_Config>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c04:	e00f      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0a:	3328      	adds	r3, #40	@ 0x28
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 fcb4 	bl	800a57c <RCCEx_PLL3_Config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c1a:	e004      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c22:	e000      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10b      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c3e:	4a47      	ldr	r2, [pc, #284]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c44:	e003      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008c64:	460b      	mov	r3, r1
 8008c66:	4313      	orrs	r3, r2
 8008c68:	d03b      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c76:	d01f      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008c78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c7c:	d818      	bhi.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c82:	d003      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008c84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c88:	d007      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008c8a:	e011      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c8c:	4b33      	ldr	r3, [pc, #204]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c90:	4a32      	ldr	r2, [pc, #200]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c98:	e00f      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9e:	3328      	adds	r3, #40	@ 0x28
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fc6a 	bl	800a57c <RCCEx_PLL3_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cae:	e004      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cb6:	e000      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cc2:	4b26      	ldr	r3, [pc, #152]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd2:	4a22      	ldr	r2, [pc, #136]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cd8:	e003      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008cf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	d034      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d0c:	d007      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008d0e:	e011      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d10:	4b12      	ldr	r3, [pc, #72]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d14:	4a11      	ldr	r2, [pc, #68]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d1c:	e00e      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d22:	3308      	adds	r3, #8
 8008d24:	2102      	movs	r1, #2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f001 fb76 	bl	800a418 <RCCEx_PLL2_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d32:	e003      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10d      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d44:	4b05      	ldr	r3, [pc, #20]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d52:	4a02      	ldr	r2, [pc, #8]	@ (8008d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d54:	430b      	orrs	r3, r1
 8008d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d58:	e006      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008d5a:	bf00      	nop
 8008d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d76:	2300      	movs	r3, #0
 8008d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d00c      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d88:	3328      	adds	r3, #40	@ 0x28
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 fbf5 	bl	800a57c <RCCEx_PLL3_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008daa:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dac:	2300      	movs	r3, #0
 8008dae:	667b      	str	r3, [r7, #100]	@ 0x64
 8008db0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008db4:	460b      	mov	r3, r1
 8008db6:	4313      	orrs	r3, r2
 8008db8:	d038      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dc6:	d018      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dcc:	d811      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dd2:	d014      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dd8:	d80b      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d011      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de2:	d106      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de4:	4bc3      	ldr	r3, [pc, #780]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de8:	4ac2      	ldr	r2, [pc, #776]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008df0:	e008      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008df8:	e004      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008dfa:	bf00      	nop
 8008dfc:	e002      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008dfe:	bf00      	nop
 8008e00:	e000      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e0c:	4bb9      	ldr	r3, [pc, #740]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1c:	4ab5      	ldr	r2, [pc, #724]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e22:	e003      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008e42:	460b      	mov	r3, r1
 8008e44:	4313      	orrs	r3, r2
 8008e46:	d009      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e48:	4baa      	ldr	r3, [pc, #680]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e56:	4aa7      	ldr	r2, [pc, #668]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008e68:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008e72:	460b      	mov	r3, r1
 8008e74:	4313      	orrs	r3, r2
 8008e76:	d00a      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008e78:	4b9e      	ldr	r3, [pc, #632]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008e88:	4a9a      	ldr	r2, [pc, #616]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e8a:	430b      	orrs	r3, r1
 8008e8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ea0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	d009      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008eaa:	4b92      	ldr	r3, [pc, #584]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ecc:	2300      	movs	r3, #0
 8008ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ed0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d00e      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008eda:	4b86      	ldr	r3, [pc, #536]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	4a85      	ldr	r2, [pc, #532]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ee0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ee4:	6113      	str	r3, [r2, #16]
 8008ee6:	4b83      	ldr	r3, [pc, #524]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ee8:	6919      	ldr	r1, [r3, #16]
 8008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ef2:	4a80      	ldr	r2, [pc, #512]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f06:	2300      	movs	r3, #0
 8008f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	d009      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f14:	4b77      	ldr	r3, [pc, #476]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f22:	4a74      	ldr	r2, [pc, #464]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f24:	430b      	orrs	r3, r1
 8008f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f36:	2300      	movs	r3, #0
 8008f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4313      	orrs	r3, r2
 8008f42:	d00a      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f44:	4b6b      	ldr	r3, [pc, #428]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f54:	4a67      	ldr	r2, [pc, #412]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	2100      	movs	r1, #0
 8008f64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008f70:	460b      	mov	r3, r1
 8008f72:	4313      	orrs	r3, r2
 8008f74:	d011      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fa4a 	bl	800a418 <RCCEx_PLL2_Config>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6239      	str	r1, [r7, #32]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	d011      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	3308      	adds	r3, #8
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f001 fa2a 	bl	800a418 <RCCEx_PLL2_Config>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	61b9      	str	r1, [r7, #24]
 8008fe6:	f003 0304 	and.w	r3, r3, #4
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	d011      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	2102      	movs	r1, #2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 fa0a 	bl	800a418 <RCCEx_PLL2_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800900a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	2100      	movs	r1, #0
 8009024:	6139      	str	r1, [r7, #16]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009030:	460b      	mov	r3, r1
 8009032:	4313      	orrs	r3, r2
 8009034:	d011      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903a:	3328      	adds	r3, #40	@ 0x28
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f001 fa9c 	bl	800a57c <RCCEx_PLL3_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800904a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	2100      	movs	r1, #0
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009070:	460b      	mov	r3, r1
 8009072:	4313      	orrs	r3, r2
 8009074:	d011      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907a:	3328      	adds	r3, #40	@ 0x28
 800907c:	2101      	movs	r1, #1
 800907e:	4618      	mov	r0, r3
 8009080:	f001 fa7c 	bl	800a57c <RCCEx_PLL3_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	2100      	movs	r1, #0
 80090a4:	6039      	str	r1, [r7, #0]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80090b0:	460b      	mov	r3, r1
 80090b2:	4313      	orrs	r3, r2
 80090b4:	d011      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ba:	3328      	adds	r3, #40	@ 0x28
 80090bc:	2102      	movs	r1, #2
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fa5c 	bl	800a57c <RCCEx_PLL3_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80090ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80090da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	e000      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80090ee:	46bd      	mov	sp, r7
 80090f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090f4:	58024400 	.word	0x58024400

080090f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b090      	sub	sp, #64	@ 0x40
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009106:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800910a:	430b      	orrs	r3, r1
 800910c:	f040 8094 	bne.w	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009110:	4b9e      	ldr	r3, [pc, #632]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	2b04      	cmp	r3, #4
 800911e:	f200 8087 	bhi.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009122:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009128:	0800913d 	.word	0x0800913d
 800912c:	08009165 	.word	0x08009165
 8009130:	0800918d 	.word	0x0800918d
 8009134:	08009229 	.word	0x08009229
 8009138:	080091b5 	.word	0x080091b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800913c:	4b93      	ldr	r3, [pc, #588]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009148:	d108      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800914a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800914e:	4618      	mov	r0, r3
 8009150:	f001 f810 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009158:	f000 bd45 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009160:	f000 bd41 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009164:	4b89      	ldr	r3, [pc, #548]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800916c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009170:	d108      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009172:	f107 0318 	add.w	r3, r7, #24
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fd54 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009180:	f000 bd31 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009188:	f000 bd2d 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800918c:	4b7f      	ldr	r3, [pc, #508]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009198:	d108      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800919a:	f107 030c 	add.w	r3, r7, #12
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fe94 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a8:	f000 bd1d 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b0:	f000 bd19 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091b4:	4b75      	ldr	r3, [pc, #468]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091be:	4b73      	ldr	r3, [pc, #460]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d10c      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80091ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d109      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091d0:	4b6e      	ldr	r3, [pc, #440]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	08db      	lsrs	r3, r3, #3
 80091d6:	f003 0303 	and.w	r3, r3, #3
 80091da:	4a6d      	ldr	r2, [pc, #436]	@ (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80091dc:	fa22 f303 	lsr.w	r3, r2, r3
 80091e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e2:	e01f      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091e4:	4b69      	ldr	r3, [pc, #420]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f0:	d106      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80091f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091f8:	d102      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091fa:	4b66      	ldr	r3, [pc, #408]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80091fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091fe:	e011      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009200:	4b62      	ldr	r3, [pc, #392]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800920c:	d106      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800920e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009214:	d102      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009216:	4b60      	ldr	r3, [pc, #384]	@ (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921a:	e003      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009220:	f000 bce1 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009224:	f000 bcdf 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009228:	4b5c      	ldr	r3, [pc, #368]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922c:	f000 bcdb 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	f000 bcd7 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009240:	430b      	orrs	r3, r1
 8009242:	f040 80ad 	bne.w	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009246:	4b51      	ldr	r3, [pc, #324]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800924a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800924e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009256:	d056      	beq.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800925e:	f200 8090 	bhi.w	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	2bc0      	cmp	r3, #192	@ 0xc0
 8009266:	f000 8088 	beq.w	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	2bc0      	cmp	r3, #192	@ 0xc0
 800926e:	f200 8088 	bhi.w	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	2b80      	cmp	r3, #128	@ 0x80
 8009276:	d032      	beq.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	2b80      	cmp	r3, #128	@ 0x80
 800927c:	f200 8081 	bhi.w	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	2b40      	cmp	r3, #64	@ 0x40
 800928a:	d014      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800928c:	e079      	b.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800928e:	4b3f      	ldr	r3, [pc, #252]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800929a:	d108      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800929c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 ff67 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092aa:	f000 bc9c 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b2:	f000 bc98 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b6:	4b35      	ldr	r3, [pc, #212]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c2:	d108      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c4:	f107 0318 	add.w	r3, r7, #24
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fcab 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d2:	f000 bc88 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092da:	f000 bc84 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092de:	4b2b      	ldr	r3, [pc, #172]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ea:	d108      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ec:	f107 030c 	add.w	r3, r7, #12
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fdeb 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092fa:	f000 bc74 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009302:	f000 bc70 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009306:	4b21      	ldr	r3, [pc, #132]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800930a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009310:	4b1e      	ldr	r3, [pc, #120]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b04      	cmp	r3, #4
 800931a:	d10c      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800931c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009322:	4b1a      	ldr	r3, [pc, #104]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	08db      	lsrs	r3, r3, #3
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	4a18      	ldr	r2, [pc, #96]	@ (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800932e:	fa22 f303 	lsr.w	r3, r2, r3
 8009332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009334:	e01f      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009336:	4b15      	ldr	r3, [pc, #84]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800933e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009342:	d106      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800934a:	d102      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800934c:	4b11      	ldr	r3, [pc, #68]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009350:	e011      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009352:	4b0e      	ldr	r3, [pc, #56]	@ (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800935a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800935e:	d106      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009366:	d102      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009368:	4b0b      	ldr	r3, [pc, #44]	@ (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800936c:	e003      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009372:	f000 bc38 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009376:	f000 bc36 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800937a:	4b08      	ldr	r3, [pc, #32]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800937c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800937e:	f000 bc32 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009386:	f000 bc2e 	b.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800938a:	bf00      	nop
 800938c:	58024400 	.word	0x58024400
 8009390:	03d09000 	.word	0x03d09000
 8009394:	003d0900 	.word	0x003d0900
 8009398:	017d7840 	.word	0x017d7840
 800939c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80093a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80093a8:	430b      	orrs	r3, r1
 80093aa:	f040 809c 	bne.w	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80093ae:	4b9e      	ldr	r3, [pc, #632]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80093b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093be:	d054      	beq.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093c6:	f200 808b 	bhi.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80093d0:	f000 8083 	beq.w	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80093da:	f200 8081 	bhi.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093e4:	d02f      	beq.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093ec:	d878      	bhi.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093fa:	d012      	beq.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80093fc:	e070      	b.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093fe:	4b8a      	ldr	r3, [pc, #552]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800940a:	d107      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800940c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009410:	4618      	mov	r0, r3
 8009412:	f000 feaf 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941a:	e3e4      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e3e1      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009422:	4b81      	ldr	r3, [pc, #516]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800942a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800942e:	d107      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009430:	f107 0318 	add.w	r3, r7, #24
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fbf5 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800943e:	e3d2      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009444:	e3cf      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009446:	4b78      	ldr	r3, [pc, #480]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800944e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009452:	d107      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009454:	f107 030c 	add.w	r3, r7, #12
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fd37 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009462:	e3c0      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009468:	e3bd      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800946a:	4b6f      	ldr	r3, [pc, #444]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800946c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800946e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009472:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009474:	4b6c      	ldr	r3, [pc, #432]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b04      	cmp	r3, #4
 800947e:	d10c      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009486:	4b68      	ldr	r3, [pc, #416]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	08db      	lsrs	r3, r3, #3
 800948c:	f003 0303 	and.w	r3, r3, #3
 8009490:	4a66      	ldr	r2, [pc, #408]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009492:	fa22 f303 	lsr.w	r3, r2, r3
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009498:	e01e      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800949a:	4b63      	ldr	r3, [pc, #396]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094a6:	d106      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80094a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094ae:	d102      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094b0:	4b5f      	ldr	r3, [pc, #380]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094b4:	e010      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094b6:	4b5c      	ldr	r3, [pc, #368]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094c2:	d106      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80094c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ca:	d102      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094cc:	4b59      	ldr	r3, [pc, #356]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094d0:	e002      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094d6:	e386      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094d8:	e385      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094da:	4b57      	ldr	r3, [pc, #348]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80094dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094de:	e382      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e4:	e37f      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80094e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80094ee:	430b      	orrs	r3, r1
 80094f0:	f040 80a7 	bne.w	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80094f4:	4b4c      	ldr	r3, [pc, #304]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80094fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80094fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009504:	d055      	beq.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800950c:	f200 8096 	bhi.w	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009516:	f000 8084 	beq.w	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009520:	f200 808c 	bhi.w	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800952a:	d030      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800952c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009532:	f200 8083 	bhi.w	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	2b00      	cmp	r3, #0
 800953a:	d004      	beq.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009542:	d012      	beq.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009544:	e07a      	b.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009546:	4b38      	ldr	r3, [pc, #224]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800954e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009552:	d107      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fe0b 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009562:	e340      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009568:	e33d      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800956a:	4b2f      	ldr	r3, [pc, #188]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009576:	d107      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009578:	f107 0318 	add.w	r3, r7, #24
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fb51 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009586:	e32e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e32b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800958e:	4b26      	ldr	r3, [pc, #152]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800959a:	d107      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800959c:	f107 030c 	add.w	r3, r7, #12
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fc93 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095aa:	e31c      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b0:	e319      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	d10c      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80095c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d109      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095ce:	4b16      	ldr	r3, [pc, #88]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	08db      	lsrs	r3, r3, #3
 80095d4:	f003 0303 	and.w	r3, r3, #3
 80095d8:	4a14      	ldr	r2, [pc, #80]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80095da:	fa22 f303 	lsr.w	r3, r2, r3
 80095de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095e0:	e01e      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095e2:	4b11      	ldr	r3, [pc, #68]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ee:	d106      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80095f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095f6:	d102      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095fc:	e010      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800960a:	d106      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800960c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009612:	d102      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009614:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009618:	e002      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800961e:	e2e2      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009620:	e2e1      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009622:	4b05      	ldr	r3, [pc, #20]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009626:	e2de      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009628:	58024400 	.word	0x58024400
 800962c:	03d09000 	.word	0x03d09000
 8009630:	003d0900 	.word	0x003d0900
 8009634:	017d7840 	.word	0x017d7840
 8009638:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009640:	e2d1      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009646:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800964a:	430b      	orrs	r3, r1
 800964c:	f040 809c 	bne.w	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009650:	4b93      	ldr	r3, [pc, #588]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009654:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009658:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800965a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009660:	d054      	beq.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009668:	f200 808b 	bhi.w	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009672:	f000 8083 	beq.w	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009678:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800967c:	f200 8081 	bhi.w	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009686:	d02f      	beq.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800968e:	d878      	bhi.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d004      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800969c:	d012      	beq.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800969e:	e070      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096a0:	4b7f      	ldr	r3, [pc, #508]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096ac:	d107      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fd5e 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096bc:	e293      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c2:	e290      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096c4:	4b76      	ldr	r3, [pc, #472]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096d0:	d107      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096d2:	f107 0318 	add.w	r3, r7, #24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 faa4 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e0:	e281      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e27e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096e8:	4b6d      	ldr	r3, [pc, #436]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f4:	d107      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fbe6 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009704:	e26f      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970a:	e26c      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800970c:	4b64      	ldr	r3, [pc, #400]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800970e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009710:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009714:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009716:	4b62      	ldr	r3, [pc, #392]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0304 	and.w	r3, r3, #4
 800971e:	2b04      	cmp	r3, #4
 8009720:	d10c      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009728:	4b5d      	ldr	r3, [pc, #372]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	08db      	lsrs	r3, r3, #3
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	4a5c      	ldr	r2, [pc, #368]	@ (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800973a:	e01e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800973c:	4b58      	ldr	r3, [pc, #352]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800974a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009750:	d102      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009752:	4b55      	ldr	r3, [pc, #340]	@ (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009756:	e010      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009758:	4b51      	ldr	r3, [pc, #324]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009764:	d106      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976c:	d102      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800976e:	4b4f      	ldr	r3, [pc, #316]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009772:	e002      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009778:	e235      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800977a:	e234      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800977c:	4b4c      	ldr	r3, [pc, #304]	@ (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009780:	e231      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009786:	e22e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800978c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009790:	430b      	orrs	r3, r1
 8009792:	f040 808f 	bne.w	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009796:	4b42      	ldr	r3, [pc, #264]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800979a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800979e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80097a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097a6:	d06b      	beq.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097ae:	d874      	bhi.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097b6:	d056      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80097b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097be:	d86c      	bhi.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80097c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097c6:	d03b      	beq.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097ce:	d864      	bhi.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d6:	d021      	beq.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097de:	d85c      	bhi.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80097e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80097e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ec:	d004      	beq.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80097ee:	e054      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80097f0:	f7fe fa4c 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
 80097f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097f6:	e1f6      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097f8:	4b29      	ldr	r3, [pc, #164]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009804:	d107      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009806:	f107 0318 	add.w	r3, r7, #24
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fa0a 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009814:	e1e7      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800981a:	e1e4      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800981c:	4b20      	ldr	r3, [pc, #128]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009828:	d107      	bne.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800982a:	f107 030c 	add.w	r3, r7, #12
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fb4c 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009838:	e1d5      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983e:	e1d2      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009840:	4b17      	ldr	r3, [pc, #92]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b04      	cmp	r3, #4
 800984a:	d109      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800984c:	4b14      	ldr	r3, [pc, #80]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	08db      	lsrs	r3, r3, #3
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	4a13      	ldr	r2, [pc, #76]	@ (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800985e:	e1c2      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009864:	e1bf      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009866:	4b0e      	ldr	r3, [pc, #56]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009872:	d102      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009874:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009878:	e1b5      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987e:	e1b2      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009880:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800988c:	d102      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800988e:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009892:	e1a8      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009898:	e1a5      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800989e:	e1a2      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098a0:	58024400 	.word	0x58024400
 80098a4:	03d09000 	.word	0x03d09000
 80098a8:	003d0900 	.word	0x003d0900
 80098ac:	017d7840 	.word	0x017d7840
 80098b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80098b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80098bc:	430b      	orrs	r3, r1
 80098be:	d173      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80098c0:	4b9c      	ldr	r3, [pc, #624]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d0:	d02f      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d8:	d863      	bhi.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80098da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d004      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e6:	d012      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80098e8:	e05b      	b.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ea:	4b92      	ldr	r3, [pc, #584]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098f6:	d107      	bne.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f8:	f107 0318 	add.w	r3, r7, #24
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f991 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009906:	e16e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009908:	2300      	movs	r3, #0
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990c:	e16b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800990e:	4b89      	ldr	r3, [pc, #548]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991a:	d107      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fad3 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800992a:	e15c      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009930:	e159      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009932:	4b80      	ldr	r3, [pc, #512]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009936:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800993a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800993c:	4b7d      	ldr	r3, [pc, #500]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b04      	cmp	r3, #4
 8009946:	d10c      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800994e:	4b79      	ldr	r3, [pc, #484]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	4a77      	ldr	r2, [pc, #476]	@ (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800995a:	fa22 f303 	lsr.w	r3, r2, r3
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009960:	e01e      	b.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009962:	4b74      	ldr	r3, [pc, #464]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800996a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800996e:	d106      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009976:	d102      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009978:	4b70      	ldr	r3, [pc, #448]	@ (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800997c:	e010      	b.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800997e:	4b6d      	ldr	r3, [pc, #436]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800998a:	d106      	bne.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800998c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009992:	d102      	bne.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009994:	4b6a      	ldr	r3, [pc, #424]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009998:	e002      	b.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800999e:	e122      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099a0:	e121      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a6:	e11e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80099b0:	430b      	orrs	r3, r1
 80099b2:	d133      	bne.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80099b4:	4b5f      	ldr	r3, [pc, #380]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80099c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ca:	d012      	beq.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80099cc:	e023      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ce:	4b59      	ldr	r3, [pc, #356]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099da:	d107      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fbc7 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ea:	e0fc      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f0:	e0f9      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099f2:	4b50      	ldr	r3, [pc, #320]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099fe:	d107      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a00:	f107 0318 	add.w	r3, r7, #24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 f90d 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a0e:	e0ea      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a14:	e0e7      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a1a:	e0e4      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a20:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a24:	430b      	orrs	r3, r1
 8009a26:	f040 808d 	bne.w	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a2a:	4b42      	ldr	r3, [pc, #264]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009a32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a3a:	d06b      	beq.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a42:	d874      	bhi.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d056      	beq.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d86c      	bhi.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a5a:	d03b      	beq.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a62:	d864      	bhi.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a6a:	d021      	beq.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a72:	d85c      	bhi.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a80:	d004      	beq.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009a82:	e054      	b.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a84:	f000 f8b8 	bl	8009bf8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a88:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a8a:	e0ac      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a8c:	4b29      	ldr	r3, [pc, #164]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a98:	d107      	bne.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a9a:	f107 0318 	add.w	r3, r7, #24
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 f8c0 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aa8:	e09d      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aae:	e09a      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ab0:	4b20      	ldr	r3, [pc, #128]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d107      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009abe:	f107 030c 	add.w	r3, r7, #12
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fa02 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009acc:	e08b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad2:	e088      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ad4:	4b17      	ldr	r3, [pc, #92]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d109      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae0:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	08db      	lsrs	r3, r3, #3
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	4a13      	ldr	r2, [pc, #76]	@ (8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
 8009af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af2:	e078      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009af8:	e075      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009afa:	4b0e      	ldr	r3, [pc, #56]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b06:	d102      	bne.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009b08:	4b0c      	ldr	r3, [pc, #48]	@ (8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b0c:	e06b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b12:	e068      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b14:	4b07      	ldr	r3, [pc, #28]	@ (8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b20:	d102      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009b22:	4b07      	ldr	r3, [pc, #28]	@ (8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b26:	e05e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2c:	e05b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b32:	e058      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b34:	58024400 	.word	0x58024400
 8009b38:	03d09000 	.word	0x03d09000
 8009b3c:	003d0900 	.word	0x003d0900
 8009b40:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b48:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	d148      	bne.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009b50:	4b27      	ldr	r3, [pc, #156]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b60:	d02a      	beq.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b68:	d838      	bhi.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b76:	d00d      	beq.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009b78:	e030      	b.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b86:	d102      	bne.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009b88:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b8c:	e02b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b92:	e028      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b94:	4b16      	ldr	r3, [pc, #88]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ba0:	d107      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fae4 	bl	800a174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bb0:	e019      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb6:	e016      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bc4:	d107      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc6:	f107 0318 	add.w	r3, r7, #24
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f82a 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd4:	e007      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bda:	e004      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be0:	e001      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3740      	adds	r7, #64	@ 0x40
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	58024400 	.word	0x58024400
 8009bf4:	017d7840 	.word	0x017d7840

08009bf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009bfc:	f7fe f816 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8009c00:	4602      	mov	r2, r0
 8009c02:	4b06      	ldr	r3, [pc, #24]	@ (8009c1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	091b      	lsrs	r3, r3, #4
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	4904      	ldr	r1, [pc, #16]	@ (8009c20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c0e:	5ccb      	ldrb	r3, [r1, r3]
 8009c10:	f003 031f 	and.w	r3, r3, #31
 8009c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	0800e404 	.word	0x0800e404

08009c24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b089      	sub	sp, #36	@ 0x24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c2c:	4ba1      	ldr	r3, [pc, #644]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	f003 0303 	and.w	r3, r3, #3
 8009c34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c36:	4b9f      	ldr	r3, [pc, #636]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3a:	0b1b      	lsrs	r3, r3, #12
 8009c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c42:	4b9c      	ldr	r3, [pc, #624]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	091b      	lsrs	r3, r3, #4
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009c4e:	4b99      	ldr	r3, [pc, #612]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c52:	08db      	lsrs	r3, r3, #3
 8009c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	fb02 f303 	mul.w	r3, r2, r3
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 8111 	beq.w	8009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	f000 8083 	beq.w	8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	f200 80a1 	bhi.w	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d056      	beq.n	8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c8e:	e099      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c90:	4b88      	ldr	r3, [pc, #544]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d02d      	beq.n	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c9c:	4b85      	ldr	r3, [pc, #532]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	08db      	lsrs	r3, r3, #3
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	4a84      	ldr	r2, [pc, #528]	@ (8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cf6:	e087      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d3a:	e065      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4e:	4b59      	ldr	r3, [pc, #356]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d7e:	e043      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d92:	4b48      	ldr	r3, [pc, #288]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dc2:	e021      	b.n	8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd6:	4b37      	ldr	r3, [pc, #220]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e08:	4b2a      	ldr	r3, [pc, #168]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0c:	0a5b      	lsrs	r3, r3, #9
 8009e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e2e:	ee17 2a90 	vmov	r2, s15
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e36:	4b1f      	ldr	r3, [pc, #124]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3a:	0c1b      	lsrs	r3, r3, #16
 8009e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e40:	ee07 3a90 	vmov	s15, r3
 8009e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5c:	ee17 2a90 	vmov	r2, s15
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009e64:	4b13      	ldr	r3, [pc, #76]	@ (8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e68:	0e1b      	lsrs	r3, r3, #24
 8009e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8a:	ee17 2a90 	vmov	r2, s15
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e92:	e008      	b.n	8009ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	609a      	str	r2, [r3, #8]
}
 8009ea6:	bf00      	nop
 8009ea8:	3724      	adds	r7, #36	@ 0x24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	58024400 	.word	0x58024400
 8009eb8:	03d09000 	.word	0x03d09000
 8009ebc:	46000000 	.word	0x46000000
 8009ec0:	4c742400 	.word	0x4c742400
 8009ec4:	4a742400 	.word	0x4a742400
 8009ec8:	4bbebc20 	.word	0x4bbebc20

08009ecc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b089      	sub	sp, #36	@ 0x24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ed4:	4ba1      	ldr	r3, [pc, #644]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009ede:	4b9f      	ldr	r3, [pc, #636]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee2:	0d1b      	lsrs	r3, r3, #20
 8009ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ee8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009eea:	4b9c      	ldr	r3, [pc, #624]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ef6:	4b99      	ldr	r3, [pc, #612]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efa:	08db      	lsrs	r3, r3, #3
 8009efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 8111 	beq.w	800a13c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	f000 8083 	beq.w	800a028 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	f200 80a1 	bhi.w	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d056      	beq.n	8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f36:	e099      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f38:	4b88      	ldr	r3, [pc, #544]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d02d      	beq.n	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f44:	4b85      	ldr	r3, [pc, #532]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	08db      	lsrs	r3, r3, #3
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	4a84      	ldr	r2, [pc, #528]	@ (800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f50:	fa22 f303 	lsr.w	r3, r2, r3
 8009f54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f9e:	e087      	b.n	800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fe2:	e065      	b.n	800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff6:	4b59      	ldr	r3, [pc, #356]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a006:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a026:	e043      	b.n	800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a032:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03a:	4b48      	ldr	r3, [pc, #288]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a06a:	e021      	b.n	800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	ee07 3a90 	vmov	s15, r3
 800a072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a076:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a07e:	4b37      	ldr	r3, [pc, #220]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a086:	ee07 3a90 	vmov	s15, r3
 800a08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a092:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a0b0:	4b2a      	ldr	r3, [pc, #168]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b4:	0a5b      	lsrs	r3, r3, #9
 800a0b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0d6:	ee17 2a90 	vmov	r2, s15
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a0de:	4b1f      	ldr	r3, [pc, #124]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e2:	0c1b      	lsrs	r3, r3, #16
 800a0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0e8:	ee07 3a90 	vmov	s15, r3
 800a0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a104:	ee17 2a90 	vmov	r2, s15
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a10c:	4b13      	ldr	r3, [pc, #76]	@ (800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a110:	0e1b      	lsrs	r3, r3, #24
 800a112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a122:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a126:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a12e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a132:	ee17 2a90 	vmov	r2, s15
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a13a:	e008      	b.n	800a14e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	609a      	str	r2, [r3, #8]
}
 800a14e:	bf00      	nop
 800a150:	3724      	adds	r7, #36	@ 0x24
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400
 800a160:	03d09000 	.word	0x03d09000
 800a164:	46000000 	.word	0x46000000
 800a168:	4c742400 	.word	0x4c742400
 800a16c:	4a742400 	.word	0x4a742400
 800a170:	4bbebc20 	.word	0x4bbebc20

0800a174 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a174:	b480      	push	{r7}
 800a176:	b089      	sub	sp, #36	@ 0x24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a17c:	4ba0      	ldr	r3, [pc, #640]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a180:	f003 0303 	and.w	r3, r3, #3
 800a184:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a186:	4b9e      	ldr	r3, [pc, #632]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18a:	091b      	lsrs	r3, r3, #4
 800a18c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a190:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a192:	4b9b      	ldr	r3, [pc, #620]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a19c:	4b98      	ldr	r3, [pc, #608]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a0:	08db      	lsrs	r3, r3, #3
 800a1a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	fb02 f303 	mul.w	r3, r2, r3
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8111 	beq.w	800a3e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	f000 8083 	beq.w	800a2ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	f200 80a1 	bhi.w	800a312 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d056      	beq.n	800a28a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a1dc:	e099      	b.n	800a312 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1de:	4b88      	ldr	r3, [pc, #544]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d02d      	beq.n	800a246 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ea:	4b85      	ldr	r3, [pc, #532]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	08db      	lsrs	r3, r3, #3
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	4a83      	ldr	r2, [pc, #524]	@ (800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a214:	4b7a      	ldr	r3, [pc, #488]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21c:	ee07 3a90 	vmov	s15, r3
 800a220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a224:	ed97 6a03 	vldr	s12, [r7, #12]
 800a228:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a22c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a240:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a244:	e087      	b.n	800a356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	ee07 3a90 	vmov	s15, r3
 800a24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a250:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a258:	4b69      	ldr	r3, [pc, #420]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a260:	ee07 3a90 	vmov	s15, r3
 800a264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a268:	ed97 6a03 	vldr	s12, [r7, #12]
 800a26c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a27c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a280:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a284:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a288:	e065      	b.n	800a356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a294:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a410 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a29c:	4b58      	ldr	r3, [pc, #352]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2b0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2cc:	e043      	b.n	800a356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a414 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a2dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e0:	4b47      	ldr	r3, [pc, #284]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e8:	ee07 3a90 	vmov	s15, r3
 800a2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a310:	e021      	b.n	800a356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	ee07 3a90 	vmov	s15, r3
 800a318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a40c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a324:	4b36      	ldr	r3, [pc, #216]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32c:	ee07 3a90 	vmov	s15, r3
 800a330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a334:	ed97 6a03 	vldr	s12, [r7, #12]
 800a338:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a33c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a350:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a354:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a356:	4b2a      	ldr	r3, [pc, #168]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a35a:	0a5b      	lsrs	r3, r3, #9
 800a35c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a360:	ee07 3a90 	vmov	s15, r3
 800a364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a36c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a370:	edd7 6a07 	vldr	s13, [r7, #28]
 800a374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a37c:	ee17 2a90 	vmov	r2, s15
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a384:	4b1e      	ldr	r3, [pc, #120]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a388:	0c1b      	lsrs	r3, r3, #16
 800a38a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a39a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a39e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3aa:	ee17 2a90 	vmov	r2, s15
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a3b2:	4b13      	ldr	r3, [pc, #76]	@ (800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b6:	0e1b      	lsrs	r3, r3, #24
 800a3b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d8:	ee17 2a90 	vmov	r2, s15
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a3e0:	e008      	b.n	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	609a      	str	r2, [r3, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	3724      	adds	r7, #36	@ 0x24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	58024400 	.word	0x58024400
 800a404:	03d09000 	.word	0x03d09000
 800a408:	46000000 	.word	0x46000000
 800a40c:	4c742400 	.word	0x4c742400
 800a410:	4a742400 	.word	0x4a742400
 800a414:	4bbebc20 	.word	0x4bbebc20

0800a418 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a426:	4b53      	ldr	r3, [pc, #332]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d101      	bne.n	800a436 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e099      	b.n	800a56a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a436:	4b4f      	ldr	r3, [pc, #316]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a4e      	ldr	r2, [pc, #312]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a43c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a442:	f7f9 fded 	bl	8004020 <HAL_GetTick>
 800a446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a448:	e008      	b.n	800a45c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a44a:	f7f9 fde9 	bl	8004020 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b02      	cmp	r3, #2
 800a456:	d901      	bls.n	800a45c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e086      	b.n	800a56a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a45c:	4b45      	ldr	r3, [pc, #276]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f0      	bne.n	800a44a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a468:	4b42      	ldr	r3, [pc, #264]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	031b      	lsls	r3, r3, #12
 800a476:	493f      	ldr	r1, [pc, #252]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	3b01      	subs	r3, #1
 800a482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	025b      	lsls	r3, r3, #9
 800a48e:	b29b      	uxth	r3, r3
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	3b01      	subs	r3, #1
 800a498:	041b      	lsls	r3, r3, #16
 800a49a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	061b      	lsls	r3, r3, #24
 800a4a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a4ac:	4931      	ldr	r1, [pc, #196]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a4b2:	4b30      	ldr	r3, [pc, #192]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	492d      	ldr	r1, [pc, #180]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a4c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c8:	f023 0220 	bic.w	r2, r3, #32
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	4928      	ldr	r1, [pc, #160]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a4d6:	4b27      	ldr	r3, [pc, #156]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4da:	4a26      	ldr	r2, [pc, #152]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4dc:	f023 0310 	bic.w	r3, r3, #16
 800a4e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a4e2:	4b24      	ldr	r3, [pc, #144]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4e6:	4b24      	ldr	r3, [pc, #144]	@ (800a578 <RCCEx_PLL2_Config+0x160>)
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	69d2      	ldr	r2, [r2, #28]
 800a4ee:	00d2      	lsls	r2, r2, #3
 800a4f0:	4920      	ldr	r1, [pc, #128]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a4f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a4fc:	f043 0310 	orr.w	r3, r3, #16
 800a500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d106      	bne.n	800a516 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a508:	4b1a      	ldr	r3, [pc, #104]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50c:	4a19      	ldr	r2, [pc, #100]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a50e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a514:	e00f      	b.n	800a536 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d106      	bne.n	800a52a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a51c:	4b15      	ldr	r3, [pc, #84]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	4a14      	ldr	r2, [pc, #80]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a528:	e005      	b.n	800a536 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a52a:	4b12      	ldr	r3, [pc, #72]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52e:	4a11      	ldr	r2, [pc, #68]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a530:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a534:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a536:	4b0f      	ldr	r3, [pc, #60]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a0e      	ldr	r2, [pc, #56]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a53c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a542:	f7f9 fd6d 	bl	8004020 <HAL_GetTick>
 800a546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a548:	e008      	b.n	800a55c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a54a:	f7f9 fd69 	bl	8004020 <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d901      	bls.n	800a55c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e006      	b.n	800a56a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a55c:	4b05      	ldr	r3, [pc, #20]	@ (800a574 <RCCEx_PLL2_Config+0x15c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0f0      	beq.n	800a54a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	58024400 	.word	0x58024400
 800a578:	ffff0007 	.word	0xffff0007

0800a57c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a58a:	4b53      	ldr	r3, [pc, #332]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58e:	f003 0303 	and.w	r3, r3, #3
 800a592:	2b03      	cmp	r3, #3
 800a594:	d101      	bne.n	800a59a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e099      	b.n	800a6ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a59a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a4e      	ldr	r2, [pc, #312]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a5a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5a6:	f7f9 fd3b 	bl	8004020 <HAL_GetTick>
 800a5aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5ac:	e008      	b.n	800a5c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5ae:	f7f9 fd37 	bl	8004020 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d901      	bls.n	800a5c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e086      	b.n	800a6ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5c0:	4b45      	ldr	r3, [pc, #276]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f0      	bne.n	800a5ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a5cc:	4b42      	ldr	r3, [pc, #264]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	051b      	lsls	r3, r3, #20
 800a5da:	493f      	ldr	r1, [pc, #252]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	628b      	str	r3, [r1, #40]	@ 0x28
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	025b      	lsls	r3, r3, #9
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	041b      	lsls	r3, r3, #16
 800a5fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	3b01      	subs	r3, #1
 800a60a:	061b      	lsls	r3, r3, #24
 800a60c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a610:	4931      	ldr	r1, [pc, #196]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a612:	4313      	orrs	r3, r2
 800a614:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a616:	4b30      	ldr	r3, [pc, #192]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	492d      	ldr	r1, [pc, #180]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a624:	4313      	orrs	r3, r2
 800a626:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a628:	4b2b      	ldr	r3, [pc, #172]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	4928      	ldr	r1, [pc, #160]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a636:	4313      	orrs	r3, r2
 800a638:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a63a:	4b27      	ldr	r3, [pc, #156]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63e:	4a26      	ldr	r2, [pc, #152]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a644:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a646:	4b24      	ldr	r3, [pc, #144]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a64a:	4b24      	ldr	r3, [pc, #144]	@ (800a6dc <RCCEx_PLL3_Config+0x160>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	69d2      	ldr	r2, [r2, #28]
 800a652:	00d2      	lsls	r2, r2, #3
 800a654:	4920      	ldr	r1, [pc, #128]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a656:	4313      	orrs	r3, r2
 800a658:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a65a:	4b1f      	ldr	r3, [pc, #124]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65e:	4a1e      	ldr	r2, [pc, #120]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a664:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a66c:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a670:	4a19      	ldr	r2, [pc, #100]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a678:	e00f      	b.n	800a69a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d106      	bne.n	800a68e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a680:	4b15      	ldr	r3, [pc, #84]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a684:	4a14      	ldr	r2, [pc, #80]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a686:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a68a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a68c:	e005      	b.n	800a69a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a68e:	4b12      	ldr	r3, [pc, #72]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a692:	4a11      	ldr	r2, [pc, #68]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a694:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a698:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a69a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a0e      	ldr	r2, [pc, #56]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a6a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6a6:	f7f9 fcbb 	bl	8004020 <HAL_GetTick>
 800a6aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6ac:	e008      	b.n	800a6c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6ae:	f7f9 fcb7 	bl	8004020 <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d901      	bls.n	800a6c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e006      	b.n	800a6ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6c0:	4b05      	ldr	r3, [pc, #20]	@ (800a6d8 <RCCEx_PLL3_Config+0x15c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0f0      	beq.n	800a6ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	ffff0007 	.word	0xffff0007

0800a6e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e042      	b.n	800a778 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7f9 fa21 	bl	8003b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2224      	movs	r2, #36	@ 0x24
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0201 	bic.w	r2, r2, #1
 800a720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fee6 	bl	800b4fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f97b 	bl	800aa2c <UART_SetConfig>
 800a736:	4603      	mov	r3, r0
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e01b      	b.n	800a778 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a74e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689a      	ldr	r2, [r3, #8]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a75e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f042 0201 	orr.w	r2, r2, #1
 800a76e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 ff65 	bl	800b640 <UART_CheckIdleState>
 800a776:	4603      	mov	r3, r0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b08a      	sub	sp, #40	@ 0x28
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	4613      	mov	r3, r2
 800a78e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a796:	2b20      	cmp	r3, #32
 800a798:	d17b      	bne.n	800a892 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <HAL_UART_Transmit+0x26>
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e074      	b.n	800a894 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2221      	movs	r2, #33	@ 0x21
 800a7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7ba:	f7f9 fc31 	bl	8004020 <HAL_GetTick>
 800a7be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	88fa      	ldrh	r2, [r7, #6]
 800a7c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7d8:	d108      	bne.n	800a7ec <HAL_UART_Transmit+0x6c>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d104      	bne.n	800a7ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	61bb      	str	r3, [r7, #24]
 800a7ea:	e003      	b.n	800a7f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a7f4:	e030      	b.n	800a858 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2180      	movs	r1, #128	@ 0x80
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 ffc7 	bl	800b794 <UART_WaitOnFlagUntilTimeout>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e03d      	b.n	800a894 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10b      	bne.n	800a836 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a82c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	3302      	adds	r3, #2
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	e007      	b.n	800a846 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	3301      	adds	r3, #1
 800a844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	3b01      	subs	r3, #1
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a85e:	b29b      	uxth	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1c8      	bne.n	800a7f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2200      	movs	r2, #0
 800a86c:	2140      	movs	r1, #64	@ 0x40
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 ff90 	bl	800b794 <UART_WaitOnFlagUntilTimeout>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e006      	b.n	800a894 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	e000      	b.n	800a894 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a892:	2302      	movs	r3, #2
  }
}
 800a894:	4618      	mov	r0, r3
 800a896:	3720      	adds	r7, #32
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	@ 0x28
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	f040 80b5 	bne.w	800aa22 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <HAL_UART_Receive+0x28>
 800a8be:	88fb      	ldrh	r3, [r7, #6]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e0ad      	b.n	800aa24 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2222      	movs	r2, #34	@ 0x22
 800a8d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8de:	f7f9 fb9f 	bl	8004020 <HAL_GetTick>
 800a8e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	88fa      	ldrh	r2, [r7, #6]
 800a8e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	88fa      	ldrh	r2, [r7, #6]
 800a8f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fc:	d10e      	bne.n	800a91c <HAL_UART_Receive+0x80>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d105      	bne.n	800a912 <HAL_UART_Receive+0x76>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a90c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a910:	e02d      	b.n	800a96e <HAL_UART_Receive+0xd2>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	22ff      	movs	r2, #255	@ 0xff
 800a916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a91a:	e028      	b.n	800a96e <HAL_UART_Receive+0xd2>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10d      	bne.n	800a940 <HAL_UART_Receive+0xa4>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <HAL_UART_Receive+0x9a>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	22ff      	movs	r2, #255	@ 0xff
 800a930:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a934:	e01b      	b.n	800a96e <HAL_UART_Receive+0xd2>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	227f      	movs	r2, #127	@ 0x7f
 800a93a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a93e:	e016      	b.n	800a96e <HAL_UART_Receive+0xd2>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a948:	d10d      	bne.n	800a966 <HAL_UART_Receive+0xca>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d104      	bne.n	800a95c <HAL_UART_Receive+0xc0>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	227f      	movs	r2, #127	@ 0x7f
 800a956:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a95a:	e008      	b.n	800a96e <HAL_UART_Receive+0xd2>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	223f      	movs	r2, #63	@ 0x3f
 800a960:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a964:	e003      	b.n	800a96e <HAL_UART_Receive+0xd2>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a974:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a97e:	d108      	bne.n	800a992 <HAL_UART_Receive+0xf6>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	61bb      	str	r3, [r7, #24]
 800a990:	e003      	b.n	800a99a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a99a:	e036      	b.n	800aa0a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2120      	movs	r1, #32
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 fef4 	bl	800b794 <UART_WaitOnFlagUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d005      	beq.n	800a9be <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e032      	b.n	800aa24 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	8a7b      	ldrh	r3, [r7, #18]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	61bb      	str	r3, [r7, #24]
 800a9dc:	e00c      	b.n	800a9f8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	8a7b      	ldrh	r3, [r7, #18]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1c2      	bne.n	800a99c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e000      	b.n	800aa24 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800aa22:	2302      	movs	r3, #2
  }
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3720      	adds	r7, #32
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa30:	b092      	sub	sp, #72	@ 0x48
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4bbe      	ldr	r3, [pc, #760]	@ (800ad54 <UART_SetConfig+0x328>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	6812      	ldr	r2, [r2, #0]
 800aa62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa64:	430b      	orrs	r3, r1
 800aa66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	68da      	ldr	r2, [r3, #12]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4ab3      	ldr	r2, [pc, #716]	@ (800ad58 <UART_SetConfig+0x32c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d004      	beq.n	800aa98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa94:	4313      	orrs	r3, r2
 800aa96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689a      	ldr	r2, [r3, #8]
 800aa9e:	4baf      	ldr	r3, [pc, #700]	@ (800ad5c <UART_SetConfig+0x330>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	6812      	ldr	r2, [r2, #0]
 800aaa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab2:	f023 010f 	bic.w	r1, r3, #15
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	430a      	orrs	r2, r1
 800aac0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4aa6      	ldr	r2, [pc, #664]	@ (800ad60 <UART_SetConfig+0x334>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d177      	bne.n	800abbc <UART_SetConfig+0x190>
 800aacc:	4ba5      	ldr	r3, [pc, #660]	@ (800ad64 <UART_SetConfig+0x338>)
 800aace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aad4:	2b28      	cmp	r3, #40	@ 0x28
 800aad6:	d86d      	bhi.n	800abb4 <UART_SetConfig+0x188>
 800aad8:	a201      	add	r2, pc, #4	@ (adr r2, 800aae0 <UART_SetConfig+0xb4>)
 800aada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aade:	bf00      	nop
 800aae0:	0800ab85 	.word	0x0800ab85
 800aae4:	0800abb5 	.word	0x0800abb5
 800aae8:	0800abb5 	.word	0x0800abb5
 800aaec:	0800abb5 	.word	0x0800abb5
 800aaf0:	0800abb5 	.word	0x0800abb5
 800aaf4:	0800abb5 	.word	0x0800abb5
 800aaf8:	0800abb5 	.word	0x0800abb5
 800aafc:	0800abb5 	.word	0x0800abb5
 800ab00:	0800ab8d 	.word	0x0800ab8d
 800ab04:	0800abb5 	.word	0x0800abb5
 800ab08:	0800abb5 	.word	0x0800abb5
 800ab0c:	0800abb5 	.word	0x0800abb5
 800ab10:	0800abb5 	.word	0x0800abb5
 800ab14:	0800abb5 	.word	0x0800abb5
 800ab18:	0800abb5 	.word	0x0800abb5
 800ab1c:	0800abb5 	.word	0x0800abb5
 800ab20:	0800ab95 	.word	0x0800ab95
 800ab24:	0800abb5 	.word	0x0800abb5
 800ab28:	0800abb5 	.word	0x0800abb5
 800ab2c:	0800abb5 	.word	0x0800abb5
 800ab30:	0800abb5 	.word	0x0800abb5
 800ab34:	0800abb5 	.word	0x0800abb5
 800ab38:	0800abb5 	.word	0x0800abb5
 800ab3c:	0800abb5 	.word	0x0800abb5
 800ab40:	0800ab9d 	.word	0x0800ab9d
 800ab44:	0800abb5 	.word	0x0800abb5
 800ab48:	0800abb5 	.word	0x0800abb5
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800abb5 	.word	0x0800abb5
 800ab54:	0800abb5 	.word	0x0800abb5
 800ab58:	0800abb5 	.word	0x0800abb5
 800ab5c:	0800abb5 	.word	0x0800abb5
 800ab60:	0800aba5 	.word	0x0800aba5
 800ab64:	0800abb5 	.word	0x0800abb5
 800ab68:	0800abb5 	.word	0x0800abb5
 800ab6c:	0800abb5 	.word	0x0800abb5
 800ab70:	0800abb5 	.word	0x0800abb5
 800ab74:	0800abb5 	.word	0x0800abb5
 800ab78:	0800abb5 	.word	0x0800abb5
 800ab7c:	0800abb5 	.word	0x0800abb5
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	2301      	movs	r3, #1
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8a:	e222      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab92:	e21e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ab94:	2308      	movs	r3, #8
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e21a      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e216      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aba4:	2320      	movs	r3, #32
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e212      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800abac:	2340      	movs	r3, #64	@ 0x40
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e20e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800abb4:	2380      	movs	r3, #128	@ 0x80
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e20a      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a69      	ldr	r2, [pc, #420]	@ (800ad68 <UART_SetConfig+0x33c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d130      	bne.n	800ac28 <UART_SetConfig+0x1fc>
 800abc6:	4b67      	ldr	r3, [pc, #412]	@ (800ad64 <UART_SetConfig+0x338>)
 800abc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	2b05      	cmp	r3, #5
 800abd0:	d826      	bhi.n	800ac20 <UART_SetConfig+0x1f4>
 800abd2:	a201      	add	r2, pc, #4	@ (adr r2, 800abd8 <UART_SetConfig+0x1ac>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800abf1 	.word	0x0800abf1
 800abdc:	0800abf9 	.word	0x0800abf9
 800abe0:	0800ac01 	.word	0x0800ac01
 800abe4:	0800ac09 	.word	0x0800ac09
 800abe8:	0800ac11 	.word	0x0800ac11
 800abec:	0800ac19 	.word	0x0800ac19
 800abf0:	2300      	movs	r3, #0
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf6:	e1ec      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800abf8:	2304      	movs	r3, #4
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfe:	e1e8      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac00:	2308      	movs	r3, #8
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e1e4      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac08:	2310      	movs	r3, #16
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e1e0      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac10:	2320      	movs	r3, #32
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e1dc      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac18:	2340      	movs	r3, #64	@ 0x40
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e1d8      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac20:	2380      	movs	r3, #128	@ 0x80
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e1d4      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a4f      	ldr	r2, [pc, #316]	@ (800ad6c <UART_SetConfig+0x340>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d130      	bne.n	800ac94 <UART_SetConfig+0x268>
 800ac32:	4b4c      	ldr	r3, [pc, #304]	@ (800ad64 <UART_SetConfig+0x338>)
 800ac34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b05      	cmp	r3, #5
 800ac3c:	d826      	bhi.n	800ac8c <UART_SetConfig+0x260>
 800ac3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac44 <UART_SetConfig+0x218>)
 800ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac44:	0800ac5d 	.word	0x0800ac5d
 800ac48:	0800ac65 	.word	0x0800ac65
 800ac4c:	0800ac6d 	.word	0x0800ac6d
 800ac50:	0800ac75 	.word	0x0800ac75
 800ac54:	0800ac7d 	.word	0x0800ac7d
 800ac58:	0800ac85 	.word	0x0800ac85
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac62:	e1b6      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac64:	2304      	movs	r3, #4
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e1b2      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac6c:	2308      	movs	r3, #8
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e1ae      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac74:	2310      	movs	r3, #16
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e1aa      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac7c:	2320      	movs	r3, #32
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac82:	e1a6      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac84:	2340      	movs	r3, #64	@ 0x40
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e1a2      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac8c:	2380      	movs	r3, #128	@ 0x80
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e19e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a35      	ldr	r2, [pc, #212]	@ (800ad70 <UART_SetConfig+0x344>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d130      	bne.n	800ad00 <UART_SetConfig+0x2d4>
 800ac9e:	4b31      	ldr	r3, [pc, #196]	@ (800ad64 <UART_SetConfig+0x338>)
 800aca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aca2:	f003 0307 	and.w	r3, r3, #7
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	d826      	bhi.n	800acf8 <UART_SetConfig+0x2cc>
 800acaa:	a201      	add	r2, pc, #4	@ (adr r2, 800acb0 <UART_SetConfig+0x284>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800acc9 	.word	0x0800acc9
 800acb4:	0800acd1 	.word	0x0800acd1
 800acb8:	0800acd9 	.word	0x0800acd9
 800acbc:	0800ace1 	.word	0x0800ace1
 800acc0:	0800ace9 	.word	0x0800ace9
 800acc4:	0800acf1 	.word	0x0800acf1
 800acc8:	2300      	movs	r3, #0
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e180      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800acd0:	2304      	movs	r3, #4
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e17c      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800acd8:	2308      	movs	r3, #8
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e178      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ace0:	2310      	movs	r3, #16
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e174      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ace8:	2320      	movs	r3, #32
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e170      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800acf0:	2340      	movs	r3, #64	@ 0x40
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e16c      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800acf8:	2380      	movs	r3, #128	@ 0x80
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e168      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a1b      	ldr	r2, [pc, #108]	@ (800ad74 <UART_SetConfig+0x348>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d142      	bne.n	800ad90 <UART_SetConfig+0x364>
 800ad0a:	4b16      	ldr	r3, [pc, #88]	@ (800ad64 <UART_SetConfig+0x338>)
 800ad0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad0e:	f003 0307 	and.w	r3, r3, #7
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d838      	bhi.n	800ad88 <UART_SetConfig+0x35c>
 800ad16:	a201      	add	r2, pc, #4	@ (adr r2, 800ad1c <UART_SetConfig+0x2f0>)
 800ad18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1c:	0800ad35 	.word	0x0800ad35
 800ad20:	0800ad3d 	.word	0x0800ad3d
 800ad24:	0800ad45 	.word	0x0800ad45
 800ad28:	0800ad4d 	.word	0x0800ad4d
 800ad2c:	0800ad79 	.word	0x0800ad79
 800ad30:	0800ad81 	.word	0x0800ad81
 800ad34:	2300      	movs	r3, #0
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e14a      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad3c:	2304      	movs	r3, #4
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e146      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad44:	2308      	movs	r3, #8
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e142      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e13e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad54:	cfff69f3 	.word	0xcfff69f3
 800ad58:	58000c00 	.word	0x58000c00
 800ad5c:	11fff4ff 	.word	0x11fff4ff
 800ad60:	40011000 	.word	0x40011000
 800ad64:	58024400 	.word	0x58024400
 800ad68:	40004400 	.word	0x40004400
 800ad6c:	40004800 	.word	0x40004800
 800ad70:	40004c00 	.word	0x40004c00
 800ad74:	40005000 	.word	0x40005000
 800ad78:	2320      	movs	r3, #32
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e128      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad80:	2340      	movs	r3, #64	@ 0x40
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e124      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad88:	2380      	movs	r3, #128	@ 0x80
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e120      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4acb      	ldr	r2, [pc, #812]	@ (800b0c4 <UART_SetConfig+0x698>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d176      	bne.n	800ae88 <UART_SetConfig+0x45c>
 800ad9a:	4bcb      	ldr	r3, [pc, #812]	@ (800b0c8 <UART_SetConfig+0x69c>)
 800ad9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ada2:	2b28      	cmp	r3, #40	@ 0x28
 800ada4:	d86c      	bhi.n	800ae80 <UART_SetConfig+0x454>
 800ada6:	a201      	add	r2, pc, #4	@ (adr r2, 800adac <UART_SetConfig+0x380>)
 800ada8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adac:	0800ae51 	.word	0x0800ae51
 800adb0:	0800ae81 	.word	0x0800ae81
 800adb4:	0800ae81 	.word	0x0800ae81
 800adb8:	0800ae81 	.word	0x0800ae81
 800adbc:	0800ae81 	.word	0x0800ae81
 800adc0:	0800ae81 	.word	0x0800ae81
 800adc4:	0800ae81 	.word	0x0800ae81
 800adc8:	0800ae81 	.word	0x0800ae81
 800adcc:	0800ae59 	.word	0x0800ae59
 800add0:	0800ae81 	.word	0x0800ae81
 800add4:	0800ae81 	.word	0x0800ae81
 800add8:	0800ae81 	.word	0x0800ae81
 800addc:	0800ae81 	.word	0x0800ae81
 800ade0:	0800ae81 	.word	0x0800ae81
 800ade4:	0800ae81 	.word	0x0800ae81
 800ade8:	0800ae81 	.word	0x0800ae81
 800adec:	0800ae61 	.word	0x0800ae61
 800adf0:	0800ae81 	.word	0x0800ae81
 800adf4:	0800ae81 	.word	0x0800ae81
 800adf8:	0800ae81 	.word	0x0800ae81
 800adfc:	0800ae81 	.word	0x0800ae81
 800ae00:	0800ae81 	.word	0x0800ae81
 800ae04:	0800ae81 	.word	0x0800ae81
 800ae08:	0800ae81 	.word	0x0800ae81
 800ae0c:	0800ae69 	.word	0x0800ae69
 800ae10:	0800ae81 	.word	0x0800ae81
 800ae14:	0800ae81 	.word	0x0800ae81
 800ae18:	0800ae81 	.word	0x0800ae81
 800ae1c:	0800ae81 	.word	0x0800ae81
 800ae20:	0800ae81 	.word	0x0800ae81
 800ae24:	0800ae81 	.word	0x0800ae81
 800ae28:	0800ae81 	.word	0x0800ae81
 800ae2c:	0800ae71 	.word	0x0800ae71
 800ae30:	0800ae81 	.word	0x0800ae81
 800ae34:	0800ae81 	.word	0x0800ae81
 800ae38:	0800ae81 	.word	0x0800ae81
 800ae3c:	0800ae81 	.word	0x0800ae81
 800ae40:	0800ae81 	.word	0x0800ae81
 800ae44:	0800ae81 	.word	0x0800ae81
 800ae48:	0800ae81 	.word	0x0800ae81
 800ae4c:	0800ae79 	.word	0x0800ae79
 800ae50:	2301      	movs	r3, #1
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e0bc      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae58:	2304      	movs	r3, #4
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e0b8      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae60:	2308      	movs	r3, #8
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e0b4      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e0b0      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae70:	2320      	movs	r3, #32
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e0ac      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae78:	2340      	movs	r3, #64	@ 0x40
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7e:	e0a8      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae80:	2380      	movs	r3, #128	@ 0x80
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae86:	e0a4      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a8f      	ldr	r2, [pc, #572]	@ (800b0cc <UART_SetConfig+0x6a0>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d130      	bne.n	800aef4 <UART_SetConfig+0x4c8>
 800ae92:	4b8d      	ldr	r3, [pc, #564]	@ (800b0c8 <UART_SetConfig+0x69c>)
 800ae94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae96:	f003 0307 	and.w	r3, r3, #7
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d826      	bhi.n	800aeec <UART_SetConfig+0x4c0>
 800ae9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aea4 <UART_SetConfig+0x478>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aebd 	.word	0x0800aebd
 800aea8:	0800aec5 	.word	0x0800aec5
 800aeac:	0800aecd 	.word	0x0800aecd
 800aeb0:	0800aed5 	.word	0x0800aed5
 800aeb4:	0800aedd 	.word	0x0800aedd
 800aeb8:	0800aee5 	.word	0x0800aee5
 800aebc:	2300      	movs	r3, #0
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec2:	e086      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aec4:	2304      	movs	r3, #4
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeca:	e082      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aecc:	2308      	movs	r3, #8
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e07e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aed4:	2310      	movs	r3, #16
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e07a      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aedc:	2320      	movs	r3, #32
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e076      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aee4:	2340      	movs	r3, #64	@ 0x40
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e072      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aeec:	2380      	movs	r3, #128	@ 0x80
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e06e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a75      	ldr	r2, [pc, #468]	@ (800b0d0 <UART_SetConfig+0x6a4>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d130      	bne.n	800af60 <UART_SetConfig+0x534>
 800aefe:	4b72      	ldr	r3, [pc, #456]	@ (800b0c8 <UART_SetConfig+0x69c>)
 800af00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b05      	cmp	r3, #5
 800af08:	d826      	bhi.n	800af58 <UART_SetConfig+0x52c>
 800af0a:	a201      	add	r2, pc, #4	@ (adr r2, 800af10 <UART_SetConfig+0x4e4>)
 800af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af10:	0800af29 	.word	0x0800af29
 800af14:	0800af31 	.word	0x0800af31
 800af18:	0800af39 	.word	0x0800af39
 800af1c:	0800af41 	.word	0x0800af41
 800af20:	0800af49 	.word	0x0800af49
 800af24:	0800af51 	.word	0x0800af51
 800af28:	2300      	movs	r3, #0
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2e:	e050      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af30:	2304      	movs	r3, #4
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e04c      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af38:	2308      	movs	r3, #8
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3e:	e048      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af40:	2310      	movs	r3, #16
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af46:	e044      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af48:	2320      	movs	r3, #32
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4e:	e040      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af50:	2340      	movs	r3, #64	@ 0x40
 800af52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af56:	e03c      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af58:	2380      	movs	r3, #128	@ 0x80
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e038      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a5b      	ldr	r2, [pc, #364]	@ (800b0d4 <UART_SetConfig+0x6a8>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d130      	bne.n	800afcc <UART_SetConfig+0x5a0>
 800af6a:	4b57      	ldr	r3, [pc, #348]	@ (800b0c8 <UART_SetConfig+0x69c>)
 800af6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	2b05      	cmp	r3, #5
 800af74:	d826      	bhi.n	800afc4 <UART_SetConfig+0x598>
 800af76:	a201      	add	r2, pc, #4	@ (adr r2, 800af7c <UART_SetConfig+0x550>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800af95 	.word	0x0800af95
 800af80:	0800af9d 	.word	0x0800af9d
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800afad 	.word	0x0800afad
 800af8c:	0800afb5 	.word	0x0800afb5
 800af90:	0800afbd 	.word	0x0800afbd
 800af94:	2302      	movs	r3, #2
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e01a      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800af9c:	2304      	movs	r3, #4
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e016      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800afa4:	2308      	movs	r3, #8
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e012      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800afac:	2310      	movs	r3, #16
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e00e      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800afb4:	2320      	movs	r3, #32
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afba:	e00a      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800afbc:	2340      	movs	r3, #64	@ 0x40
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc2:	e006      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800afc4:	2380      	movs	r3, #128	@ 0x80
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e002      	b.n	800afd2 <UART_SetConfig+0x5a6>
 800afcc:	2380      	movs	r3, #128	@ 0x80
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a3f      	ldr	r2, [pc, #252]	@ (800b0d4 <UART_SetConfig+0x6a8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	f040 80f8 	bne.w	800b1ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	dc46      	bgt.n	800b074 <UART_SetConfig+0x648>
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	f2c0 8082 	blt.w	800b0f0 <UART_SetConfig+0x6c4>
 800afec:	3b02      	subs	r3, #2
 800afee:	2b1e      	cmp	r3, #30
 800aff0:	d87e      	bhi.n	800b0f0 <UART_SetConfig+0x6c4>
 800aff2:	a201      	add	r2, pc, #4	@ (adr r2, 800aff8 <UART_SetConfig+0x5cc>)
 800aff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff8:	0800b07b 	.word	0x0800b07b
 800affc:	0800b0f1 	.word	0x0800b0f1
 800b000:	0800b083 	.word	0x0800b083
 800b004:	0800b0f1 	.word	0x0800b0f1
 800b008:	0800b0f1 	.word	0x0800b0f1
 800b00c:	0800b0f1 	.word	0x0800b0f1
 800b010:	0800b093 	.word	0x0800b093
 800b014:	0800b0f1 	.word	0x0800b0f1
 800b018:	0800b0f1 	.word	0x0800b0f1
 800b01c:	0800b0f1 	.word	0x0800b0f1
 800b020:	0800b0f1 	.word	0x0800b0f1
 800b024:	0800b0f1 	.word	0x0800b0f1
 800b028:	0800b0f1 	.word	0x0800b0f1
 800b02c:	0800b0f1 	.word	0x0800b0f1
 800b030:	0800b0a3 	.word	0x0800b0a3
 800b034:	0800b0f1 	.word	0x0800b0f1
 800b038:	0800b0f1 	.word	0x0800b0f1
 800b03c:	0800b0f1 	.word	0x0800b0f1
 800b040:	0800b0f1 	.word	0x0800b0f1
 800b044:	0800b0f1 	.word	0x0800b0f1
 800b048:	0800b0f1 	.word	0x0800b0f1
 800b04c:	0800b0f1 	.word	0x0800b0f1
 800b050:	0800b0f1 	.word	0x0800b0f1
 800b054:	0800b0f1 	.word	0x0800b0f1
 800b058:	0800b0f1 	.word	0x0800b0f1
 800b05c:	0800b0f1 	.word	0x0800b0f1
 800b060:	0800b0f1 	.word	0x0800b0f1
 800b064:	0800b0f1 	.word	0x0800b0f1
 800b068:	0800b0f1 	.word	0x0800b0f1
 800b06c:	0800b0f1 	.word	0x0800b0f1
 800b070:	0800b0e3 	.word	0x0800b0e3
 800b074:	2b40      	cmp	r3, #64	@ 0x40
 800b076:	d037      	beq.n	800b0e8 <UART_SetConfig+0x6bc>
 800b078:	e03a      	b.n	800b0f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b07a:	f7fe fdbd 	bl	8009bf8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b07e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b080:	e03c      	b.n	800b0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fdcc 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b090:	e034      	b.n	800b0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b092:	f107 0318 	add.w	r3, r7, #24
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe ff18 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a0:	e02c      	b.n	800b0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0a2:	4b09      	ldr	r3, [pc, #36]	@ (800b0c8 <UART_SetConfig+0x69c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d016      	beq.n	800b0dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0ae:	4b06      	ldr	r3, [pc, #24]	@ (800b0c8 <UART_SetConfig+0x69c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	08db      	lsrs	r3, r3, #3
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	4a07      	ldr	r2, [pc, #28]	@ (800b0d8 <UART_SetConfig+0x6ac>)
 800b0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0c0:	e01c      	b.n	800b0fc <UART_SetConfig+0x6d0>
 800b0c2:	bf00      	nop
 800b0c4:	40011400 	.word	0x40011400
 800b0c8:	58024400 	.word	0x58024400
 800b0cc:	40007800 	.word	0x40007800
 800b0d0:	40007c00 	.word	0x40007c00
 800b0d4:	58000c00 	.word	0x58000c00
 800b0d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b0dc:	4b9d      	ldr	r3, [pc, #628]	@ (800b354 <UART_SetConfig+0x928>)
 800b0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e0:	e00c      	b.n	800b0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0e2:	4b9d      	ldr	r3, [pc, #628]	@ (800b358 <UART_SetConfig+0x92c>)
 800b0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e6:	e009      	b.n	800b0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ee:	e005      	b.n	800b0fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 81de 	beq.w	800b4c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b108:	4a94      	ldr	r2, [pc, #592]	@ (800b35c <UART_SetConfig+0x930>)
 800b10a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b10e:	461a      	mov	r2, r3
 800b110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b112:	fbb3 f3f2 	udiv	r3, r3, r2
 800b116:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	4413      	add	r3, r2
 800b122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b124:	429a      	cmp	r2, r3
 800b126:	d305      	bcc.n	800b134 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b12e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b130:	429a      	cmp	r2, r3
 800b132:	d903      	bls.n	800b13c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b13a:	e1c1      	b.n	800b4c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13e:	2200      	movs	r2, #0
 800b140:	60bb      	str	r3, [r7, #8]
 800b142:	60fa      	str	r2, [r7, #12]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b148:	4a84      	ldr	r2, [pc, #528]	@ (800b35c <UART_SetConfig+0x930>)
 800b14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2200      	movs	r2, #0
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	607a      	str	r2, [r7, #4]
 800b156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b15a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b15e:	f7f5 f917 	bl	8000390 <__aeabi_uldivmod>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4610      	mov	r0, r2
 800b168:	4619      	mov	r1, r3
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	f04f 0300 	mov.w	r3, #0
 800b172:	020b      	lsls	r3, r1, #8
 800b174:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b178:	0202      	lsls	r2, r0, #8
 800b17a:	6979      	ldr	r1, [r7, #20]
 800b17c:	6849      	ldr	r1, [r1, #4]
 800b17e:	0849      	lsrs	r1, r1, #1
 800b180:	2000      	movs	r0, #0
 800b182:	460c      	mov	r4, r1
 800b184:	4605      	mov	r5, r0
 800b186:	eb12 0804 	adds.w	r8, r2, r4
 800b18a:	eb43 0905 	adc.w	r9, r3, r5
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	469a      	mov	sl, r3
 800b196:	4693      	mov	fp, r2
 800b198:	4652      	mov	r2, sl
 800b19a:	465b      	mov	r3, fp
 800b19c:	4640      	mov	r0, r8
 800b19e:	4649      	mov	r1, r9
 800b1a0:	f7f5 f8f6 	bl	8000390 <__aeabi_uldivmod>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1b2:	d308      	bcc.n	800b1c6 <UART_SetConfig+0x79a>
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1ba:	d204      	bcs.n	800b1c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1c2:	60da      	str	r2, [r3, #12]
 800b1c4:	e17c      	b.n	800b4c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1cc:	e178      	b.n	800b4c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1d6:	f040 80c5 	bne.w	800b364 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b1da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1de:	2b20      	cmp	r3, #32
 800b1e0:	dc48      	bgt.n	800b274 <UART_SetConfig+0x848>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	db7b      	blt.n	800b2de <UART_SetConfig+0x8b2>
 800b1e6:	2b20      	cmp	r3, #32
 800b1e8:	d879      	bhi.n	800b2de <UART_SetConfig+0x8b2>
 800b1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f0 <UART_SetConfig+0x7c4>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b27b 	.word	0x0800b27b
 800b1f4:	0800b283 	.word	0x0800b283
 800b1f8:	0800b2df 	.word	0x0800b2df
 800b1fc:	0800b2df 	.word	0x0800b2df
 800b200:	0800b28b 	.word	0x0800b28b
 800b204:	0800b2df 	.word	0x0800b2df
 800b208:	0800b2df 	.word	0x0800b2df
 800b20c:	0800b2df 	.word	0x0800b2df
 800b210:	0800b29b 	.word	0x0800b29b
 800b214:	0800b2df 	.word	0x0800b2df
 800b218:	0800b2df 	.word	0x0800b2df
 800b21c:	0800b2df 	.word	0x0800b2df
 800b220:	0800b2df 	.word	0x0800b2df
 800b224:	0800b2df 	.word	0x0800b2df
 800b228:	0800b2df 	.word	0x0800b2df
 800b22c:	0800b2df 	.word	0x0800b2df
 800b230:	0800b2ab 	.word	0x0800b2ab
 800b234:	0800b2df 	.word	0x0800b2df
 800b238:	0800b2df 	.word	0x0800b2df
 800b23c:	0800b2df 	.word	0x0800b2df
 800b240:	0800b2df 	.word	0x0800b2df
 800b244:	0800b2df 	.word	0x0800b2df
 800b248:	0800b2df 	.word	0x0800b2df
 800b24c:	0800b2df 	.word	0x0800b2df
 800b250:	0800b2df 	.word	0x0800b2df
 800b254:	0800b2df 	.word	0x0800b2df
 800b258:	0800b2df 	.word	0x0800b2df
 800b25c:	0800b2df 	.word	0x0800b2df
 800b260:	0800b2df 	.word	0x0800b2df
 800b264:	0800b2df 	.word	0x0800b2df
 800b268:	0800b2df 	.word	0x0800b2df
 800b26c:	0800b2df 	.word	0x0800b2df
 800b270:	0800b2d1 	.word	0x0800b2d1
 800b274:	2b40      	cmp	r3, #64	@ 0x40
 800b276:	d02e      	beq.n	800b2d6 <UART_SetConfig+0x8aa>
 800b278:	e031      	b.n	800b2de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b27a:	f7fc fd07 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
 800b27e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b280:	e033      	b.n	800b2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b282:	f7fc fd19 	bl	8007cb8 <HAL_RCC_GetPCLK2Freq>
 800b286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b288:	e02f      	b.n	800b2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fcc8 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b298:	e027      	b.n	800b2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29a:	f107 0318 	add.w	r3, r7, #24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fe14 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a8:	e01f      	b.n	800b2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2aa:	4b2d      	ldr	r3, [pc, #180]	@ (800b360 <UART_SetConfig+0x934>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 0320 	and.w	r3, r3, #32
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d009      	beq.n	800b2ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800b360 <UART_SetConfig+0x934>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	08db      	lsrs	r3, r3, #3
 800b2bc:	f003 0303 	and.w	r3, r3, #3
 800b2c0:	4a24      	ldr	r2, [pc, #144]	@ (800b354 <UART_SetConfig+0x928>)
 800b2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2c8:	e00f      	b.n	800b2ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2ca:	4b22      	ldr	r3, [pc, #136]	@ (800b354 <UART_SetConfig+0x928>)
 800b2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ce:	e00c      	b.n	800b2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2d0:	4b21      	ldr	r3, [pc, #132]	@ (800b358 <UART_SetConfig+0x92c>)
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e009      	b.n	800b2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2dc:	e005      	b.n	800b2ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 80e7 	beq.w	800b4c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f6:	4a19      	ldr	r2, [pc, #100]	@ (800b35c <UART_SetConfig+0x930>)
 800b2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b300:	fbb3 f3f2 	udiv	r3, r3, r2
 800b304:	005a      	lsls	r2, r3, #1
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	085b      	lsrs	r3, r3, #1
 800b30c:	441a      	add	r2, r3
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	fbb2 f3f3 	udiv	r3, r2, r3
 800b316:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31a:	2b0f      	cmp	r3, #15
 800b31c:	d916      	bls.n	800b34c <UART_SetConfig+0x920>
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b324:	d212      	bcs.n	800b34c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f023 030f 	bic.w	r3, r3, #15
 800b32e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b332:	085b      	lsrs	r3, r3, #1
 800b334:	b29b      	uxth	r3, r3
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b33e:	4313      	orrs	r3, r2
 800b340:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b348:	60da      	str	r2, [r3, #12]
 800b34a:	e0b9      	b.n	800b4c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b352:	e0b5      	b.n	800b4c0 <UART_SetConfig+0xa94>
 800b354:	03d09000 	.word	0x03d09000
 800b358:	003d0900 	.word	0x003d0900
 800b35c:	0800e494 	.word	0x0800e494
 800b360:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b364:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b368:	2b20      	cmp	r3, #32
 800b36a:	dc49      	bgt.n	800b400 <UART_SetConfig+0x9d4>
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	db7c      	blt.n	800b46a <UART_SetConfig+0xa3e>
 800b370:	2b20      	cmp	r3, #32
 800b372:	d87a      	bhi.n	800b46a <UART_SetConfig+0xa3e>
 800b374:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <UART_SetConfig+0x950>)
 800b376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37a:	bf00      	nop
 800b37c:	0800b407 	.word	0x0800b407
 800b380:	0800b40f 	.word	0x0800b40f
 800b384:	0800b46b 	.word	0x0800b46b
 800b388:	0800b46b 	.word	0x0800b46b
 800b38c:	0800b417 	.word	0x0800b417
 800b390:	0800b46b 	.word	0x0800b46b
 800b394:	0800b46b 	.word	0x0800b46b
 800b398:	0800b46b 	.word	0x0800b46b
 800b39c:	0800b427 	.word	0x0800b427
 800b3a0:	0800b46b 	.word	0x0800b46b
 800b3a4:	0800b46b 	.word	0x0800b46b
 800b3a8:	0800b46b 	.word	0x0800b46b
 800b3ac:	0800b46b 	.word	0x0800b46b
 800b3b0:	0800b46b 	.word	0x0800b46b
 800b3b4:	0800b46b 	.word	0x0800b46b
 800b3b8:	0800b46b 	.word	0x0800b46b
 800b3bc:	0800b437 	.word	0x0800b437
 800b3c0:	0800b46b 	.word	0x0800b46b
 800b3c4:	0800b46b 	.word	0x0800b46b
 800b3c8:	0800b46b 	.word	0x0800b46b
 800b3cc:	0800b46b 	.word	0x0800b46b
 800b3d0:	0800b46b 	.word	0x0800b46b
 800b3d4:	0800b46b 	.word	0x0800b46b
 800b3d8:	0800b46b 	.word	0x0800b46b
 800b3dc:	0800b46b 	.word	0x0800b46b
 800b3e0:	0800b46b 	.word	0x0800b46b
 800b3e4:	0800b46b 	.word	0x0800b46b
 800b3e8:	0800b46b 	.word	0x0800b46b
 800b3ec:	0800b46b 	.word	0x0800b46b
 800b3f0:	0800b46b 	.word	0x0800b46b
 800b3f4:	0800b46b 	.word	0x0800b46b
 800b3f8:	0800b46b 	.word	0x0800b46b
 800b3fc:	0800b45d 	.word	0x0800b45d
 800b400:	2b40      	cmp	r3, #64	@ 0x40
 800b402:	d02e      	beq.n	800b462 <UART_SetConfig+0xa36>
 800b404:	e031      	b.n	800b46a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b406:	f7fc fc41 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
 800b40a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b40c:	e033      	b.n	800b476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b40e:	f7fc fc53 	bl	8007cb8 <HAL_RCC_GetPCLK2Freq>
 800b412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b414:	e02f      	b.n	800b476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fc02 	bl	8009c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b424:	e027      	b.n	800b476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b426:	f107 0318 	add.w	r3, r7, #24
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe fd4e 	bl	8009ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b434:	e01f      	b.n	800b476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b436:	4b2d      	ldr	r3, [pc, #180]	@ (800b4ec <UART_SetConfig+0xac0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0320 	and.w	r3, r3, #32
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d009      	beq.n	800b456 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b442:	4b2a      	ldr	r3, [pc, #168]	@ (800b4ec <UART_SetConfig+0xac0>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	08db      	lsrs	r3, r3, #3
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	4a28      	ldr	r2, [pc, #160]	@ (800b4f0 <UART_SetConfig+0xac4>)
 800b44e:	fa22 f303 	lsr.w	r3, r2, r3
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b454:	e00f      	b.n	800b476 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b456:	4b26      	ldr	r3, [pc, #152]	@ (800b4f0 <UART_SetConfig+0xac4>)
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45a:	e00c      	b.n	800b476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b45c:	4b25      	ldr	r3, [pc, #148]	@ (800b4f4 <UART_SetConfig+0xac8>)
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b460:	e009      	b.n	800b476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b468:	e005      	b.n	800b476 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b474:	bf00      	nop
    }

    if (pclk != 0U)
 800b476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d021      	beq.n	800b4c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b480:	4a1d      	ldr	r2, [pc, #116]	@ (800b4f8 <UART_SetConfig+0xacc>)
 800b482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b486:	461a      	mov	r2, r3
 800b488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b48a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	085b      	lsrs	r3, r3, #1
 800b494:	441a      	add	r2, r3
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a2:	2b0f      	cmp	r3, #15
 800b4a4:	d909      	bls.n	800b4ba <UART_SetConfig+0xa8e>
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ac:	d205      	bcs.n	800b4ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60da      	str	r2, [r3, #12]
 800b4b8:	e002      	b.n	800b4c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3748      	adds	r7, #72	@ 0x48
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ea:	bf00      	nop
 800b4ec:	58024400 	.word	0x58024400
 800b4f0:	03d09000 	.word	0x03d09000
 800b4f4:	003d0900 	.word	0x003d0900
 800b4f8:	0800e494 	.word	0x0800e494

0800b4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b508:	f003 0308 	and.w	r3, r3, #8
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	430a      	orrs	r2, r1
 800b546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54c:	f003 0302 	and.w	r3, r3, #2
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00a      	beq.n	800b56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	430a      	orrs	r2, r1
 800b58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b590:	f003 0310 	and.w	r3, r3, #16
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00a      	beq.n	800b5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b2:	f003 0320 	and.w	r3, r3, #32
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d01a      	beq.n	800b612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5fa:	d10a      	bne.n	800b612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	430a      	orrs	r2, r1
 800b610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	605a      	str	r2, [r3, #4]
  }
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b098      	sub	sp, #96	@ 0x60
 800b644:	af02      	add	r7, sp, #8
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b650:	f7f8 fce6 	bl	8004020 <HAL_GetTick>
 800b654:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0308 	and.w	r3, r3, #8
 800b660:	2b08      	cmp	r3, #8
 800b662:	d12f      	bne.n	800b6c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b66c:	2200      	movs	r2, #0
 800b66e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f88e 	bl	800b794 <UART_WaitOnFlagUntilTimeout>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d022      	beq.n	800b6c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b686:	e853 3f00 	ldrex	r3, [r3]
 800b68a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b68e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b692:	653b      	str	r3, [r7, #80]	@ 0x50
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b69e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e6      	bne.n	800b67e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e063      	b.n	800b78c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0304 	and.w	r3, r3, #4
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d149      	bne.n	800b766 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f857 	bl	800b794 <UART_WaitOnFlagUntilTimeout>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d03c      	beq.n	800b766 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	e853 3f00 	ldrex	r3, [r3]
 800b6f8:	623b      	str	r3, [r7, #32]
   return(result);
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b70c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b712:	e841 2300 	strex	r3, r2, [r1]
 800b716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1e6      	bne.n	800b6ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f023 0301 	bic.w	r3, r3, #1
 800b734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3308      	adds	r3, #8
 800b73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b73e:	61fa      	str	r2, [r7, #28]
 800b740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b742:	69b9      	ldr	r1, [r7, #24]
 800b744:	69fa      	ldr	r2, [r7, #28]
 800b746:	e841 2300 	strex	r3, r2, [r1]
 800b74a:	617b      	str	r3, [r7, #20]
   return(result);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1e5      	bne.n	800b71e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2220      	movs	r2, #32
 800b756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e012      	b.n	800b78c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2220      	movs	r2, #32
 800b76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3758      	adds	r7, #88	@ 0x58
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	603b      	str	r3, [r7, #0]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a4:	e04f      	b.n	800b846 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ac:	d04b      	beq.n	800b846 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7ae:	f7f8 fc37 	bl	8004020 <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d302      	bcc.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e04e      	b.n	800b866 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0304 	and.w	r3, r3, #4
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d037      	beq.n	800b846 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	2b80      	cmp	r3, #128	@ 0x80
 800b7da:	d034      	beq.n	800b846 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b40      	cmp	r3, #64	@ 0x40
 800b7e0:	d031      	beq.n	800b846 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	69db      	ldr	r3, [r3, #28]
 800b7e8:	f003 0308 	and.w	r3, r3, #8
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	d110      	bne.n	800b812 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 f839 	bl	800b870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2208      	movs	r2, #8
 800b802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e029      	b.n	800b866 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b81c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b820:	d111      	bne.n	800b846 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b82a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 f81f 	bl	800b870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2220      	movs	r2, #32
 800b836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	e00f      	b.n	800b866 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	69da      	ldr	r2, [r3, #28]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4013      	ands	r3, r2
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	429a      	cmp	r2, r3
 800b854:	bf0c      	ite	eq
 800b856:	2301      	moveq	r3, #1
 800b858:	2300      	movne	r3, #0
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	461a      	mov	r2, r3
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	429a      	cmp	r2, r3
 800b862:	d0a0      	beq.n	800b7a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b870:	b480      	push	{r7}
 800b872:	b095      	sub	sp, #84	@ 0x54
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b88c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b896:	643b      	str	r3, [r7, #64]	@ 0x40
 800b898:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b89c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e6      	bne.n	800b878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b938 <UART_EndRxTransfer+0xc8>)
 800b8be:	4013      	ands	r3, r2
 800b8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e5      	bne.n	800b8aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d118      	bne.n	800b918 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f023 0310 	bic.w	r3, r3, #16
 800b8fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b904:	61bb      	str	r3, [r7, #24]
 800b906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b908:	6979      	ldr	r1, [r7, #20]
 800b90a:	69ba      	ldr	r2, [r7, #24]
 800b90c:	e841 2300 	strex	r3, r2, [r1]
 800b910:	613b      	str	r3, [r7, #16]
   return(result);
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e6      	bne.n	800b8e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2220      	movs	r2, #32
 800b91c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b92c:	bf00      	nop
 800b92e:	3754      	adds	r7, #84	@ 0x54
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	effffffe 	.word	0xeffffffe

0800b93c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_UARTEx_DisableFifoMode+0x16>
 800b94e:	2302      	movs	r3, #2
 800b950:	e027      	b.n	800b9a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2224      	movs	r2, #36	@ 0x24
 800b95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0201 	bic.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b980:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2220      	movs	r2, #32
 800b994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d101      	bne.n	800b9c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	e02d      	b.n	800ba22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2224      	movs	r2, #36	@ 0x24
 800b9d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f022 0201 	bic.w	r2, r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f850 	bl	800baa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d101      	bne.n	800ba42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba3e:	2302      	movs	r3, #2
 800ba40:	e02d      	b.n	800ba9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2224      	movs	r2, #36	@ 0x24
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f022 0201 	bic.w	r2, r2, #1
 800ba68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f812 	bl	800baa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d108      	bne.n	800baca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bac8:	e031      	b.n	800bb2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800baca:	2310      	movs	r3, #16
 800bacc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bace:	2310      	movs	r3, #16
 800bad0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	0e5b      	lsrs	r3, r3, #25
 800bada:	b2db      	uxtb	r3, r3
 800badc:	f003 0307 	and.w	r3, r3, #7
 800bae0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	0f5b      	lsrs	r3, r3, #29
 800baea:	b2db      	uxtb	r3, r3
 800baec:	f003 0307 	and.w	r3, r3, #7
 800baf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
 800baf4:	7b3a      	ldrb	r2, [r7, #12]
 800baf6:	4911      	ldr	r1, [pc, #68]	@ (800bb3c <UARTEx_SetNbDataToProcess+0x94>)
 800baf8:	5c8a      	ldrb	r2, [r1, r2]
 800bafa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bafe:	7b3a      	ldrb	r2, [r7, #12]
 800bb00:	490f      	ldr	r1, [pc, #60]	@ (800bb40 <UARTEx_SetNbDataToProcess+0x98>)
 800bb02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb04:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	7b7a      	ldrb	r2, [r7, #13]
 800bb14:	4909      	ldr	r1, [pc, #36]	@ (800bb3c <UARTEx_SetNbDataToProcess+0x94>)
 800bb16:	5c8a      	ldrb	r2, [r1, r2]
 800bb18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb1c:	7b7a      	ldrb	r2, [r7, #13]
 800bb1e:	4908      	ldr	r1, [pc, #32]	@ (800bb40 <UARTEx_SetNbDataToProcess+0x98>)
 800bb20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb22:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb2e:	bf00      	nop
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	0800e4ac 	.word	0x0800e4ac
 800bb40:	0800e4b4 	.word	0x0800e4b4

0800bb44 <__cvt>:
 800bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb46:	ed2d 8b02 	vpush	{d8}
 800bb4a:	eeb0 8b40 	vmov.f64	d8, d0
 800bb4e:	b085      	sub	sp, #20
 800bb50:	4617      	mov	r7, r2
 800bb52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bb54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb56:	ee18 2a90 	vmov	r2, s17
 800bb5a:	f025 0520 	bic.w	r5, r5, #32
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	bfb6      	itet	lt
 800bb62:	222d      	movlt	r2, #45	@ 0x2d
 800bb64:	2200      	movge	r2, #0
 800bb66:	eeb1 8b40 	vneglt.f64	d8, d0
 800bb6a:	2d46      	cmp	r5, #70	@ 0x46
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	701a      	strb	r2, [r3, #0]
 800bb70:	d004      	beq.n	800bb7c <__cvt+0x38>
 800bb72:	2d45      	cmp	r5, #69	@ 0x45
 800bb74:	d100      	bne.n	800bb78 <__cvt+0x34>
 800bb76:	3401      	adds	r4, #1
 800bb78:	2102      	movs	r1, #2
 800bb7a:	e000      	b.n	800bb7e <__cvt+0x3a>
 800bb7c:	2103      	movs	r1, #3
 800bb7e:	ab03      	add	r3, sp, #12
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	ab02      	add	r3, sp, #8
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	4622      	mov	r2, r4
 800bb88:	4633      	mov	r3, r6
 800bb8a:	eeb0 0b48 	vmov.f64	d0, d8
 800bb8e:	f000 fe3b 	bl	800c808 <_dtoa_r>
 800bb92:	2d47      	cmp	r5, #71	@ 0x47
 800bb94:	d114      	bne.n	800bbc0 <__cvt+0x7c>
 800bb96:	07fb      	lsls	r3, r7, #31
 800bb98:	d50a      	bpl.n	800bbb0 <__cvt+0x6c>
 800bb9a:	1902      	adds	r2, r0, r4
 800bb9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba4:	bf08      	it	eq
 800bba6:	9203      	streq	r2, [sp, #12]
 800bba8:	2130      	movs	r1, #48	@ 0x30
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d319      	bcc.n	800bbe4 <__cvt+0xa0>
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbb4:	1a1b      	subs	r3, r3, r0
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	b005      	add	sp, #20
 800bbba:	ecbd 8b02 	vpop	{d8}
 800bbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc0:	2d46      	cmp	r5, #70	@ 0x46
 800bbc2:	eb00 0204 	add.w	r2, r0, r4
 800bbc6:	d1e9      	bne.n	800bb9c <__cvt+0x58>
 800bbc8:	7803      	ldrb	r3, [r0, #0]
 800bbca:	2b30      	cmp	r3, #48	@ 0x30
 800bbcc:	d107      	bne.n	800bbde <__cvt+0x9a>
 800bbce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd6:	bf1c      	itt	ne
 800bbd8:	f1c4 0401 	rsbne	r4, r4, #1
 800bbdc:	6034      	strne	r4, [r6, #0]
 800bbde:	6833      	ldr	r3, [r6, #0]
 800bbe0:	441a      	add	r2, r3
 800bbe2:	e7db      	b.n	800bb9c <__cvt+0x58>
 800bbe4:	1c5c      	adds	r4, r3, #1
 800bbe6:	9403      	str	r4, [sp, #12]
 800bbe8:	7019      	strb	r1, [r3, #0]
 800bbea:	e7de      	b.n	800bbaa <__cvt+0x66>

0800bbec <__exponent>:
 800bbec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	bfba      	itte	lt
 800bbf2:	4249      	neglt	r1, r1
 800bbf4:	232d      	movlt	r3, #45	@ 0x2d
 800bbf6:	232b      	movge	r3, #43	@ 0x2b
 800bbf8:	2909      	cmp	r1, #9
 800bbfa:	7002      	strb	r2, [r0, #0]
 800bbfc:	7043      	strb	r3, [r0, #1]
 800bbfe:	dd29      	ble.n	800bc54 <__exponent+0x68>
 800bc00:	f10d 0307 	add.w	r3, sp, #7
 800bc04:	461d      	mov	r5, r3
 800bc06:	270a      	movs	r7, #10
 800bc08:	461a      	mov	r2, r3
 800bc0a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc0e:	fb07 1416 	mls	r4, r7, r6, r1
 800bc12:	3430      	adds	r4, #48	@ 0x30
 800bc14:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc18:	460c      	mov	r4, r1
 800bc1a:	2c63      	cmp	r4, #99	@ 0x63
 800bc1c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc20:	4631      	mov	r1, r6
 800bc22:	dcf1      	bgt.n	800bc08 <__exponent+0x1c>
 800bc24:	3130      	adds	r1, #48	@ 0x30
 800bc26:	1e94      	subs	r4, r2, #2
 800bc28:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc2c:	1c41      	adds	r1, r0, #1
 800bc2e:	4623      	mov	r3, r4
 800bc30:	42ab      	cmp	r3, r5
 800bc32:	d30a      	bcc.n	800bc4a <__exponent+0x5e>
 800bc34:	f10d 0309 	add.w	r3, sp, #9
 800bc38:	1a9b      	subs	r3, r3, r2
 800bc3a:	42ac      	cmp	r4, r5
 800bc3c:	bf88      	it	hi
 800bc3e:	2300      	movhi	r3, #0
 800bc40:	3302      	adds	r3, #2
 800bc42:	4403      	add	r3, r0
 800bc44:	1a18      	subs	r0, r3, r0
 800bc46:	b003      	add	sp, #12
 800bc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc52:	e7ed      	b.n	800bc30 <__exponent+0x44>
 800bc54:	2330      	movs	r3, #48	@ 0x30
 800bc56:	3130      	adds	r1, #48	@ 0x30
 800bc58:	7083      	strb	r3, [r0, #2]
 800bc5a:	70c1      	strb	r1, [r0, #3]
 800bc5c:	1d03      	adds	r3, r0, #4
 800bc5e:	e7f1      	b.n	800bc44 <__exponent+0x58>

0800bc60 <_printf_float>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	b08d      	sub	sp, #52	@ 0x34
 800bc66:	460c      	mov	r4, r1
 800bc68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	461f      	mov	r7, r3
 800bc70:	4605      	mov	r5, r0
 800bc72:	f000 fcbb 	bl	800c5ec <_localeconv_r>
 800bc76:	f8d0 b000 	ldr.w	fp, [r0]
 800bc7a:	4658      	mov	r0, fp
 800bc7c:	f7f4 fb80 	bl	8000380 <strlen>
 800bc80:	2300      	movs	r3, #0
 800bc82:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc84:	f8d8 3000 	ldr.w	r3, [r8]
 800bc88:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	9005      	str	r0, [sp, #20]
 800bc90:	3307      	adds	r3, #7
 800bc92:	f023 0307 	bic.w	r3, r3, #7
 800bc96:	f103 0108 	add.w	r1, r3, #8
 800bc9a:	f8c8 1000 	str.w	r1, [r8]
 800bc9e:	ed93 0b00 	vldr	d0, [r3]
 800bca2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bf00 <_printf_float+0x2a0>
 800bca6:	eeb0 7bc0 	vabs.f64	d7, d0
 800bcaa:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bcb6:	dd24      	ble.n	800bd02 <_printf_float+0xa2>
 800bcb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc0:	d502      	bpl.n	800bcc8 <_printf_float+0x68>
 800bcc2:	232d      	movs	r3, #45	@ 0x2d
 800bcc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcc8:	498f      	ldr	r1, [pc, #572]	@ (800bf08 <_printf_float+0x2a8>)
 800bcca:	4b90      	ldr	r3, [pc, #576]	@ (800bf0c <_printf_float+0x2ac>)
 800bccc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bcd0:	bf8c      	ite	hi
 800bcd2:	4688      	movhi	r8, r1
 800bcd4:	4698      	movls	r8, r3
 800bcd6:	f022 0204 	bic.w	r2, r2, #4
 800bcda:	2303      	movs	r3, #3
 800bcdc:	6123      	str	r3, [r4, #16]
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	f04f 0a00 	mov.w	sl, #0
 800bce4:	9700      	str	r7, [sp, #0]
 800bce6:	4633      	mov	r3, r6
 800bce8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bcea:	4621      	mov	r1, r4
 800bcec:	4628      	mov	r0, r5
 800bcee:	f000 f9d1 	bl	800c094 <_printf_common>
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	f040 8089 	bne.w	800be0a <_printf_float+0x1aa>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	b00d      	add	sp, #52	@ 0x34
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	eeb4 0b40 	vcmp.f64	d0, d0
 800bd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0a:	d709      	bvc.n	800bd20 <_printf_float+0xc0>
 800bd0c:	ee10 3a90 	vmov	r3, s1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bfbc      	itt	lt
 800bd14:	232d      	movlt	r3, #45	@ 0x2d
 800bd16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bd1a:	497d      	ldr	r1, [pc, #500]	@ (800bf10 <_printf_float+0x2b0>)
 800bd1c:	4b7d      	ldr	r3, [pc, #500]	@ (800bf14 <_printf_float+0x2b4>)
 800bd1e:	e7d5      	b.n	800bccc <_printf_float+0x6c>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	1c59      	adds	r1, r3, #1
 800bd24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bd28:	d139      	bne.n	800bd9e <_printf_float+0x13e>
 800bd2a:	2306      	movs	r3, #6
 800bd2c:	6063      	str	r3, [r4, #4]
 800bd2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd32:	2300      	movs	r3, #0
 800bd34:	6022      	str	r2, [r4, #0]
 800bd36:	9303      	str	r3, [sp, #12]
 800bd38:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bd3e:	ab09      	add	r3, sp, #36	@ 0x24
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	6861      	ldr	r1, [r4, #4]
 800bd44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f7ff fefb 	bl	800bb44 <__cvt>
 800bd4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd54:	4680      	mov	r8, r0
 800bd56:	d129      	bne.n	800bdac <_printf_float+0x14c>
 800bd58:	1cc8      	adds	r0, r1, #3
 800bd5a:	db02      	blt.n	800bd62 <_printf_float+0x102>
 800bd5c:	6863      	ldr	r3, [r4, #4]
 800bd5e:	4299      	cmp	r1, r3
 800bd60:	dd41      	ble.n	800bde6 <_printf_float+0x186>
 800bd62:	f1a9 0902 	sub.w	r9, r9, #2
 800bd66:	fa5f f989 	uxtb.w	r9, r9
 800bd6a:	3901      	subs	r1, #1
 800bd6c:	464a      	mov	r2, r9
 800bd6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd72:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd74:	f7ff ff3a 	bl	800bbec <__exponent>
 800bd78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd7a:	1813      	adds	r3, r2, r0
 800bd7c:	2a01      	cmp	r2, #1
 800bd7e:	4682      	mov	sl, r0
 800bd80:	6123      	str	r3, [r4, #16]
 800bd82:	dc02      	bgt.n	800bd8a <_printf_float+0x12a>
 800bd84:	6822      	ldr	r2, [r4, #0]
 800bd86:	07d2      	lsls	r2, r2, #31
 800bd88:	d501      	bpl.n	800bd8e <_printf_float+0x12e>
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0a6      	beq.n	800bce4 <_printf_float+0x84>
 800bd96:	232d      	movs	r3, #45	@ 0x2d
 800bd98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd9c:	e7a2      	b.n	800bce4 <_printf_float+0x84>
 800bd9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bda2:	d1c4      	bne.n	800bd2e <_printf_float+0xce>
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1c2      	bne.n	800bd2e <_printf_float+0xce>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e7bf      	b.n	800bd2c <_printf_float+0xcc>
 800bdac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bdb0:	d9db      	bls.n	800bd6a <_printf_float+0x10a>
 800bdb2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bdb6:	d118      	bne.n	800bdea <_printf_float+0x18a>
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	6863      	ldr	r3, [r4, #4]
 800bdbc:	dd0b      	ble.n	800bdd6 <_printf_float+0x176>
 800bdbe:	6121      	str	r1, [r4, #16]
 800bdc0:	b913      	cbnz	r3, 800bdc8 <_printf_float+0x168>
 800bdc2:	6822      	ldr	r2, [r4, #0]
 800bdc4:	07d0      	lsls	r0, r2, #31
 800bdc6:	d502      	bpl.n	800bdce <_printf_float+0x16e>
 800bdc8:	3301      	adds	r3, #1
 800bdca:	440b      	add	r3, r1
 800bdcc:	6123      	str	r3, [r4, #16]
 800bdce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bdd0:	f04f 0a00 	mov.w	sl, #0
 800bdd4:	e7db      	b.n	800bd8e <_printf_float+0x12e>
 800bdd6:	b913      	cbnz	r3, 800bdde <_printf_float+0x17e>
 800bdd8:	6822      	ldr	r2, [r4, #0]
 800bdda:	07d2      	lsls	r2, r2, #31
 800bddc:	d501      	bpl.n	800bde2 <_printf_float+0x182>
 800bdde:	3302      	adds	r3, #2
 800bde0:	e7f4      	b.n	800bdcc <_printf_float+0x16c>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e7f2      	b.n	800bdcc <_printf_float+0x16c>
 800bde6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bdea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdec:	4299      	cmp	r1, r3
 800bdee:	db05      	blt.n	800bdfc <_printf_float+0x19c>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	6121      	str	r1, [r4, #16]
 800bdf4:	07d8      	lsls	r0, r3, #31
 800bdf6:	d5ea      	bpl.n	800bdce <_printf_float+0x16e>
 800bdf8:	1c4b      	adds	r3, r1, #1
 800bdfa:	e7e7      	b.n	800bdcc <_printf_float+0x16c>
 800bdfc:	2900      	cmp	r1, #0
 800bdfe:	bfd4      	ite	le
 800be00:	f1c1 0202 	rsble	r2, r1, #2
 800be04:	2201      	movgt	r2, #1
 800be06:	4413      	add	r3, r2
 800be08:	e7e0      	b.n	800bdcc <_printf_float+0x16c>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	055a      	lsls	r2, r3, #21
 800be0e:	d407      	bmi.n	800be20 <_printf_float+0x1c0>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	4642      	mov	r2, r8
 800be14:	4631      	mov	r1, r6
 800be16:	4628      	mov	r0, r5
 800be18:	47b8      	blx	r7
 800be1a:	3001      	adds	r0, #1
 800be1c:	d12a      	bne.n	800be74 <_printf_float+0x214>
 800be1e:	e76b      	b.n	800bcf8 <_printf_float+0x98>
 800be20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800be24:	f240 80e0 	bls.w	800bfe8 <_printf_float+0x388>
 800be28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800be2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be34:	d133      	bne.n	800be9e <_printf_float+0x23e>
 800be36:	4a38      	ldr	r2, [pc, #224]	@ (800bf18 <_printf_float+0x2b8>)
 800be38:	2301      	movs	r3, #1
 800be3a:	4631      	mov	r1, r6
 800be3c:	4628      	mov	r0, r5
 800be3e:	47b8      	blx	r7
 800be40:	3001      	adds	r0, #1
 800be42:	f43f af59 	beq.w	800bcf8 <_printf_float+0x98>
 800be46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be4a:	4543      	cmp	r3, r8
 800be4c:	db02      	blt.n	800be54 <_printf_float+0x1f4>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	07d8      	lsls	r0, r3, #31
 800be52:	d50f      	bpl.n	800be74 <_printf_float+0x214>
 800be54:	9b05      	ldr	r3, [sp, #20]
 800be56:	465a      	mov	r2, fp
 800be58:	4631      	mov	r1, r6
 800be5a:	4628      	mov	r0, r5
 800be5c:	47b8      	blx	r7
 800be5e:	3001      	adds	r0, #1
 800be60:	f43f af4a 	beq.w	800bcf8 <_printf_float+0x98>
 800be64:	f04f 0900 	mov.w	r9, #0
 800be68:	f108 38ff 	add.w	r8, r8, #4294967295
 800be6c:	f104 0a1a 	add.w	sl, r4, #26
 800be70:	45c8      	cmp	r8, r9
 800be72:	dc09      	bgt.n	800be88 <_printf_float+0x228>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	079b      	lsls	r3, r3, #30
 800be78:	f100 8107 	bmi.w	800c08a <_printf_float+0x42a>
 800be7c:	68e0      	ldr	r0, [r4, #12]
 800be7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be80:	4298      	cmp	r0, r3
 800be82:	bfb8      	it	lt
 800be84:	4618      	movlt	r0, r3
 800be86:	e739      	b.n	800bcfc <_printf_float+0x9c>
 800be88:	2301      	movs	r3, #1
 800be8a:	4652      	mov	r2, sl
 800be8c:	4631      	mov	r1, r6
 800be8e:	4628      	mov	r0, r5
 800be90:	47b8      	blx	r7
 800be92:	3001      	adds	r0, #1
 800be94:	f43f af30 	beq.w	800bcf8 <_printf_float+0x98>
 800be98:	f109 0901 	add.w	r9, r9, #1
 800be9c:	e7e8      	b.n	800be70 <_printf_float+0x210>
 800be9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dc3b      	bgt.n	800bf1c <_printf_float+0x2bc>
 800bea4:	4a1c      	ldr	r2, [pc, #112]	@ (800bf18 <_printf_float+0x2b8>)
 800bea6:	2301      	movs	r3, #1
 800bea8:	4631      	mov	r1, r6
 800beaa:	4628      	mov	r0, r5
 800beac:	47b8      	blx	r7
 800beae:	3001      	adds	r0, #1
 800beb0:	f43f af22 	beq.w	800bcf8 <_printf_float+0x98>
 800beb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800beb8:	ea59 0303 	orrs.w	r3, r9, r3
 800bebc:	d102      	bne.n	800bec4 <_printf_float+0x264>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	07d9      	lsls	r1, r3, #31
 800bec2:	d5d7      	bpl.n	800be74 <_printf_float+0x214>
 800bec4:	9b05      	ldr	r3, [sp, #20]
 800bec6:	465a      	mov	r2, fp
 800bec8:	4631      	mov	r1, r6
 800beca:	4628      	mov	r0, r5
 800becc:	47b8      	blx	r7
 800bece:	3001      	adds	r0, #1
 800bed0:	f43f af12 	beq.w	800bcf8 <_printf_float+0x98>
 800bed4:	f04f 0a00 	mov.w	sl, #0
 800bed8:	f104 0b1a 	add.w	fp, r4, #26
 800bedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bede:	425b      	negs	r3, r3
 800bee0:	4553      	cmp	r3, sl
 800bee2:	dc01      	bgt.n	800bee8 <_printf_float+0x288>
 800bee4:	464b      	mov	r3, r9
 800bee6:	e794      	b.n	800be12 <_printf_float+0x1b2>
 800bee8:	2301      	movs	r3, #1
 800beea:	465a      	mov	r2, fp
 800beec:	4631      	mov	r1, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	f43f af00 	beq.w	800bcf8 <_printf_float+0x98>
 800bef8:	f10a 0a01 	add.w	sl, sl, #1
 800befc:	e7ee      	b.n	800bedc <_printf_float+0x27c>
 800befe:	bf00      	nop
 800bf00:	ffffffff 	.word	0xffffffff
 800bf04:	7fefffff 	.word	0x7fefffff
 800bf08:	0800e4c0 	.word	0x0800e4c0
 800bf0c:	0800e4bc 	.word	0x0800e4bc
 800bf10:	0800e4c8 	.word	0x0800e4c8
 800bf14:	0800e4c4 	.word	0x0800e4c4
 800bf18:	0800e4cc 	.word	0x0800e4cc
 800bf1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf22:	4553      	cmp	r3, sl
 800bf24:	bfa8      	it	ge
 800bf26:	4653      	movge	r3, sl
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	4699      	mov	r9, r3
 800bf2c:	dc37      	bgt.n	800bf9e <_printf_float+0x33e>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9307      	str	r3, [sp, #28]
 800bf32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf36:	f104 021a 	add.w	r2, r4, #26
 800bf3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf3c:	9907      	ldr	r1, [sp, #28]
 800bf3e:	9306      	str	r3, [sp, #24]
 800bf40:	eba3 0309 	sub.w	r3, r3, r9
 800bf44:	428b      	cmp	r3, r1
 800bf46:	dc31      	bgt.n	800bfac <_printf_float+0x34c>
 800bf48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4a:	459a      	cmp	sl, r3
 800bf4c:	dc3b      	bgt.n	800bfc6 <_printf_float+0x366>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	07da      	lsls	r2, r3, #31
 800bf52:	d438      	bmi.n	800bfc6 <_printf_float+0x366>
 800bf54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf56:	ebaa 0903 	sub.w	r9, sl, r3
 800bf5a:	9b06      	ldr	r3, [sp, #24]
 800bf5c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf60:	4599      	cmp	r9, r3
 800bf62:	bfa8      	it	ge
 800bf64:	4699      	movge	r9, r3
 800bf66:	f1b9 0f00 	cmp.w	r9, #0
 800bf6a:	dc34      	bgt.n	800bfd6 <_printf_float+0x376>
 800bf6c:	f04f 0800 	mov.w	r8, #0
 800bf70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf74:	f104 0b1a 	add.w	fp, r4, #26
 800bf78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7a:	ebaa 0303 	sub.w	r3, sl, r3
 800bf7e:	eba3 0309 	sub.w	r3, r3, r9
 800bf82:	4543      	cmp	r3, r8
 800bf84:	f77f af76 	ble.w	800be74 <_printf_float+0x214>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	465a      	mov	r2, fp
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	47b8      	blx	r7
 800bf92:	3001      	adds	r0, #1
 800bf94:	f43f aeb0 	beq.w	800bcf8 <_printf_float+0x98>
 800bf98:	f108 0801 	add.w	r8, r8, #1
 800bf9c:	e7ec      	b.n	800bf78 <_printf_float+0x318>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	4631      	mov	r1, r6
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	47b8      	blx	r7
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	d1c1      	bne.n	800bf2e <_printf_float+0x2ce>
 800bfaa:	e6a5      	b.n	800bcf8 <_printf_float+0x98>
 800bfac:	2301      	movs	r3, #1
 800bfae:	4631      	mov	r1, r6
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	9206      	str	r2, [sp, #24]
 800bfb4:	47b8      	blx	r7
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	f43f ae9e 	beq.w	800bcf8 <_printf_float+0x98>
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	9a06      	ldr	r2, [sp, #24]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	e7b9      	b.n	800bf3a <_printf_float+0x2da>
 800bfc6:	9b05      	ldr	r3, [sp, #20]
 800bfc8:	465a      	mov	r2, fp
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b8      	blx	r7
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d1bf      	bne.n	800bf54 <_printf_float+0x2f4>
 800bfd4:	e690      	b.n	800bcf8 <_printf_float+0x98>
 800bfd6:	9a06      	ldr	r2, [sp, #24]
 800bfd8:	464b      	mov	r3, r9
 800bfda:	4442      	add	r2, r8
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d1c2      	bne.n	800bf6c <_printf_float+0x30c>
 800bfe6:	e687      	b.n	800bcf8 <_printf_float+0x98>
 800bfe8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bfec:	f1b9 0f01 	cmp.w	r9, #1
 800bff0:	dc01      	bgt.n	800bff6 <_printf_float+0x396>
 800bff2:	07db      	lsls	r3, r3, #31
 800bff4:	d536      	bpl.n	800c064 <_printf_float+0x404>
 800bff6:	2301      	movs	r3, #1
 800bff8:	4642      	mov	r2, r8
 800bffa:	4631      	mov	r1, r6
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b8      	blx	r7
 800c000:	3001      	adds	r0, #1
 800c002:	f43f ae79 	beq.w	800bcf8 <_printf_float+0x98>
 800c006:	9b05      	ldr	r3, [sp, #20]
 800c008:	465a      	mov	r2, fp
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b8      	blx	r7
 800c010:	3001      	adds	r0, #1
 800c012:	f43f ae71 	beq.w	800bcf8 <_printf_float+0x98>
 800c016:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c01a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c022:	f109 39ff 	add.w	r9, r9, #4294967295
 800c026:	d018      	beq.n	800c05a <_printf_float+0x3fa>
 800c028:	464b      	mov	r3, r9
 800c02a:	f108 0201 	add.w	r2, r8, #1
 800c02e:	4631      	mov	r1, r6
 800c030:	4628      	mov	r0, r5
 800c032:	47b8      	blx	r7
 800c034:	3001      	adds	r0, #1
 800c036:	d10c      	bne.n	800c052 <_printf_float+0x3f2>
 800c038:	e65e      	b.n	800bcf8 <_printf_float+0x98>
 800c03a:	2301      	movs	r3, #1
 800c03c:	465a      	mov	r2, fp
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	47b8      	blx	r7
 800c044:	3001      	adds	r0, #1
 800c046:	f43f ae57 	beq.w	800bcf8 <_printf_float+0x98>
 800c04a:	f108 0801 	add.w	r8, r8, #1
 800c04e:	45c8      	cmp	r8, r9
 800c050:	dbf3      	blt.n	800c03a <_printf_float+0x3da>
 800c052:	4653      	mov	r3, sl
 800c054:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c058:	e6dc      	b.n	800be14 <_printf_float+0x1b4>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	f104 0b1a 	add.w	fp, r4, #26
 800c062:	e7f4      	b.n	800c04e <_printf_float+0x3ee>
 800c064:	2301      	movs	r3, #1
 800c066:	4642      	mov	r2, r8
 800c068:	e7e1      	b.n	800c02e <_printf_float+0x3ce>
 800c06a:	2301      	movs	r3, #1
 800c06c:	464a      	mov	r2, r9
 800c06e:	4631      	mov	r1, r6
 800c070:	4628      	mov	r0, r5
 800c072:	47b8      	blx	r7
 800c074:	3001      	adds	r0, #1
 800c076:	f43f ae3f 	beq.w	800bcf8 <_printf_float+0x98>
 800c07a:	f108 0801 	add.w	r8, r8, #1
 800c07e:	68e3      	ldr	r3, [r4, #12]
 800c080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c082:	1a5b      	subs	r3, r3, r1
 800c084:	4543      	cmp	r3, r8
 800c086:	dcf0      	bgt.n	800c06a <_printf_float+0x40a>
 800c088:	e6f8      	b.n	800be7c <_printf_float+0x21c>
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	f104 0919 	add.w	r9, r4, #25
 800c092:	e7f4      	b.n	800c07e <_printf_float+0x41e>

0800c094 <_printf_common>:
 800c094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c098:	4616      	mov	r6, r2
 800c09a:	4698      	mov	r8, r3
 800c09c:	688a      	ldr	r2, [r1, #8]
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	bfb8      	it	lt
 800c0a8:	4613      	movlt	r3, r2
 800c0aa:	6033      	str	r3, [r6, #0]
 800c0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	b10a      	cbz	r2, 800c0ba <_printf_common+0x26>
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	6033      	str	r3, [r6, #0]
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	0699      	lsls	r1, r3, #26
 800c0be:	bf42      	ittt	mi
 800c0c0:	6833      	ldrmi	r3, [r6, #0]
 800c0c2:	3302      	addmi	r3, #2
 800c0c4:	6033      	strmi	r3, [r6, #0]
 800c0c6:	6825      	ldr	r5, [r4, #0]
 800c0c8:	f015 0506 	ands.w	r5, r5, #6
 800c0cc:	d106      	bne.n	800c0dc <_printf_common+0x48>
 800c0ce:	f104 0a19 	add.w	sl, r4, #25
 800c0d2:	68e3      	ldr	r3, [r4, #12]
 800c0d4:	6832      	ldr	r2, [r6, #0]
 800c0d6:	1a9b      	subs	r3, r3, r2
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dc26      	bgt.n	800c12a <_printf_common+0x96>
 800c0dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0e0:	6822      	ldr	r2, [r4, #0]
 800c0e2:	3b00      	subs	r3, #0
 800c0e4:	bf18      	it	ne
 800c0e6:	2301      	movne	r3, #1
 800c0e8:	0692      	lsls	r2, r2, #26
 800c0ea:	d42b      	bmi.n	800c144 <_printf_common+0xb0>
 800c0ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	47c8      	blx	r9
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	d01e      	beq.n	800c138 <_printf_common+0xa4>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	6922      	ldr	r2, [r4, #16]
 800c0fe:	f003 0306 	and.w	r3, r3, #6
 800c102:	2b04      	cmp	r3, #4
 800c104:	bf02      	ittt	eq
 800c106:	68e5      	ldreq	r5, [r4, #12]
 800c108:	6833      	ldreq	r3, [r6, #0]
 800c10a:	1aed      	subeq	r5, r5, r3
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	bf0c      	ite	eq
 800c110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c114:	2500      	movne	r5, #0
 800c116:	4293      	cmp	r3, r2
 800c118:	bfc4      	itt	gt
 800c11a:	1a9b      	subgt	r3, r3, r2
 800c11c:	18ed      	addgt	r5, r5, r3
 800c11e:	2600      	movs	r6, #0
 800c120:	341a      	adds	r4, #26
 800c122:	42b5      	cmp	r5, r6
 800c124:	d11a      	bne.n	800c15c <_printf_common+0xc8>
 800c126:	2000      	movs	r0, #0
 800c128:	e008      	b.n	800c13c <_printf_common+0xa8>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4652      	mov	r2, sl
 800c12e:	4641      	mov	r1, r8
 800c130:	4638      	mov	r0, r7
 800c132:	47c8      	blx	r9
 800c134:	3001      	adds	r0, #1
 800c136:	d103      	bne.n	800c140 <_printf_common+0xac>
 800c138:	f04f 30ff 	mov.w	r0, #4294967295
 800c13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c140:	3501      	adds	r5, #1
 800c142:	e7c6      	b.n	800c0d2 <_printf_common+0x3e>
 800c144:	18e1      	adds	r1, r4, r3
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	2030      	movs	r0, #48	@ 0x30
 800c14a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c14e:	4422      	add	r2, r4
 800c150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c158:	3302      	adds	r3, #2
 800c15a:	e7c7      	b.n	800c0ec <_printf_common+0x58>
 800c15c:	2301      	movs	r3, #1
 800c15e:	4622      	mov	r2, r4
 800c160:	4641      	mov	r1, r8
 800c162:	4638      	mov	r0, r7
 800c164:	47c8      	blx	r9
 800c166:	3001      	adds	r0, #1
 800c168:	d0e6      	beq.n	800c138 <_printf_common+0xa4>
 800c16a:	3601      	adds	r6, #1
 800c16c:	e7d9      	b.n	800c122 <_printf_common+0x8e>
	...

0800c170 <_printf_i>:
 800c170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c174:	7e0f      	ldrb	r7, [r1, #24]
 800c176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c178:	2f78      	cmp	r7, #120	@ 0x78
 800c17a:	4691      	mov	r9, r2
 800c17c:	4680      	mov	r8, r0
 800c17e:	460c      	mov	r4, r1
 800c180:	469a      	mov	sl, r3
 800c182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c186:	d807      	bhi.n	800c198 <_printf_i+0x28>
 800c188:	2f62      	cmp	r7, #98	@ 0x62
 800c18a:	d80a      	bhi.n	800c1a2 <_printf_i+0x32>
 800c18c:	2f00      	cmp	r7, #0
 800c18e:	f000 80d1 	beq.w	800c334 <_printf_i+0x1c4>
 800c192:	2f58      	cmp	r7, #88	@ 0x58
 800c194:	f000 80b8 	beq.w	800c308 <_printf_i+0x198>
 800c198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c19c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1a0:	e03a      	b.n	800c218 <_printf_i+0xa8>
 800c1a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1a6:	2b15      	cmp	r3, #21
 800c1a8:	d8f6      	bhi.n	800c198 <_printf_i+0x28>
 800c1aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c1b0 <_printf_i+0x40>)
 800c1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1b0:	0800c209 	.word	0x0800c209
 800c1b4:	0800c21d 	.word	0x0800c21d
 800c1b8:	0800c199 	.word	0x0800c199
 800c1bc:	0800c199 	.word	0x0800c199
 800c1c0:	0800c199 	.word	0x0800c199
 800c1c4:	0800c199 	.word	0x0800c199
 800c1c8:	0800c21d 	.word	0x0800c21d
 800c1cc:	0800c199 	.word	0x0800c199
 800c1d0:	0800c199 	.word	0x0800c199
 800c1d4:	0800c199 	.word	0x0800c199
 800c1d8:	0800c199 	.word	0x0800c199
 800c1dc:	0800c31b 	.word	0x0800c31b
 800c1e0:	0800c247 	.word	0x0800c247
 800c1e4:	0800c2d5 	.word	0x0800c2d5
 800c1e8:	0800c199 	.word	0x0800c199
 800c1ec:	0800c199 	.word	0x0800c199
 800c1f0:	0800c33d 	.word	0x0800c33d
 800c1f4:	0800c199 	.word	0x0800c199
 800c1f8:	0800c247 	.word	0x0800c247
 800c1fc:	0800c199 	.word	0x0800c199
 800c200:	0800c199 	.word	0x0800c199
 800c204:	0800c2dd 	.word	0x0800c2dd
 800c208:	6833      	ldr	r3, [r6, #0]
 800c20a:	1d1a      	adds	r2, r3, #4
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6032      	str	r2, [r6, #0]
 800c210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c218:	2301      	movs	r3, #1
 800c21a:	e09c      	b.n	800c356 <_printf_i+0x1e6>
 800c21c:	6833      	ldr	r3, [r6, #0]
 800c21e:	6820      	ldr	r0, [r4, #0]
 800c220:	1d19      	adds	r1, r3, #4
 800c222:	6031      	str	r1, [r6, #0]
 800c224:	0606      	lsls	r6, r0, #24
 800c226:	d501      	bpl.n	800c22c <_printf_i+0xbc>
 800c228:	681d      	ldr	r5, [r3, #0]
 800c22a:	e003      	b.n	800c234 <_printf_i+0xc4>
 800c22c:	0645      	lsls	r5, r0, #25
 800c22e:	d5fb      	bpl.n	800c228 <_printf_i+0xb8>
 800c230:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c234:	2d00      	cmp	r5, #0
 800c236:	da03      	bge.n	800c240 <_printf_i+0xd0>
 800c238:	232d      	movs	r3, #45	@ 0x2d
 800c23a:	426d      	negs	r5, r5
 800c23c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c240:	4858      	ldr	r0, [pc, #352]	@ (800c3a4 <_printf_i+0x234>)
 800c242:	230a      	movs	r3, #10
 800c244:	e011      	b.n	800c26a <_printf_i+0xfa>
 800c246:	6821      	ldr	r1, [r4, #0]
 800c248:	6833      	ldr	r3, [r6, #0]
 800c24a:	0608      	lsls	r0, r1, #24
 800c24c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c250:	d402      	bmi.n	800c258 <_printf_i+0xe8>
 800c252:	0649      	lsls	r1, r1, #25
 800c254:	bf48      	it	mi
 800c256:	b2ad      	uxthmi	r5, r5
 800c258:	2f6f      	cmp	r7, #111	@ 0x6f
 800c25a:	4852      	ldr	r0, [pc, #328]	@ (800c3a4 <_printf_i+0x234>)
 800c25c:	6033      	str	r3, [r6, #0]
 800c25e:	bf14      	ite	ne
 800c260:	230a      	movne	r3, #10
 800c262:	2308      	moveq	r3, #8
 800c264:	2100      	movs	r1, #0
 800c266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c26a:	6866      	ldr	r6, [r4, #4]
 800c26c:	60a6      	str	r6, [r4, #8]
 800c26e:	2e00      	cmp	r6, #0
 800c270:	db05      	blt.n	800c27e <_printf_i+0x10e>
 800c272:	6821      	ldr	r1, [r4, #0]
 800c274:	432e      	orrs	r6, r5
 800c276:	f021 0104 	bic.w	r1, r1, #4
 800c27a:	6021      	str	r1, [r4, #0]
 800c27c:	d04b      	beq.n	800c316 <_printf_i+0x1a6>
 800c27e:	4616      	mov	r6, r2
 800c280:	fbb5 f1f3 	udiv	r1, r5, r3
 800c284:	fb03 5711 	mls	r7, r3, r1, r5
 800c288:	5dc7      	ldrb	r7, [r0, r7]
 800c28a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c28e:	462f      	mov	r7, r5
 800c290:	42bb      	cmp	r3, r7
 800c292:	460d      	mov	r5, r1
 800c294:	d9f4      	bls.n	800c280 <_printf_i+0x110>
 800c296:	2b08      	cmp	r3, #8
 800c298:	d10b      	bne.n	800c2b2 <_printf_i+0x142>
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	07df      	lsls	r7, r3, #31
 800c29e:	d508      	bpl.n	800c2b2 <_printf_i+0x142>
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	6861      	ldr	r1, [r4, #4]
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	bfde      	ittt	le
 800c2a8:	2330      	movle	r3, #48	@ 0x30
 800c2aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2b2:	1b92      	subs	r2, r2, r6
 800c2b4:	6122      	str	r2, [r4, #16]
 800c2b6:	f8cd a000 	str.w	sl, [sp]
 800c2ba:	464b      	mov	r3, r9
 800c2bc:	aa03      	add	r2, sp, #12
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	f7ff fee7 	bl	800c094 <_printf_common>
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d14a      	bne.n	800c360 <_printf_i+0x1f0>
 800c2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ce:	b004      	add	sp, #16
 800c2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	f043 0320 	orr.w	r3, r3, #32
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	4832      	ldr	r0, [pc, #200]	@ (800c3a8 <_printf_i+0x238>)
 800c2de:	2778      	movs	r7, #120	@ 0x78
 800c2e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	6831      	ldr	r1, [r6, #0]
 800c2e8:	061f      	lsls	r7, r3, #24
 800c2ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2ee:	d402      	bmi.n	800c2f6 <_printf_i+0x186>
 800c2f0:	065f      	lsls	r7, r3, #25
 800c2f2:	bf48      	it	mi
 800c2f4:	b2ad      	uxthmi	r5, r5
 800c2f6:	6031      	str	r1, [r6, #0]
 800c2f8:	07d9      	lsls	r1, r3, #31
 800c2fa:	bf44      	itt	mi
 800c2fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c300:	6023      	strmi	r3, [r4, #0]
 800c302:	b11d      	cbz	r5, 800c30c <_printf_i+0x19c>
 800c304:	2310      	movs	r3, #16
 800c306:	e7ad      	b.n	800c264 <_printf_i+0xf4>
 800c308:	4826      	ldr	r0, [pc, #152]	@ (800c3a4 <_printf_i+0x234>)
 800c30a:	e7e9      	b.n	800c2e0 <_printf_i+0x170>
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	f023 0320 	bic.w	r3, r3, #32
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	e7f6      	b.n	800c304 <_printf_i+0x194>
 800c316:	4616      	mov	r6, r2
 800c318:	e7bd      	b.n	800c296 <_printf_i+0x126>
 800c31a:	6833      	ldr	r3, [r6, #0]
 800c31c:	6825      	ldr	r5, [r4, #0]
 800c31e:	6961      	ldr	r1, [r4, #20]
 800c320:	1d18      	adds	r0, r3, #4
 800c322:	6030      	str	r0, [r6, #0]
 800c324:	062e      	lsls	r6, r5, #24
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	d501      	bpl.n	800c32e <_printf_i+0x1be>
 800c32a:	6019      	str	r1, [r3, #0]
 800c32c:	e002      	b.n	800c334 <_printf_i+0x1c4>
 800c32e:	0668      	lsls	r0, r5, #25
 800c330:	d5fb      	bpl.n	800c32a <_printf_i+0x1ba>
 800c332:	8019      	strh	r1, [r3, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	4616      	mov	r6, r2
 800c33a:	e7bc      	b.n	800c2b6 <_printf_i+0x146>
 800c33c:	6833      	ldr	r3, [r6, #0]
 800c33e:	1d1a      	adds	r2, r3, #4
 800c340:	6032      	str	r2, [r6, #0]
 800c342:	681e      	ldr	r6, [r3, #0]
 800c344:	6862      	ldr	r2, [r4, #4]
 800c346:	2100      	movs	r1, #0
 800c348:	4630      	mov	r0, r6
 800c34a:	f7f3 ffc9 	bl	80002e0 <memchr>
 800c34e:	b108      	cbz	r0, 800c354 <_printf_i+0x1e4>
 800c350:	1b80      	subs	r0, r0, r6
 800c352:	6060      	str	r0, [r4, #4]
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	2300      	movs	r3, #0
 800c35a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c35e:	e7aa      	b.n	800c2b6 <_printf_i+0x146>
 800c360:	6923      	ldr	r3, [r4, #16]
 800c362:	4632      	mov	r2, r6
 800c364:	4649      	mov	r1, r9
 800c366:	4640      	mov	r0, r8
 800c368:	47d0      	blx	sl
 800c36a:	3001      	adds	r0, #1
 800c36c:	d0ad      	beq.n	800c2ca <_printf_i+0x15a>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	079b      	lsls	r3, r3, #30
 800c372:	d413      	bmi.n	800c39c <_printf_i+0x22c>
 800c374:	68e0      	ldr	r0, [r4, #12]
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	4298      	cmp	r0, r3
 800c37a:	bfb8      	it	lt
 800c37c:	4618      	movlt	r0, r3
 800c37e:	e7a6      	b.n	800c2ce <_printf_i+0x15e>
 800c380:	2301      	movs	r3, #1
 800c382:	4632      	mov	r2, r6
 800c384:	4649      	mov	r1, r9
 800c386:	4640      	mov	r0, r8
 800c388:	47d0      	blx	sl
 800c38a:	3001      	adds	r0, #1
 800c38c:	d09d      	beq.n	800c2ca <_printf_i+0x15a>
 800c38e:	3501      	adds	r5, #1
 800c390:	68e3      	ldr	r3, [r4, #12]
 800c392:	9903      	ldr	r1, [sp, #12]
 800c394:	1a5b      	subs	r3, r3, r1
 800c396:	42ab      	cmp	r3, r5
 800c398:	dcf2      	bgt.n	800c380 <_printf_i+0x210>
 800c39a:	e7eb      	b.n	800c374 <_printf_i+0x204>
 800c39c:	2500      	movs	r5, #0
 800c39e:	f104 0619 	add.w	r6, r4, #25
 800c3a2:	e7f5      	b.n	800c390 <_printf_i+0x220>
 800c3a4:	0800e4ce 	.word	0x0800e4ce
 800c3a8:	0800e4df 	.word	0x0800e4df

0800c3ac <std>:
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ba:	6083      	str	r3, [r0, #8]
 800c3bc:	8181      	strh	r1, [r0, #12]
 800c3be:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3c0:	81c2      	strh	r2, [r0, #14]
 800c3c2:	6183      	str	r3, [r0, #24]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	2208      	movs	r2, #8
 800c3c8:	305c      	adds	r0, #92	@ 0x5c
 800c3ca:	f000 f906 	bl	800c5da <memset>
 800c3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c404 <std+0x58>)
 800c3d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c408 <std+0x5c>)
 800c3d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c40c <std+0x60>)
 800c3d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3da:	4b0d      	ldr	r3, [pc, #52]	@ (800c410 <std+0x64>)
 800c3dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c3de:	4b0d      	ldr	r3, [pc, #52]	@ (800c414 <std+0x68>)
 800c3e0:	6224      	str	r4, [r4, #32]
 800c3e2:	429c      	cmp	r4, r3
 800c3e4:	d006      	beq.n	800c3f4 <std+0x48>
 800c3e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c3ea:	4294      	cmp	r4, r2
 800c3ec:	d002      	beq.n	800c3f4 <std+0x48>
 800c3ee:	33d0      	adds	r3, #208	@ 0xd0
 800c3f0:	429c      	cmp	r4, r3
 800c3f2:	d105      	bne.n	800c400 <std+0x54>
 800c3f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3fc:	f000 b96a 	b.w	800c6d4 <__retarget_lock_init_recursive>
 800c400:	bd10      	pop	{r4, pc}
 800c402:	bf00      	nop
 800c404:	0800c555 	.word	0x0800c555
 800c408:	0800c577 	.word	0x0800c577
 800c40c:	0800c5af 	.word	0x0800c5af
 800c410:	0800c5d3 	.word	0x0800c5d3
 800c414:	24000ef8 	.word	0x24000ef8

0800c418 <stdio_exit_handler>:
 800c418:	4a02      	ldr	r2, [pc, #8]	@ (800c424 <stdio_exit_handler+0xc>)
 800c41a:	4903      	ldr	r1, [pc, #12]	@ (800c428 <stdio_exit_handler+0x10>)
 800c41c:	4803      	ldr	r0, [pc, #12]	@ (800c42c <stdio_exit_handler+0x14>)
 800c41e:	f000 b869 	b.w	800c4f4 <_fwalk_sglue>
 800c422:	bf00      	nop
 800c424:	24000010 	.word	0x24000010
 800c428:	0800df45 	.word	0x0800df45
 800c42c:	24000020 	.word	0x24000020

0800c430 <cleanup_stdio>:
 800c430:	6841      	ldr	r1, [r0, #4]
 800c432:	4b0c      	ldr	r3, [pc, #48]	@ (800c464 <cleanup_stdio+0x34>)
 800c434:	4299      	cmp	r1, r3
 800c436:	b510      	push	{r4, lr}
 800c438:	4604      	mov	r4, r0
 800c43a:	d001      	beq.n	800c440 <cleanup_stdio+0x10>
 800c43c:	f001 fd82 	bl	800df44 <_fflush_r>
 800c440:	68a1      	ldr	r1, [r4, #8]
 800c442:	4b09      	ldr	r3, [pc, #36]	@ (800c468 <cleanup_stdio+0x38>)
 800c444:	4299      	cmp	r1, r3
 800c446:	d002      	beq.n	800c44e <cleanup_stdio+0x1e>
 800c448:	4620      	mov	r0, r4
 800c44a:	f001 fd7b 	bl	800df44 <_fflush_r>
 800c44e:	68e1      	ldr	r1, [r4, #12]
 800c450:	4b06      	ldr	r3, [pc, #24]	@ (800c46c <cleanup_stdio+0x3c>)
 800c452:	4299      	cmp	r1, r3
 800c454:	d004      	beq.n	800c460 <cleanup_stdio+0x30>
 800c456:	4620      	mov	r0, r4
 800c458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c45c:	f001 bd72 	b.w	800df44 <_fflush_r>
 800c460:	bd10      	pop	{r4, pc}
 800c462:	bf00      	nop
 800c464:	24000ef8 	.word	0x24000ef8
 800c468:	24000f60 	.word	0x24000f60
 800c46c:	24000fc8 	.word	0x24000fc8

0800c470 <global_stdio_init.part.0>:
 800c470:	b510      	push	{r4, lr}
 800c472:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a0 <global_stdio_init.part.0+0x30>)
 800c474:	4c0b      	ldr	r4, [pc, #44]	@ (800c4a4 <global_stdio_init.part.0+0x34>)
 800c476:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a8 <global_stdio_init.part.0+0x38>)
 800c478:	601a      	str	r2, [r3, #0]
 800c47a:	4620      	mov	r0, r4
 800c47c:	2200      	movs	r2, #0
 800c47e:	2104      	movs	r1, #4
 800c480:	f7ff ff94 	bl	800c3ac <std>
 800c484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c488:	2201      	movs	r2, #1
 800c48a:	2109      	movs	r1, #9
 800c48c:	f7ff ff8e 	bl	800c3ac <std>
 800c490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c494:	2202      	movs	r2, #2
 800c496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c49a:	2112      	movs	r1, #18
 800c49c:	f7ff bf86 	b.w	800c3ac <std>
 800c4a0:	24001030 	.word	0x24001030
 800c4a4:	24000ef8 	.word	0x24000ef8
 800c4a8:	0800c419 	.word	0x0800c419

0800c4ac <__sfp_lock_acquire>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	@ (800c4b4 <__sfp_lock_acquire+0x8>)
 800c4ae:	f000 b912 	b.w	800c6d6 <__retarget_lock_acquire_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	24001039 	.word	0x24001039

0800c4b8 <__sfp_lock_release>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	@ (800c4c0 <__sfp_lock_release+0x8>)
 800c4ba:	f000 b90d 	b.w	800c6d8 <__retarget_lock_release_recursive>
 800c4be:	bf00      	nop
 800c4c0:	24001039 	.word	0x24001039

0800c4c4 <__sinit>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	f7ff fff0 	bl	800c4ac <__sfp_lock_acquire>
 800c4cc:	6a23      	ldr	r3, [r4, #32]
 800c4ce:	b11b      	cbz	r3, 800c4d8 <__sinit+0x14>
 800c4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d4:	f7ff bff0 	b.w	800c4b8 <__sfp_lock_release>
 800c4d8:	4b04      	ldr	r3, [pc, #16]	@ (800c4ec <__sinit+0x28>)
 800c4da:	6223      	str	r3, [r4, #32]
 800c4dc:	4b04      	ldr	r3, [pc, #16]	@ (800c4f0 <__sinit+0x2c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1f5      	bne.n	800c4d0 <__sinit+0xc>
 800c4e4:	f7ff ffc4 	bl	800c470 <global_stdio_init.part.0>
 800c4e8:	e7f2      	b.n	800c4d0 <__sinit+0xc>
 800c4ea:	bf00      	nop
 800c4ec:	0800c431 	.word	0x0800c431
 800c4f0:	24001030 	.word	0x24001030

0800c4f4 <_fwalk_sglue>:
 800c4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	4688      	mov	r8, r1
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	2600      	movs	r6, #0
 800c500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c504:	f1b9 0901 	subs.w	r9, r9, #1
 800c508:	d505      	bpl.n	800c516 <_fwalk_sglue+0x22>
 800c50a:	6824      	ldr	r4, [r4, #0]
 800c50c:	2c00      	cmp	r4, #0
 800c50e:	d1f7      	bne.n	800c500 <_fwalk_sglue+0xc>
 800c510:	4630      	mov	r0, r6
 800c512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c516:	89ab      	ldrh	r3, [r5, #12]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d907      	bls.n	800c52c <_fwalk_sglue+0x38>
 800c51c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c520:	3301      	adds	r3, #1
 800c522:	d003      	beq.n	800c52c <_fwalk_sglue+0x38>
 800c524:	4629      	mov	r1, r5
 800c526:	4638      	mov	r0, r7
 800c528:	47c0      	blx	r8
 800c52a:	4306      	orrs	r6, r0
 800c52c:	3568      	adds	r5, #104	@ 0x68
 800c52e:	e7e9      	b.n	800c504 <_fwalk_sglue+0x10>

0800c530 <iprintf>:
 800c530:	b40f      	push	{r0, r1, r2, r3}
 800c532:	b507      	push	{r0, r1, r2, lr}
 800c534:	4906      	ldr	r1, [pc, #24]	@ (800c550 <iprintf+0x20>)
 800c536:	ab04      	add	r3, sp, #16
 800c538:	6808      	ldr	r0, [r1, #0]
 800c53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53e:	6881      	ldr	r1, [r0, #8]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	f001 fb63 	bl	800dc0c <_vfiprintf_r>
 800c546:	b003      	add	sp, #12
 800c548:	f85d eb04 	ldr.w	lr, [sp], #4
 800c54c:	b004      	add	sp, #16
 800c54e:	4770      	bx	lr
 800c550:	2400001c 	.word	0x2400001c

0800c554 <__sread>:
 800c554:	b510      	push	{r4, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	f000 f86c 	bl	800c638 <_read_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	bfab      	itete	ge
 800c564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c566:	89a3      	ldrhlt	r3, [r4, #12]
 800c568:	181b      	addge	r3, r3, r0
 800c56a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c56e:	bfac      	ite	ge
 800c570:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c572:	81a3      	strhlt	r3, [r4, #12]
 800c574:	bd10      	pop	{r4, pc}

0800c576 <__swrite>:
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	461f      	mov	r7, r3
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4616      	mov	r6, r2
 800c586:	d505      	bpl.n	800c594 <__swrite+0x1e>
 800c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58c:	2302      	movs	r3, #2
 800c58e:	2200      	movs	r2, #0
 800c590:	f000 f840 	bl	800c614 <_lseek_r>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5aa:	f000 b857 	b.w	800c65c <_write_r>

0800c5ae <__sseek>:
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b6:	f000 f82d 	bl	800c614 <_lseek_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	bf15      	itete	ne
 800c5c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5ca:	81a3      	strheq	r3, [r4, #12]
 800c5cc:	bf18      	it	ne
 800c5ce:	81a3      	strhne	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__sclose>:
 800c5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d6:	f000 b80d 	b.w	800c5f4 <_close_r>

0800c5da <memset>:
 800c5da:	4402      	add	r2, r0
 800c5dc:	4603      	mov	r3, r0
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d100      	bne.n	800c5e4 <memset+0xa>
 800c5e2:	4770      	bx	lr
 800c5e4:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e8:	e7f9      	b.n	800c5de <memset+0x4>
	...

0800c5ec <_localeconv_r>:
 800c5ec:	4800      	ldr	r0, [pc, #0]	@ (800c5f0 <_localeconv_r+0x4>)
 800c5ee:	4770      	bx	lr
 800c5f0:	2400015c 	.word	0x2400015c

0800c5f4 <_close_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4d06      	ldr	r5, [pc, #24]	@ (800c610 <_close_r+0x1c>)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	602b      	str	r3, [r5, #0]
 800c600:	f7f7 fbf1 	bl	8003de6 <_close>
 800c604:	1c43      	adds	r3, r0, #1
 800c606:	d102      	bne.n	800c60e <_close_r+0x1a>
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	b103      	cbz	r3, 800c60e <_close_r+0x1a>
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
 800c610:	24001034 	.word	0x24001034

0800c614 <_lseek_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d07      	ldr	r5, [pc, #28]	@ (800c634 <_lseek_r+0x20>)
 800c618:	4604      	mov	r4, r0
 800c61a:	4608      	mov	r0, r1
 800c61c:	4611      	mov	r1, r2
 800c61e:	2200      	movs	r2, #0
 800c620:	602a      	str	r2, [r5, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	f7f7 fc06 	bl	8003e34 <_lseek>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_lseek_r+0x1e>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_lseek_r+0x1e>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	24001034 	.word	0x24001034

0800c638 <_read_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4d07      	ldr	r5, [pc, #28]	@ (800c658 <_read_r+0x20>)
 800c63c:	4604      	mov	r4, r0
 800c63e:	4608      	mov	r0, r1
 800c640:	4611      	mov	r1, r2
 800c642:	2200      	movs	r2, #0
 800c644:	602a      	str	r2, [r5, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	f7f7 fb94 	bl	8003d74 <_read>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_read_r+0x1e>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_read_r+0x1e>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	24001034 	.word	0x24001034

0800c65c <_write_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d07      	ldr	r5, [pc, #28]	@ (800c67c <_write_r+0x20>)
 800c660:	4604      	mov	r4, r0
 800c662:	4608      	mov	r0, r1
 800c664:	4611      	mov	r1, r2
 800c666:	2200      	movs	r2, #0
 800c668:	602a      	str	r2, [r5, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	f7f7 fb9f 	bl	8003dae <_write>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d102      	bne.n	800c67a <_write_r+0x1e>
 800c674:	682b      	ldr	r3, [r5, #0]
 800c676:	b103      	cbz	r3, 800c67a <_write_r+0x1e>
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
 800c67c:	24001034 	.word	0x24001034

0800c680 <__errno>:
 800c680:	4b01      	ldr	r3, [pc, #4]	@ (800c688 <__errno+0x8>)
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	2400001c 	.word	0x2400001c

0800c68c <__libc_init_array>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	4d0d      	ldr	r5, [pc, #52]	@ (800c6c4 <__libc_init_array+0x38>)
 800c690:	4c0d      	ldr	r4, [pc, #52]	@ (800c6c8 <__libc_init_array+0x3c>)
 800c692:	1b64      	subs	r4, r4, r5
 800c694:	10a4      	asrs	r4, r4, #2
 800c696:	2600      	movs	r6, #0
 800c698:	42a6      	cmp	r6, r4
 800c69a:	d109      	bne.n	800c6b0 <__libc_init_array+0x24>
 800c69c:	4d0b      	ldr	r5, [pc, #44]	@ (800c6cc <__libc_init_array+0x40>)
 800c69e:	4c0c      	ldr	r4, [pc, #48]	@ (800c6d0 <__libc_init_array+0x44>)
 800c6a0:	f001 fe50 	bl	800e344 <_init>
 800c6a4:	1b64      	subs	r4, r4, r5
 800c6a6:	10a4      	asrs	r4, r4, #2
 800c6a8:	2600      	movs	r6, #0
 800c6aa:	42a6      	cmp	r6, r4
 800c6ac:	d105      	bne.n	800c6ba <__libc_init_array+0x2e>
 800c6ae:	bd70      	pop	{r4, r5, r6, pc}
 800c6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b4:	4798      	blx	r3
 800c6b6:	3601      	adds	r6, #1
 800c6b8:	e7ee      	b.n	800c698 <__libc_init_array+0xc>
 800c6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6be:	4798      	blx	r3
 800c6c0:	3601      	adds	r6, #1
 800c6c2:	e7f2      	b.n	800c6aa <__libc_init_array+0x1e>
 800c6c4:	0800e83c 	.word	0x0800e83c
 800c6c8:	0800e83c 	.word	0x0800e83c
 800c6cc:	0800e83c 	.word	0x0800e83c
 800c6d0:	0800e840 	.word	0x0800e840

0800c6d4 <__retarget_lock_init_recursive>:
 800c6d4:	4770      	bx	lr

0800c6d6 <__retarget_lock_acquire_recursive>:
 800c6d6:	4770      	bx	lr

0800c6d8 <__retarget_lock_release_recursive>:
 800c6d8:	4770      	bx	lr

0800c6da <memcpy>:
 800c6da:	440a      	add	r2, r1
 800c6dc:	4291      	cmp	r1, r2
 800c6de:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6e2:	d100      	bne.n	800c6e6 <memcpy+0xc>
 800c6e4:	4770      	bx	lr
 800c6e6:	b510      	push	{r4, lr}
 800c6e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6f0:	4291      	cmp	r1, r2
 800c6f2:	d1f9      	bne.n	800c6e8 <memcpy+0xe>
 800c6f4:	bd10      	pop	{r4, pc}

0800c6f6 <quorem>:
 800c6f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	6903      	ldr	r3, [r0, #16]
 800c6fc:	690c      	ldr	r4, [r1, #16]
 800c6fe:	42a3      	cmp	r3, r4
 800c700:	4607      	mov	r7, r0
 800c702:	db7e      	blt.n	800c802 <quorem+0x10c>
 800c704:	3c01      	subs	r4, #1
 800c706:	f101 0814 	add.w	r8, r1, #20
 800c70a:	00a3      	lsls	r3, r4, #2
 800c70c:	f100 0514 	add.w	r5, r0, #20
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c71c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c720:	3301      	adds	r3, #1
 800c722:	429a      	cmp	r2, r3
 800c724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c728:	fbb2 f6f3 	udiv	r6, r2, r3
 800c72c:	d32e      	bcc.n	800c78c <quorem+0x96>
 800c72e:	f04f 0a00 	mov.w	sl, #0
 800c732:	46c4      	mov	ip, r8
 800c734:	46ae      	mov	lr, r5
 800c736:	46d3      	mov	fp, sl
 800c738:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c73c:	b298      	uxth	r0, r3
 800c73e:	fb06 a000 	mla	r0, r6, r0, sl
 800c742:	0c02      	lsrs	r2, r0, #16
 800c744:	0c1b      	lsrs	r3, r3, #16
 800c746:	fb06 2303 	mla	r3, r6, r3, r2
 800c74a:	f8de 2000 	ldr.w	r2, [lr]
 800c74e:	b280      	uxth	r0, r0
 800c750:	b292      	uxth	r2, r2
 800c752:	1a12      	subs	r2, r2, r0
 800c754:	445a      	add	r2, fp
 800c756:	f8de 0000 	ldr.w	r0, [lr]
 800c75a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c75e:	b29b      	uxth	r3, r3
 800c760:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c764:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c768:	b292      	uxth	r2, r2
 800c76a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c76e:	45e1      	cmp	r9, ip
 800c770:	f84e 2b04 	str.w	r2, [lr], #4
 800c774:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c778:	d2de      	bcs.n	800c738 <quorem+0x42>
 800c77a:	9b00      	ldr	r3, [sp, #0]
 800c77c:	58eb      	ldr	r3, [r5, r3]
 800c77e:	b92b      	cbnz	r3, 800c78c <quorem+0x96>
 800c780:	9b01      	ldr	r3, [sp, #4]
 800c782:	3b04      	subs	r3, #4
 800c784:	429d      	cmp	r5, r3
 800c786:	461a      	mov	r2, r3
 800c788:	d32f      	bcc.n	800c7ea <quorem+0xf4>
 800c78a:	613c      	str	r4, [r7, #16]
 800c78c:	4638      	mov	r0, r7
 800c78e:	f001 f90b 	bl	800d9a8 <__mcmp>
 800c792:	2800      	cmp	r0, #0
 800c794:	db25      	blt.n	800c7e2 <quorem+0xec>
 800c796:	4629      	mov	r1, r5
 800c798:	2000      	movs	r0, #0
 800c79a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c79e:	f8d1 c000 	ldr.w	ip, [r1]
 800c7a2:	fa1f fe82 	uxth.w	lr, r2
 800c7a6:	fa1f f38c 	uxth.w	r3, ip
 800c7aa:	eba3 030e 	sub.w	r3, r3, lr
 800c7ae:	4403      	add	r3, r0
 800c7b0:	0c12      	lsrs	r2, r2, #16
 800c7b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c7b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7c0:	45c1      	cmp	r9, r8
 800c7c2:	f841 3b04 	str.w	r3, [r1], #4
 800c7c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c7ca:	d2e6      	bcs.n	800c79a <quorem+0xa4>
 800c7cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7d4:	b922      	cbnz	r2, 800c7e0 <quorem+0xea>
 800c7d6:	3b04      	subs	r3, #4
 800c7d8:	429d      	cmp	r5, r3
 800c7da:	461a      	mov	r2, r3
 800c7dc:	d30b      	bcc.n	800c7f6 <quorem+0x100>
 800c7de:	613c      	str	r4, [r7, #16]
 800c7e0:	3601      	adds	r6, #1
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	b003      	add	sp, #12
 800c7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ea:	6812      	ldr	r2, [r2, #0]
 800c7ec:	3b04      	subs	r3, #4
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	d1cb      	bne.n	800c78a <quorem+0x94>
 800c7f2:	3c01      	subs	r4, #1
 800c7f4:	e7c6      	b.n	800c784 <quorem+0x8e>
 800c7f6:	6812      	ldr	r2, [r2, #0]
 800c7f8:	3b04      	subs	r3, #4
 800c7fa:	2a00      	cmp	r2, #0
 800c7fc:	d1ef      	bne.n	800c7de <quorem+0xe8>
 800c7fe:	3c01      	subs	r4, #1
 800c800:	e7ea      	b.n	800c7d8 <quorem+0xe2>
 800c802:	2000      	movs	r0, #0
 800c804:	e7ee      	b.n	800c7e4 <quorem+0xee>
	...

0800c808 <_dtoa_r>:
 800c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	ed2d 8b02 	vpush	{d8}
 800c810:	69c7      	ldr	r7, [r0, #28]
 800c812:	b091      	sub	sp, #68	@ 0x44
 800c814:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c818:	ec55 4b10 	vmov	r4, r5, d0
 800c81c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c81e:	9107      	str	r1, [sp, #28]
 800c820:	4681      	mov	r9, r0
 800c822:	9209      	str	r2, [sp, #36]	@ 0x24
 800c824:	930d      	str	r3, [sp, #52]	@ 0x34
 800c826:	b97f      	cbnz	r7, 800c848 <_dtoa_r+0x40>
 800c828:	2010      	movs	r0, #16
 800c82a:	f000 fd95 	bl	800d358 <malloc>
 800c82e:	4602      	mov	r2, r0
 800c830:	f8c9 001c 	str.w	r0, [r9, #28]
 800c834:	b920      	cbnz	r0, 800c840 <_dtoa_r+0x38>
 800c836:	4ba0      	ldr	r3, [pc, #640]	@ (800cab8 <_dtoa_r+0x2b0>)
 800c838:	21ef      	movs	r1, #239	@ 0xef
 800c83a:	48a0      	ldr	r0, [pc, #640]	@ (800cabc <_dtoa_r+0x2b4>)
 800c83c:	f001 fc4e 	bl	800e0dc <__assert_func>
 800c840:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c844:	6007      	str	r7, [r0, #0]
 800c846:	60c7      	str	r7, [r0, #12]
 800c848:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c84c:	6819      	ldr	r1, [r3, #0]
 800c84e:	b159      	cbz	r1, 800c868 <_dtoa_r+0x60>
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	604a      	str	r2, [r1, #4]
 800c854:	2301      	movs	r3, #1
 800c856:	4093      	lsls	r3, r2
 800c858:	608b      	str	r3, [r1, #8]
 800c85a:	4648      	mov	r0, r9
 800c85c:	f000 fe72 	bl	800d544 <_Bfree>
 800c860:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c864:	2200      	movs	r2, #0
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	1e2b      	subs	r3, r5, #0
 800c86a:	bfbb      	ittet	lt
 800c86c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c870:	9303      	strlt	r3, [sp, #12]
 800c872:	2300      	movge	r3, #0
 800c874:	2201      	movlt	r2, #1
 800c876:	bfac      	ite	ge
 800c878:	6033      	strge	r3, [r6, #0]
 800c87a:	6032      	strlt	r2, [r6, #0]
 800c87c:	4b90      	ldr	r3, [pc, #576]	@ (800cac0 <_dtoa_r+0x2b8>)
 800c87e:	9e03      	ldr	r6, [sp, #12]
 800c880:	43b3      	bics	r3, r6
 800c882:	d110      	bne.n	800c8a6 <_dtoa_r+0x9e>
 800c884:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c886:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c88a:	6013      	str	r3, [r2, #0]
 800c88c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c890:	4323      	orrs	r3, r4
 800c892:	f000 84e6 	beq.w	800d262 <_dtoa_r+0xa5a>
 800c896:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c898:	4f8a      	ldr	r7, [pc, #552]	@ (800cac4 <_dtoa_r+0x2bc>)
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 84e8 	beq.w	800d270 <_dtoa_r+0xa68>
 800c8a0:	1cfb      	adds	r3, r7, #3
 800c8a2:	f000 bce3 	b.w	800d26c <_dtoa_r+0xa64>
 800c8a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c8aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b2:	d10a      	bne.n	800c8ca <_dtoa_r+0xc2>
 800c8b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	6013      	str	r3, [r2, #0]
 800c8ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c8bc:	b113      	cbz	r3, 800c8c4 <_dtoa_r+0xbc>
 800c8be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c8c0:	4b81      	ldr	r3, [pc, #516]	@ (800cac8 <_dtoa_r+0x2c0>)
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	4f81      	ldr	r7, [pc, #516]	@ (800cacc <_dtoa_r+0x2c4>)
 800c8c6:	f000 bcd3 	b.w	800d270 <_dtoa_r+0xa68>
 800c8ca:	aa0e      	add	r2, sp, #56	@ 0x38
 800c8cc:	a90f      	add	r1, sp, #60	@ 0x3c
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	eeb0 0b48 	vmov.f64	d0, d8
 800c8d4:	f001 f918 	bl	800db08 <__d2b>
 800c8d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c8dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8de:	9001      	str	r0, [sp, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d045      	beq.n	800c970 <_dtoa_r+0x168>
 800c8e4:	eeb0 7b48 	vmov.f64	d7, d8
 800c8e8:	ee18 1a90 	vmov	r1, s17
 800c8ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c8f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c8f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c8f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	ee07 1a90 	vmov	s15, r1
 800c902:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c906:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800caa0 <_dtoa_r+0x298>
 800c90a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c90e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800caa8 <_dtoa_r+0x2a0>
 800c912:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c916:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cab0 <_dtoa_r+0x2a8>
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c922:	eeb0 7b46 	vmov.f64	d7, d6
 800c926:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c92a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c92e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c936:	ee16 8a90 	vmov	r8, s13
 800c93a:	d508      	bpl.n	800c94e <_dtoa_r+0x146>
 800c93c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c940:	eeb4 6b47 	vcmp.f64	d6, d7
 800c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c948:	bf18      	it	ne
 800c94a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c94e:	f1b8 0f16 	cmp.w	r8, #22
 800c952:	d82b      	bhi.n	800c9ac <_dtoa_r+0x1a4>
 800c954:	495e      	ldr	r1, [pc, #376]	@ (800cad0 <_dtoa_r+0x2c8>)
 800c956:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c95a:	ed91 7b00 	vldr	d7, [r1]
 800c95e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c966:	d501      	bpl.n	800c96c <_dtoa_r+0x164>
 800c968:	f108 38ff 	add.w	r8, r8, #4294967295
 800c96c:	2100      	movs	r1, #0
 800c96e:	e01e      	b.n	800c9ae <_dtoa_r+0x1a6>
 800c970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c972:	4413      	add	r3, r2
 800c974:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c978:	2920      	cmp	r1, #32
 800c97a:	bfc1      	itttt	gt
 800c97c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c980:	408e      	lslgt	r6, r1
 800c982:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c986:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c98a:	bfd6      	itet	le
 800c98c:	f1c1 0120 	rsble	r1, r1, #32
 800c990:	4331      	orrgt	r1, r6
 800c992:	fa04 f101 	lslle.w	r1, r4, r1
 800c996:	ee07 1a90 	vmov	s15, r1
 800c99a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	ee17 1a90 	vmov	r1, s15
 800c9a4:	2501      	movs	r5, #1
 800c9a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c9aa:	e7a8      	b.n	800c8fe <_dtoa_r+0xf6>
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	1ad2      	subs	r2, r2, r3
 800c9b0:	1e53      	subs	r3, r2, #1
 800c9b2:	9306      	str	r3, [sp, #24]
 800c9b4:	bf45      	ittet	mi
 800c9b6:	f1c2 0301 	rsbmi	r3, r2, #1
 800c9ba:	9304      	strmi	r3, [sp, #16]
 800c9bc:	2300      	movpl	r3, #0
 800c9be:	2300      	movmi	r3, #0
 800c9c0:	bf4c      	ite	mi
 800c9c2:	9306      	strmi	r3, [sp, #24]
 800c9c4:	9304      	strpl	r3, [sp, #16]
 800c9c6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ca:	910c      	str	r1, [sp, #48]	@ 0x30
 800c9cc:	db18      	blt.n	800ca00 <_dtoa_r+0x1f8>
 800c9ce:	9b06      	ldr	r3, [sp, #24]
 800c9d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c9d4:	4443      	add	r3, r8
 800c9d6:	9306      	str	r3, [sp, #24]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9a07      	ldr	r2, [sp, #28]
 800c9dc:	2a09      	cmp	r2, #9
 800c9de:	d845      	bhi.n	800ca6c <_dtoa_r+0x264>
 800c9e0:	2a05      	cmp	r2, #5
 800c9e2:	bfc4      	itt	gt
 800c9e4:	3a04      	subgt	r2, #4
 800c9e6:	9207      	strgt	r2, [sp, #28]
 800c9e8:	9a07      	ldr	r2, [sp, #28]
 800c9ea:	f1a2 0202 	sub.w	r2, r2, #2
 800c9ee:	bfcc      	ite	gt
 800c9f0:	2400      	movgt	r4, #0
 800c9f2:	2401      	movle	r4, #1
 800c9f4:	2a03      	cmp	r2, #3
 800c9f6:	d844      	bhi.n	800ca82 <_dtoa_r+0x27a>
 800c9f8:	e8df f002 	tbb	[pc, r2]
 800c9fc:	0b173634 	.word	0x0b173634
 800ca00:	9b04      	ldr	r3, [sp, #16]
 800ca02:	2200      	movs	r2, #0
 800ca04:	eba3 0308 	sub.w	r3, r3, r8
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ca0c:	f1c8 0300 	rsb	r3, r8, #0
 800ca10:	e7e3      	b.n	800c9da <_dtoa_r+0x1d2>
 800ca12:	2201      	movs	r2, #1
 800ca14:	9208      	str	r2, [sp, #32]
 800ca16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca18:	eb08 0b02 	add.w	fp, r8, r2
 800ca1c:	f10b 0a01 	add.w	sl, fp, #1
 800ca20:	4652      	mov	r2, sl
 800ca22:	2a01      	cmp	r2, #1
 800ca24:	bfb8      	it	lt
 800ca26:	2201      	movlt	r2, #1
 800ca28:	e006      	b.n	800ca38 <_dtoa_r+0x230>
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	9208      	str	r2, [sp, #32]
 800ca2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca30:	2a00      	cmp	r2, #0
 800ca32:	dd29      	ble.n	800ca88 <_dtoa_r+0x280>
 800ca34:	4693      	mov	fp, r2
 800ca36:	4692      	mov	sl, r2
 800ca38:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	2004      	movs	r0, #4
 800ca40:	f100 0614 	add.w	r6, r0, #20
 800ca44:	4296      	cmp	r6, r2
 800ca46:	d926      	bls.n	800ca96 <_dtoa_r+0x28e>
 800ca48:	6079      	str	r1, [r7, #4]
 800ca4a:	4648      	mov	r0, r9
 800ca4c:	9305      	str	r3, [sp, #20]
 800ca4e:	f000 fd39 	bl	800d4c4 <_Balloc>
 800ca52:	9b05      	ldr	r3, [sp, #20]
 800ca54:	4607      	mov	r7, r0
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d13e      	bne.n	800cad8 <_dtoa_r+0x2d0>
 800ca5a:	4b1e      	ldr	r3, [pc, #120]	@ (800cad4 <_dtoa_r+0x2cc>)
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ca62:	e6ea      	b.n	800c83a <_dtoa_r+0x32>
 800ca64:	2200      	movs	r2, #0
 800ca66:	e7e1      	b.n	800ca2c <_dtoa_r+0x224>
 800ca68:	2200      	movs	r2, #0
 800ca6a:	e7d3      	b.n	800ca14 <_dtoa_r+0x20c>
 800ca6c:	2401      	movs	r4, #1
 800ca6e:	2200      	movs	r2, #0
 800ca70:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ca74:	f04f 3bff 	mov.w	fp, #4294967295
 800ca78:	2100      	movs	r1, #0
 800ca7a:	46da      	mov	sl, fp
 800ca7c:	2212      	movs	r2, #18
 800ca7e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca80:	e7da      	b.n	800ca38 <_dtoa_r+0x230>
 800ca82:	2201      	movs	r2, #1
 800ca84:	9208      	str	r2, [sp, #32]
 800ca86:	e7f5      	b.n	800ca74 <_dtoa_r+0x26c>
 800ca88:	f04f 0b01 	mov.w	fp, #1
 800ca8c:	46da      	mov	sl, fp
 800ca8e:	465a      	mov	r2, fp
 800ca90:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ca94:	e7d0      	b.n	800ca38 <_dtoa_r+0x230>
 800ca96:	3101      	adds	r1, #1
 800ca98:	0040      	lsls	r0, r0, #1
 800ca9a:	e7d1      	b.n	800ca40 <_dtoa_r+0x238>
 800ca9c:	f3af 8000 	nop.w
 800caa0:	636f4361 	.word	0x636f4361
 800caa4:	3fd287a7 	.word	0x3fd287a7
 800caa8:	8b60c8b3 	.word	0x8b60c8b3
 800caac:	3fc68a28 	.word	0x3fc68a28
 800cab0:	509f79fb 	.word	0x509f79fb
 800cab4:	3fd34413 	.word	0x3fd34413
 800cab8:	0800e4fd 	.word	0x0800e4fd
 800cabc:	0800e514 	.word	0x0800e514
 800cac0:	7ff00000 	.word	0x7ff00000
 800cac4:	0800e4f9 	.word	0x0800e4f9
 800cac8:	0800e4cd 	.word	0x0800e4cd
 800cacc:	0800e4cc 	.word	0x0800e4cc
 800cad0:	0800e668 	.word	0x0800e668
 800cad4:	0800e56c 	.word	0x0800e56c
 800cad8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cadc:	f1ba 0f0e 	cmp.w	sl, #14
 800cae0:	6010      	str	r0, [r2, #0]
 800cae2:	d86e      	bhi.n	800cbc2 <_dtoa_r+0x3ba>
 800cae4:	2c00      	cmp	r4, #0
 800cae6:	d06c      	beq.n	800cbc2 <_dtoa_r+0x3ba>
 800cae8:	f1b8 0f00 	cmp.w	r8, #0
 800caec:	f340 80b4 	ble.w	800cc58 <_dtoa_r+0x450>
 800caf0:	4ac8      	ldr	r2, [pc, #800]	@ (800ce14 <_dtoa_r+0x60c>)
 800caf2:	f008 010f 	and.w	r1, r8, #15
 800caf6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cafa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cafe:	ed92 7b00 	vldr	d7, [r2]
 800cb02:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cb06:	f000 809b 	beq.w	800cc40 <_dtoa_r+0x438>
 800cb0a:	4ac3      	ldr	r2, [pc, #780]	@ (800ce18 <_dtoa_r+0x610>)
 800cb0c:	ed92 6b08 	vldr	d6, [r2, #32]
 800cb10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cb14:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cb18:	f001 010f 	and.w	r1, r1, #15
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	48be      	ldr	r0, [pc, #760]	@ (800ce18 <_dtoa_r+0x610>)
 800cb20:	2900      	cmp	r1, #0
 800cb22:	f040 808f 	bne.w	800cc44 <_dtoa_r+0x43c>
 800cb26:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cb2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cb2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cb34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	f000 80b3 	beq.w	800cca4 <_dtoa_r+0x49c>
 800cb3e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cb42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4a:	f140 80ab 	bpl.w	800cca4 <_dtoa_r+0x49c>
 800cb4e:	f1ba 0f00 	cmp.w	sl, #0
 800cb52:	f000 80a7 	beq.w	800cca4 <_dtoa_r+0x49c>
 800cb56:	f1bb 0f00 	cmp.w	fp, #0
 800cb5a:	dd30      	ble.n	800cbbe <_dtoa_r+0x3b6>
 800cb5c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800cb60:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb68:	f108 31ff 	add.w	r1, r8, #4294967295
 800cb6c:	9105      	str	r1, [sp, #20]
 800cb6e:	3201      	adds	r2, #1
 800cb70:	465c      	mov	r4, fp
 800cb72:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cb76:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800cb7a:	ee07 2a90 	vmov	s15, r2
 800cb7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cb82:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cb86:	ee15 2a90 	vmov	r2, s11
 800cb8a:	ec51 0b15 	vmov	r0, r1, d5
 800cb8e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	f040 808a 	bne.w	800ccac <_dtoa_r+0x4a4>
 800cb98:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cb9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cba0:	ec41 0b17 	vmov	d7, r0, r1
 800cba4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbac:	f300 826a 	bgt.w	800d084 <_dtoa_r+0x87c>
 800cbb0:	eeb1 7b47 	vneg.f64	d7, d7
 800cbb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbc:	d423      	bmi.n	800cc06 <_dtoa_r+0x3fe>
 800cbbe:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cbc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	f2c0 8129 	blt.w	800ce1c <_dtoa_r+0x614>
 800cbca:	f1b8 0f0e 	cmp.w	r8, #14
 800cbce:	f300 8125 	bgt.w	800ce1c <_dtoa_r+0x614>
 800cbd2:	4b90      	ldr	r3, [pc, #576]	@ (800ce14 <_dtoa_r+0x60c>)
 800cbd4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cbd8:	ed93 6b00 	vldr	d6, [r3]
 800cbdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f280 80c8 	bge.w	800cd74 <_dtoa_r+0x56c>
 800cbe4:	f1ba 0f00 	cmp.w	sl, #0
 800cbe8:	f300 80c4 	bgt.w	800cd74 <_dtoa_r+0x56c>
 800cbec:	d10b      	bne.n	800cc06 <_dtoa_r+0x3fe>
 800cbee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cbf2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cbf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbfa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc02:	f2c0 823c 	blt.w	800d07e <_dtoa_r+0x876>
 800cc06:	2400      	movs	r4, #0
 800cc08:	4625      	mov	r5, r4
 800cc0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	9305      	str	r3, [sp, #20]
 800cc10:	463e      	mov	r6, r7
 800cc12:	f04f 0800 	mov.w	r8, #0
 800cc16:	4621      	mov	r1, r4
 800cc18:	4648      	mov	r0, r9
 800cc1a:	f000 fc93 	bl	800d544 <_Bfree>
 800cc1e:	2d00      	cmp	r5, #0
 800cc20:	f000 80a2 	beq.w	800cd68 <_dtoa_r+0x560>
 800cc24:	f1b8 0f00 	cmp.w	r8, #0
 800cc28:	d005      	beq.n	800cc36 <_dtoa_r+0x42e>
 800cc2a:	45a8      	cmp	r8, r5
 800cc2c:	d003      	beq.n	800cc36 <_dtoa_r+0x42e>
 800cc2e:	4641      	mov	r1, r8
 800cc30:	4648      	mov	r0, r9
 800cc32:	f000 fc87 	bl	800d544 <_Bfree>
 800cc36:	4629      	mov	r1, r5
 800cc38:	4648      	mov	r0, r9
 800cc3a:	f000 fc83 	bl	800d544 <_Bfree>
 800cc3e:	e093      	b.n	800cd68 <_dtoa_r+0x560>
 800cc40:	2202      	movs	r2, #2
 800cc42:	e76c      	b.n	800cb1e <_dtoa_r+0x316>
 800cc44:	07cc      	lsls	r4, r1, #31
 800cc46:	d504      	bpl.n	800cc52 <_dtoa_r+0x44a>
 800cc48:	ed90 6b00 	vldr	d6, [r0]
 800cc4c:	3201      	adds	r2, #1
 800cc4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc52:	1049      	asrs	r1, r1, #1
 800cc54:	3008      	adds	r0, #8
 800cc56:	e763      	b.n	800cb20 <_dtoa_r+0x318>
 800cc58:	d022      	beq.n	800cca0 <_dtoa_r+0x498>
 800cc5a:	f1c8 0100 	rsb	r1, r8, #0
 800cc5e:	4a6d      	ldr	r2, [pc, #436]	@ (800ce14 <_dtoa_r+0x60c>)
 800cc60:	f001 000f 	and.w	r0, r1, #15
 800cc64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cc68:	ed92 7b00 	vldr	d7, [r2]
 800cc6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cc70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc74:	4868      	ldr	r0, [pc, #416]	@ (800ce18 <_dtoa_r+0x610>)
 800cc76:	1109      	asrs	r1, r1, #4
 800cc78:	2400      	movs	r4, #0
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	b929      	cbnz	r1, 800cc8a <_dtoa_r+0x482>
 800cc7e:	2c00      	cmp	r4, #0
 800cc80:	f43f af57 	beq.w	800cb32 <_dtoa_r+0x32a>
 800cc84:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc88:	e753      	b.n	800cb32 <_dtoa_r+0x32a>
 800cc8a:	07ce      	lsls	r6, r1, #31
 800cc8c:	d505      	bpl.n	800cc9a <_dtoa_r+0x492>
 800cc8e:	ed90 6b00 	vldr	d6, [r0]
 800cc92:	3201      	adds	r2, #1
 800cc94:	2401      	movs	r4, #1
 800cc96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cc9a:	1049      	asrs	r1, r1, #1
 800cc9c:	3008      	adds	r0, #8
 800cc9e:	e7ed      	b.n	800cc7c <_dtoa_r+0x474>
 800cca0:	2202      	movs	r2, #2
 800cca2:	e746      	b.n	800cb32 <_dtoa_r+0x32a>
 800cca4:	f8cd 8014 	str.w	r8, [sp, #20]
 800cca8:	4654      	mov	r4, sl
 800ccaa:	e762      	b.n	800cb72 <_dtoa_r+0x36a>
 800ccac:	4a59      	ldr	r2, [pc, #356]	@ (800ce14 <_dtoa_r+0x60c>)
 800ccae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ccb2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ccb6:	9a08      	ldr	r2, [sp, #32]
 800ccb8:	ec41 0b17 	vmov	d7, r0, r1
 800ccbc:	443c      	add	r4, r7
 800ccbe:	b34a      	cbz	r2, 800cd14 <_dtoa_r+0x50c>
 800ccc0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ccc4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ccc8:	463e      	mov	r6, r7
 800ccca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ccce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ccd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ccd6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ccda:	ee14 2a90 	vmov	r2, s9
 800ccde:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cce2:	3230      	adds	r2, #48	@ 0x30
 800cce4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cce8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf0:	f806 2b01 	strb.w	r2, [r6], #1
 800ccf4:	d438      	bmi.n	800cd68 <_dtoa_r+0x560>
 800ccf6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ccfa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ccfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd02:	d46e      	bmi.n	800cde2 <_dtoa_r+0x5da>
 800cd04:	42a6      	cmp	r6, r4
 800cd06:	f43f af5a 	beq.w	800cbbe <_dtoa_r+0x3b6>
 800cd0a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cd0e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cd12:	e7e0      	b.n	800ccd6 <_dtoa_r+0x4ce>
 800cd14:	4621      	mov	r1, r4
 800cd16:	463e      	mov	r6, r7
 800cd18:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cd1c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cd20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cd24:	ee14 2a90 	vmov	r2, s9
 800cd28:	3230      	adds	r2, #48	@ 0x30
 800cd2a:	f806 2b01 	strb.w	r2, [r6], #1
 800cd2e:	42a6      	cmp	r6, r4
 800cd30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cd34:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cd38:	d119      	bne.n	800cd6e <_dtoa_r+0x566>
 800cd3a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cd3e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cd42:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	dc4a      	bgt.n	800cde2 <_dtoa_r+0x5da>
 800cd4c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cd50:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd58:	f57f af31 	bpl.w	800cbbe <_dtoa_r+0x3b6>
 800cd5c:	460e      	mov	r6, r1
 800cd5e:	3901      	subs	r1, #1
 800cd60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd64:	2b30      	cmp	r3, #48	@ 0x30
 800cd66:	d0f9      	beq.n	800cd5c <_dtoa_r+0x554>
 800cd68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cd6c:	e027      	b.n	800cdbe <_dtoa_r+0x5b6>
 800cd6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cd72:	e7d5      	b.n	800cd20 <_dtoa_r+0x518>
 800cd74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd78:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cd7c:	463e      	mov	r6, r7
 800cd7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cd82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cd86:	ee15 3a10 	vmov	r3, s10
 800cd8a:	3330      	adds	r3, #48	@ 0x30
 800cd8c:	f806 3b01 	strb.w	r3, [r6], #1
 800cd90:	1bf3      	subs	r3, r6, r7
 800cd92:	459a      	cmp	sl, r3
 800cd94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cd98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cd9c:	d132      	bne.n	800ce04 <_dtoa_r+0x5fc>
 800cd9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cda2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdaa:	dc18      	bgt.n	800cdde <_dtoa_r+0x5d6>
 800cdac:	eeb4 7b46 	vcmp.f64	d7, d6
 800cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb4:	d103      	bne.n	800cdbe <_dtoa_r+0x5b6>
 800cdb6:	ee15 3a10 	vmov	r3, s10
 800cdba:	07db      	lsls	r3, r3, #31
 800cdbc:	d40f      	bmi.n	800cdde <_dtoa_r+0x5d6>
 800cdbe:	9901      	ldr	r1, [sp, #4]
 800cdc0:	4648      	mov	r0, r9
 800cdc2:	f000 fbbf 	bl	800d544 <_Bfree>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cdca:	7033      	strb	r3, [r6, #0]
 800cdcc:	f108 0301 	add.w	r3, r8, #1
 800cdd0:	6013      	str	r3, [r2, #0]
 800cdd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 824b 	beq.w	800d270 <_dtoa_r+0xa68>
 800cdda:	601e      	str	r6, [r3, #0]
 800cddc:	e248      	b.n	800d270 <_dtoa_r+0xa68>
 800cdde:	f8cd 8014 	str.w	r8, [sp, #20]
 800cde2:	4633      	mov	r3, r6
 800cde4:	461e      	mov	r6, r3
 800cde6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdea:	2a39      	cmp	r2, #57	@ 0x39
 800cdec:	d106      	bne.n	800cdfc <_dtoa_r+0x5f4>
 800cdee:	429f      	cmp	r7, r3
 800cdf0:	d1f8      	bne.n	800cde4 <_dtoa_r+0x5dc>
 800cdf2:	9a05      	ldr	r2, [sp, #20]
 800cdf4:	3201      	adds	r2, #1
 800cdf6:	9205      	str	r2, [sp, #20]
 800cdf8:	2230      	movs	r2, #48	@ 0x30
 800cdfa:	703a      	strb	r2, [r7, #0]
 800cdfc:	781a      	ldrb	r2, [r3, #0]
 800cdfe:	3201      	adds	r2, #1
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	e7b1      	b.n	800cd68 <_dtoa_r+0x560>
 800ce04:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ce08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce10:	d1b5      	bne.n	800cd7e <_dtoa_r+0x576>
 800ce12:	e7d4      	b.n	800cdbe <_dtoa_r+0x5b6>
 800ce14:	0800e668 	.word	0x0800e668
 800ce18:	0800e640 	.word	0x0800e640
 800ce1c:	9908      	ldr	r1, [sp, #32]
 800ce1e:	2900      	cmp	r1, #0
 800ce20:	f000 80e9 	beq.w	800cff6 <_dtoa_r+0x7ee>
 800ce24:	9907      	ldr	r1, [sp, #28]
 800ce26:	2901      	cmp	r1, #1
 800ce28:	f300 80cb 	bgt.w	800cfc2 <_dtoa_r+0x7ba>
 800ce2c:	2d00      	cmp	r5, #0
 800ce2e:	f000 80c4 	beq.w	800cfba <_dtoa_r+0x7b2>
 800ce32:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ce36:	9e04      	ldr	r6, [sp, #16]
 800ce38:	461c      	mov	r4, r3
 800ce3a:	9305      	str	r3, [sp, #20]
 800ce3c:	9b04      	ldr	r3, [sp, #16]
 800ce3e:	4413      	add	r3, r2
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	9b06      	ldr	r3, [sp, #24]
 800ce44:	2101      	movs	r1, #1
 800ce46:	4413      	add	r3, r2
 800ce48:	4648      	mov	r0, r9
 800ce4a:	9306      	str	r3, [sp, #24]
 800ce4c:	f000 fc2e 	bl	800d6ac <__i2b>
 800ce50:	9b05      	ldr	r3, [sp, #20]
 800ce52:	4605      	mov	r5, r0
 800ce54:	b166      	cbz	r6, 800ce70 <_dtoa_r+0x668>
 800ce56:	9a06      	ldr	r2, [sp, #24]
 800ce58:	2a00      	cmp	r2, #0
 800ce5a:	dd09      	ble.n	800ce70 <_dtoa_r+0x668>
 800ce5c:	42b2      	cmp	r2, r6
 800ce5e:	9904      	ldr	r1, [sp, #16]
 800ce60:	bfa8      	it	ge
 800ce62:	4632      	movge	r2, r6
 800ce64:	1a89      	subs	r1, r1, r2
 800ce66:	9104      	str	r1, [sp, #16]
 800ce68:	9906      	ldr	r1, [sp, #24]
 800ce6a:	1ab6      	subs	r6, r6, r2
 800ce6c:	1a8a      	subs	r2, r1, r2
 800ce6e:	9206      	str	r2, [sp, #24]
 800ce70:	b30b      	cbz	r3, 800ceb6 <_dtoa_r+0x6ae>
 800ce72:	9a08      	ldr	r2, [sp, #32]
 800ce74:	2a00      	cmp	r2, #0
 800ce76:	f000 80c5 	beq.w	800d004 <_dtoa_r+0x7fc>
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	f000 80bf 	beq.w	800cffe <_dtoa_r+0x7f6>
 800ce80:	4629      	mov	r1, r5
 800ce82:	4622      	mov	r2, r4
 800ce84:	4648      	mov	r0, r9
 800ce86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce88:	f000 fcc8 	bl	800d81c <__pow5mult>
 800ce8c:	9a01      	ldr	r2, [sp, #4]
 800ce8e:	4601      	mov	r1, r0
 800ce90:	4605      	mov	r5, r0
 800ce92:	4648      	mov	r0, r9
 800ce94:	f000 fc20 	bl	800d6d8 <__multiply>
 800ce98:	9901      	ldr	r1, [sp, #4]
 800ce9a:	9005      	str	r0, [sp, #20]
 800ce9c:	4648      	mov	r0, r9
 800ce9e:	f000 fb51 	bl	800d544 <_Bfree>
 800cea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cea4:	1b1b      	subs	r3, r3, r4
 800cea6:	f000 80b0 	beq.w	800d00a <_dtoa_r+0x802>
 800ceaa:	9905      	ldr	r1, [sp, #20]
 800ceac:	461a      	mov	r2, r3
 800ceae:	4648      	mov	r0, r9
 800ceb0:	f000 fcb4 	bl	800d81c <__pow5mult>
 800ceb4:	9001      	str	r0, [sp, #4]
 800ceb6:	2101      	movs	r1, #1
 800ceb8:	4648      	mov	r0, r9
 800ceba:	f000 fbf7 	bl	800d6ac <__i2b>
 800cebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cec0:	4604      	mov	r4, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 81da 	beq.w	800d27c <_dtoa_r+0xa74>
 800cec8:	461a      	mov	r2, r3
 800ceca:	4601      	mov	r1, r0
 800cecc:	4648      	mov	r0, r9
 800cece:	f000 fca5 	bl	800d81c <__pow5mult>
 800ced2:	9b07      	ldr	r3, [sp, #28]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	4604      	mov	r4, r0
 800ced8:	f300 80a0 	bgt.w	800d01c <_dtoa_r+0x814>
 800cedc:	9b02      	ldr	r3, [sp, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 8096 	bne.w	800d010 <_dtoa_r+0x808>
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ceea:	2a00      	cmp	r2, #0
 800ceec:	f040 8092 	bne.w	800d014 <_dtoa_r+0x80c>
 800cef0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cef4:	0d12      	lsrs	r2, r2, #20
 800cef6:	0512      	lsls	r2, r2, #20
 800cef8:	2a00      	cmp	r2, #0
 800cefa:	f000 808d 	beq.w	800d018 <_dtoa_r+0x810>
 800cefe:	9b04      	ldr	r3, [sp, #16]
 800cf00:	3301      	adds	r3, #1
 800cf02:	9304      	str	r3, [sp, #16]
 800cf04:	9b06      	ldr	r3, [sp, #24]
 800cf06:	3301      	adds	r3, #1
 800cf08:	9306      	str	r3, [sp, #24]
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 81b9 	beq.w	800d288 <_dtoa_r+0xa80>
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cf1c:	6910      	ldr	r0, [r2, #16]
 800cf1e:	f000 fb79 	bl	800d614 <__hi0bits>
 800cf22:	f1c0 0020 	rsb	r0, r0, #32
 800cf26:	9b06      	ldr	r3, [sp, #24]
 800cf28:	4418      	add	r0, r3
 800cf2a:	f010 001f 	ands.w	r0, r0, #31
 800cf2e:	f000 8081 	beq.w	800d034 <_dtoa_r+0x82c>
 800cf32:	f1c0 0220 	rsb	r2, r0, #32
 800cf36:	2a04      	cmp	r2, #4
 800cf38:	dd73      	ble.n	800d022 <_dtoa_r+0x81a>
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	f1c0 001c 	rsb	r0, r0, #28
 800cf40:	4403      	add	r3, r0
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	9b06      	ldr	r3, [sp, #24]
 800cf46:	4406      	add	r6, r0
 800cf48:	4403      	add	r3, r0
 800cf4a:	9306      	str	r3, [sp, #24]
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd05      	ble.n	800cf5e <_dtoa_r+0x756>
 800cf52:	9901      	ldr	r1, [sp, #4]
 800cf54:	461a      	mov	r2, r3
 800cf56:	4648      	mov	r0, r9
 800cf58:	f000 fcba 	bl	800d8d0 <__lshift>
 800cf5c:	9001      	str	r0, [sp, #4]
 800cf5e:	9b06      	ldr	r3, [sp, #24]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dd05      	ble.n	800cf70 <_dtoa_r+0x768>
 800cf64:	4621      	mov	r1, r4
 800cf66:	461a      	mov	r2, r3
 800cf68:	4648      	mov	r0, r9
 800cf6a:	f000 fcb1 	bl	800d8d0 <__lshift>
 800cf6e:	4604      	mov	r4, r0
 800cf70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d060      	beq.n	800d038 <_dtoa_r+0x830>
 800cf76:	9801      	ldr	r0, [sp, #4]
 800cf78:	4621      	mov	r1, r4
 800cf7a:	f000 fd15 	bl	800d9a8 <__mcmp>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	da5a      	bge.n	800d038 <_dtoa_r+0x830>
 800cf82:	f108 33ff 	add.w	r3, r8, #4294967295
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	9901      	ldr	r1, [sp, #4]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	220a      	movs	r2, #10
 800cf8e:	4648      	mov	r0, r9
 800cf90:	f000 fafa 	bl	800d588 <__multadd>
 800cf94:	9b08      	ldr	r3, [sp, #32]
 800cf96:	9001      	str	r0, [sp, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 8177 	beq.w	800d28c <_dtoa_r+0xa84>
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	220a      	movs	r2, #10
 800cfa4:	4648      	mov	r0, r9
 800cfa6:	f000 faef 	bl	800d588 <__multadd>
 800cfaa:	f1bb 0f00 	cmp.w	fp, #0
 800cfae:	4605      	mov	r5, r0
 800cfb0:	dc6e      	bgt.n	800d090 <_dtoa_r+0x888>
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	dc48      	bgt.n	800d04a <_dtoa_r+0x842>
 800cfb8:	e06a      	b.n	800d090 <_dtoa_r+0x888>
 800cfba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfbc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cfc0:	e739      	b.n	800ce36 <_dtoa_r+0x62e>
 800cfc2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800cfc6:	42a3      	cmp	r3, r4
 800cfc8:	db07      	blt.n	800cfda <_dtoa_r+0x7d2>
 800cfca:	f1ba 0f00 	cmp.w	sl, #0
 800cfce:	eba3 0404 	sub.w	r4, r3, r4
 800cfd2:	db0b      	blt.n	800cfec <_dtoa_r+0x7e4>
 800cfd4:	9e04      	ldr	r6, [sp, #16]
 800cfd6:	4652      	mov	r2, sl
 800cfd8:	e72f      	b.n	800ce3a <_dtoa_r+0x632>
 800cfda:	1ae2      	subs	r2, r4, r3
 800cfdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfde:	9e04      	ldr	r6, [sp, #16]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfe4:	4652      	mov	r2, sl
 800cfe6:	4623      	mov	r3, r4
 800cfe8:	2400      	movs	r4, #0
 800cfea:	e726      	b.n	800ce3a <_dtoa_r+0x632>
 800cfec:	9a04      	ldr	r2, [sp, #16]
 800cfee:	eba2 060a 	sub.w	r6, r2, sl
 800cff2:	2200      	movs	r2, #0
 800cff4:	e721      	b.n	800ce3a <_dtoa_r+0x632>
 800cff6:	9e04      	ldr	r6, [sp, #16]
 800cff8:	9d08      	ldr	r5, [sp, #32]
 800cffa:	461c      	mov	r4, r3
 800cffc:	e72a      	b.n	800ce54 <_dtoa_r+0x64c>
 800cffe:	9a01      	ldr	r2, [sp, #4]
 800d000:	9205      	str	r2, [sp, #20]
 800d002:	e752      	b.n	800ceaa <_dtoa_r+0x6a2>
 800d004:	9901      	ldr	r1, [sp, #4]
 800d006:	461a      	mov	r2, r3
 800d008:	e751      	b.n	800ceae <_dtoa_r+0x6a6>
 800d00a:	9b05      	ldr	r3, [sp, #20]
 800d00c:	9301      	str	r3, [sp, #4]
 800d00e:	e752      	b.n	800ceb6 <_dtoa_r+0x6ae>
 800d010:	2300      	movs	r3, #0
 800d012:	e77b      	b.n	800cf0c <_dtoa_r+0x704>
 800d014:	9b02      	ldr	r3, [sp, #8]
 800d016:	e779      	b.n	800cf0c <_dtoa_r+0x704>
 800d018:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d01a:	e778      	b.n	800cf0e <_dtoa_r+0x706>
 800d01c:	2300      	movs	r3, #0
 800d01e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d020:	e779      	b.n	800cf16 <_dtoa_r+0x70e>
 800d022:	d093      	beq.n	800cf4c <_dtoa_r+0x744>
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	321c      	adds	r2, #28
 800d028:	4413      	add	r3, r2
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	9b06      	ldr	r3, [sp, #24]
 800d02e:	4416      	add	r6, r2
 800d030:	4413      	add	r3, r2
 800d032:	e78a      	b.n	800cf4a <_dtoa_r+0x742>
 800d034:	4602      	mov	r2, r0
 800d036:	e7f5      	b.n	800d024 <_dtoa_r+0x81c>
 800d038:	f1ba 0f00 	cmp.w	sl, #0
 800d03c:	f8cd 8014 	str.w	r8, [sp, #20]
 800d040:	46d3      	mov	fp, sl
 800d042:	dc21      	bgt.n	800d088 <_dtoa_r+0x880>
 800d044:	9b07      	ldr	r3, [sp, #28]
 800d046:	2b02      	cmp	r3, #2
 800d048:	dd1e      	ble.n	800d088 <_dtoa_r+0x880>
 800d04a:	f1bb 0f00 	cmp.w	fp, #0
 800d04e:	f47f addc 	bne.w	800cc0a <_dtoa_r+0x402>
 800d052:	4621      	mov	r1, r4
 800d054:	465b      	mov	r3, fp
 800d056:	2205      	movs	r2, #5
 800d058:	4648      	mov	r0, r9
 800d05a:	f000 fa95 	bl	800d588 <__multadd>
 800d05e:	4601      	mov	r1, r0
 800d060:	4604      	mov	r4, r0
 800d062:	9801      	ldr	r0, [sp, #4]
 800d064:	f000 fca0 	bl	800d9a8 <__mcmp>
 800d068:	2800      	cmp	r0, #0
 800d06a:	f77f adce 	ble.w	800cc0a <_dtoa_r+0x402>
 800d06e:	463e      	mov	r6, r7
 800d070:	2331      	movs	r3, #49	@ 0x31
 800d072:	f806 3b01 	strb.w	r3, [r6], #1
 800d076:	9b05      	ldr	r3, [sp, #20]
 800d078:	3301      	adds	r3, #1
 800d07a:	9305      	str	r3, [sp, #20]
 800d07c:	e5c9      	b.n	800cc12 <_dtoa_r+0x40a>
 800d07e:	f8cd 8014 	str.w	r8, [sp, #20]
 800d082:	4654      	mov	r4, sl
 800d084:	4625      	mov	r5, r4
 800d086:	e7f2      	b.n	800d06e <_dtoa_r+0x866>
 800d088:	9b08      	ldr	r3, [sp, #32]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 8102 	beq.w	800d294 <_dtoa_r+0xa8c>
 800d090:	2e00      	cmp	r6, #0
 800d092:	dd05      	ble.n	800d0a0 <_dtoa_r+0x898>
 800d094:	4629      	mov	r1, r5
 800d096:	4632      	mov	r2, r6
 800d098:	4648      	mov	r0, r9
 800d09a:	f000 fc19 	bl	800d8d0 <__lshift>
 800d09e:	4605      	mov	r5, r0
 800d0a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d058      	beq.n	800d158 <_dtoa_r+0x950>
 800d0a6:	6869      	ldr	r1, [r5, #4]
 800d0a8:	4648      	mov	r0, r9
 800d0aa:	f000 fa0b 	bl	800d4c4 <_Balloc>
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	b928      	cbnz	r0, 800d0be <_dtoa_r+0x8b6>
 800d0b2:	4b82      	ldr	r3, [pc, #520]	@ (800d2bc <_dtoa_r+0xab4>)
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d0ba:	f7ff bbbe 	b.w	800c83a <_dtoa_r+0x32>
 800d0be:	692a      	ldr	r2, [r5, #16]
 800d0c0:	3202      	adds	r2, #2
 800d0c2:	0092      	lsls	r2, r2, #2
 800d0c4:	f105 010c 	add.w	r1, r5, #12
 800d0c8:	300c      	adds	r0, #12
 800d0ca:	f7ff fb06 	bl	800c6da <memcpy>
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4648      	mov	r0, r9
 800d0d4:	f000 fbfc 	bl	800d8d0 <__lshift>
 800d0d8:	1c7b      	adds	r3, r7, #1
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	eb07 030b 	add.w	r3, r7, fp
 800d0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0e2:	9b02      	ldr	r3, [sp, #8]
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	46a8      	mov	r8, r5
 800d0ea:	9308      	str	r3, [sp, #32]
 800d0ec:	4605      	mov	r5, r0
 800d0ee:	9b04      	ldr	r3, [sp, #16]
 800d0f0:	9801      	ldr	r0, [sp, #4]
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	f103 3bff 	add.w	fp, r3, #4294967295
 800d0f8:	f7ff fafd 	bl	800c6f6 <quorem>
 800d0fc:	4641      	mov	r1, r8
 800d0fe:	9002      	str	r0, [sp, #8]
 800d100:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d104:	9801      	ldr	r0, [sp, #4]
 800d106:	f000 fc4f 	bl	800d9a8 <__mcmp>
 800d10a:	462a      	mov	r2, r5
 800d10c:	9006      	str	r0, [sp, #24]
 800d10e:	4621      	mov	r1, r4
 800d110:	4648      	mov	r0, r9
 800d112:	f000 fc65 	bl	800d9e0 <__mdiff>
 800d116:	68c2      	ldr	r2, [r0, #12]
 800d118:	4606      	mov	r6, r0
 800d11a:	b9fa      	cbnz	r2, 800d15c <_dtoa_r+0x954>
 800d11c:	4601      	mov	r1, r0
 800d11e:	9801      	ldr	r0, [sp, #4]
 800d120:	f000 fc42 	bl	800d9a8 <__mcmp>
 800d124:	4602      	mov	r2, r0
 800d126:	4631      	mov	r1, r6
 800d128:	4648      	mov	r0, r9
 800d12a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d12c:	f000 fa0a 	bl	800d544 <_Bfree>
 800d130:	9b07      	ldr	r3, [sp, #28]
 800d132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d134:	9e04      	ldr	r6, [sp, #16]
 800d136:	ea42 0103 	orr.w	r1, r2, r3
 800d13a:	9b08      	ldr	r3, [sp, #32]
 800d13c:	4319      	orrs	r1, r3
 800d13e:	d10f      	bne.n	800d160 <_dtoa_r+0x958>
 800d140:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d144:	d028      	beq.n	800d198 <_dtoa_r+0x990>
 800d146:	9b06      	ldr	r3, [sp, #24]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dd02      	ble.n	800d152 <_dtoa_r+0x94a>
 800d14c:	9b02      	ldr	r3, [sp, #8]
 800d14e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d152:	f88b a000 	strb.w	sl, [fp]
 800d156:	e55e      	b.n	800cc16 <_dtoa_r+0x40e>
 800d158:	4628      	mov	r0, r5
 800d15a:	e7bd      	b.n	800d0d8 <_dtoa_r+0x8d0>
 800d15c:	2201      	movs	r2, #1
 800d15e:	e7e2      	b.n	800d126 <_dtoa_r+0x91e>
 800d160:	9b06      	ldr	r3, [sp, #24]
 800d162:	2b00      	cmp	r3, #0
 800d164:	db04      	blt.n	800d170 <_dtoa_r+0x968>
 800d166:	9907      	ldr	r1, [sp, #28]
 800d168:	430b      	orrs	r3, r1
 800d16a:	9908      	ldr	r1, [sp, #32]
 800d16c:	430b      	orrs	r3, r1
 800d16e:	d120      	bne.n	800d1b2 <_dtoa_r+0x9aa>
 800d170:	2a00      	cmp	r2, #0
 800d172:	ddee      	ble.n	800d152 <_dtoa_r+0x94a>
 800d174:	9901      	ldr	r1, [sp, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	4648      	mov	r0, r9
 800d17a:	f000 fba9 	bl	800d8d0 <__lshift>
 800d17e:	4621      	mov	r1, r4
 800d180:	9001      	str	r0, [sp, #4]
 800d182:	f000 fc11 	bl	800d9a8 <__mcmp>
 800d186:	2800      	cmp	r0, #0
 800d188:	dc03      	bgt.n	800d192 <_dtoa_r+0x98a>
 800d18a:	d1e2      	bne.n	800d152 <_dtoa_r+0x94a>
 800d18c:	f01a 0f01 	tst.w	sl, #1
 800d190:	d0df      	beq.n	800d152 <_dtoa_r+0x94a>
 800d192:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d196:	d1d9      	bne.n	800d14c <_dtoa_r+0x944>
 800d198:	2339      	movs	r3, #57	@ 0x39
 800d19a:	f88b 3000 	strb.w	r3, [fp]
 800d19e:	4633      	mov	r3, r6
 800d1a0:	461e      	mov	r6, r3
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d1a8:	2a39      	cmp	r2, #57	@ 0x39
 800d1aa:	d052      	beq.n	800d252 <_dtoa_r+0xa4a>
 800d1ac:	3201      	adds	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
 800d1b0:	e531      	b.n	800cc16 <_dtoa_r+0x40e>
 800d1b2:	2a00      	cmp	r2, #0
 800d1b4:	dd07      	ble.n	800d1c6 <_dtoa_r+0x9be>
 800d1b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d1ba:	d0ed      	beq.n	800d198 <_dtoa_r+0x990>
 800d1bc:	f10a 0301 	add.w	r3, sl, #1
 800d1c0:	f88b 3000 	strb.w	r3, [fp]
 800d1c4:	e527      	b.n	800cc16 <_dtoa_r+0x40e>
 800d1c6:	9b04      	ldr	r3, [sp, #16]
 800d1c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1ca:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d029      	beq.n	800d226 <_dtoa_r+0xa1e>
 800d1d2:	9901      	ldr	r1, [sp, #4]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	220a      	movs	r2, #10
 800d1d8:	4648      	mov	r0, r9
 800d1da:	f000 f9d5 	bl	800d588 <__multadd>
 800d1de:	45a8      	cmp	r8, r5
 800d1e0:	9001      	str	r0, [sp, #4]
 800d1e2:	f04f 0300 	mov.w	r3, #0
 800d1e6:	f04f 020a 	mov.w	r2, #10
 800d1ea:	4641      	mov	r1, r8
 800d1ec:	4648      	mov	r0, r9
 800d1ee:	d107      	bne.n	800d200 <_dtoa_r+0x9f8>
 800d1f0:	f000 f9ca 	bl	800d588 <__multadd>
 800d1f4:	4680      	mov	r8, r0
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	e776      	b.n	800d0ee <_dtoa_r+0x8e6>
 800d200:	f000 f9c2 	bl	800d588 <__multadd>
 800d204:	4629      	mov	r1, r5
 800d206:	4680      	mov	r8, r0
 800d208:	2300      	movs	r3, #0
 800d20a:	220a      	movs	r2, #10
 800d20c:	4648      	mov	r0, r9
 800d20e:	f000 f9bb 	bl	800d588 <__multadd>
 800d212:	4605      	mov	r5, r0
 800d214:	e7f0      	b.n	800d1f8 <_dtoa_r+0x9f0>
 800d216:	f1bb 0f00 	cmp.w	fp, #0
 800d21a:	bfcc      	ite	gt
 800d21c:	465e      	movgt	r6, fp
 800d21e:	2601      	movle	r6, #1
 800d220:	443e      	add	r6, r7
 800d222:	f04f 0800 	mov.w	r8, #0
 800d226:	9901      	ldr	r1, [sp, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	4648      	mov	r0, r9
 800d22c:	f000 fb50 	bl	800d8d0 <__lshift>
 800d230:	4621      	mov	r1, r4
 800d232:	9001      	str	r0, [sp, #4]
 800d234:	f000 fbb8 	bl	800d9a8 <__mcmp>
 800d238:	2800      	cmp	r0, #0
 800d23a:	dcb0      	bgt.n	800d19e <_dtoa_r+0x996>
 800d23c:	d102      	bne.n	800d244 <_dtoa_r+0xa3c>
 800d23e:	f01a 0f01 	tst.w	sl, #1
 800d242:	d1ac      	bne.n	800d19e <_dtoa_r+0x996>
 800d244:	4633      	mov	r3, r6
 800d246:	461e      	mov	r6, r3
 800d248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d24c:	2a30      	cmp	r2, #48	@ 0x30
 800d24e:	d0fa      	beq.n	800d246 <_dtoa_r+0xa3e>
 800d250:	e4e1      	b.n	800cc16 <_dtoa_r+0x40e>
 800d252:	429f      	cmp	r7, r3
 800d254:	d1a4      	bne.n	800d1a0 <_dtoa_r+0x998>
 800d256:	9b05      	ldr	r3, [sp, #20]
 800d258:	3301      	adds	r3, #1
 800d25a:	9305      	str	r3, [sp, #20]
 800d25c:	2331      	movs	r3, #49	@ 0x31
 800d25e:	703b      	strb	r3, [r7, #0]
 800d260:	e4d9      	b.n	800cc16 <_dtoa_r+0x40e>
 800d262:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d264:	4f16      	ldr	r7, [pc, #88]	@ (800d2c0 <_dtoa_r+0xab8>)
 800d266:	b11b      	cbz	r3, 800d270 <_dtoa_r+0xa68>
 800d268:	f107 0308 	add.w	r3, r7, #8
 800d26c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	4638      	mov	r0, r7
 800d272:	b011      	add	sp, #68	@ 0x44
 800d274:	ecbd 8b02 	vpop	{d8}
 800d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27c:	9b07      	ldr	r3, [sp, #28]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	f77f ae2c 	ble.w	800cedc <_dtoa_r+0x6d4>
 800d284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d286:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d288:	2001      	movs	r0, #1
 800d28a:	e64c      	b.n	800cf26 <_dtoa_r+0x71e>
 800d28c:	f1bb 0f00 	cmp.w	fp, #0
 800d290:	f77f aed8 	ble.w	800d044 <_dtoa_r+0x83c>
 800d294:	463e      	mov	r6, r7
 800d296:	9801      	ldr	r0, [sp, #4]
 800d298:	4621      	mov	r1, r4
 800d29a:	f7ff fa2c 	bl	800c6f6 <quorem>
 800d29e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d2a2:	f806 ab01 	strb.w	sl, [r6], #1
 800d2a6:	1bf2      	subs	r2, r6, r7
 800d2a8:	4593      	cmp	fp, r2
 800d2aa:	ddb4      	ble.n	800d216 <_dtoa_r+0xa0e>
 800d2ac:	9901      	ldr	r1, [sp, #4]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	220a      	movs	r2, #10
 800d2b2:	4648      	mov	r0, r9
 800d2b4:	f000 f968 	bl	800d588 <__multadd>
 800d2b8:	9001      	str	r0, [sp, #4]
 800d2ba:	e7ec      	b.n	800d296 <_dtoa_r+0xa8e>
 800d2bc:	0800e56c 	.word	0x0800e56c
 800d2c0:	0800e4f0 	.word	0x0800e4f0

0800d2c4 <_free_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	d041      	beq.n	800d350 <_free_r+0x8c>
 800d2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2d0:	1f0c      	subs	r4, r1, #4
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bfb8      	it	lt
 800d2d6:	18e4      	addlt	r4, r4, r3
 800d2d8:	f000 f8e8 	bl	800d4ac <__malloc_lock>
 800d2dc:	4a1d      	ldr	r2, [pc, #116]	@ (800d354 <_free_r+0x90>)
 800d2de:	6813      	ldr	r3, [r2, #0]
 800d2e0:	b933      	cbnz	r3, 800d2f0 <_free_r+0x2c>
 800d2e2:	6063      	str	r3, [r4, #4]
 800d2e4:	6014      	str	r4, [r2, #0]
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ec:	f000 b8e4 	b.w	800d4b8 <__malloc_unlock>
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	d908      	bls.n	800d306 <_free_r+0x42>
 800d2f4:	6820      	ldr	r0, [r4, #0]
 800d2f6:	1821      	adds	r1, r4, r0
 800d2f8:	428b      	cmp	r3, r1
 800d2fa:	bf01      	itttt	eq
 800d2fc:	6819      	ldreq	r1, [r3, #0]
 800d2fe:	685b      	ldreq	r3, [r3, #4]
 800d300:	1809      	addeq	r1, r1, r0
 800d302:	6021      	streq	r1, [r4, #0]
 800d304:	e7ed      	b.n	800d2e2 <_free_r+0x1e>
 800d306:	461a      	mov	r2, r3
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	b10b      	cbz	r3, 800d310 <_free_r+0x4c>
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	d9fa      	bls.n	800d306 <_free_r+0x42>
 800d310:	6811      	ldr	r1, [r2, #0]
 800d312:	1850      	adds	r0, r2, r1
 800d314:	42a0      	cmp	r0, r4
 800d316:	d10b      	bne.n	800d330 <_free_r+0x6c>
 800d318:	6820      	ldr	r0, [r4, #0]
 800d31a:	4401      	add	r1, r0
 800d31c:	1850      	adds	r0, r2, r1
 800d31e:	4283      	cmp	r3, r0
 800d320:	6011      	str	r1, [r2, #0]
 800d322:	d1e0      	bne.n	800d2e6 <_free_r+0x22>
 800d324:	6818      	ldr	r0, [r3, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	6053      	str	r3, [r2, #4]
 800d32a:	4408      	add	r0, r1
 800d32c:	6010      	str	r0, [r2, #0]
 800d32e:	e7da      	b.n	800d2e6 <_free_r+0x22>
 800d330:	d902      	bls.n	800d338 <_free_r+0x74>
 800d332:	230c      	movs	r3, #12
 800d334:	602b      	str	r3, [r5, #0]
 800d336:	e7d6      	b.n	800d2e6 <_free_r+0x22>
 800d338:	6820      	ldr	r0, [r4, #0]
 800d33a:	1821      	adds	r1, r4, r0
 800d33c:	428b      	cmp	r3, r1
 800d33e:	bf04      	itt	eq
 800d340:	6819      	ldreq	r1, [r3, #0]
 800d342:	685b      	ldreq	r3, [r3, #4]
 800d344:	6063      	str	r3, [r4, #4]
 800d346:	bf04      	itt	eq
 800d348:	1809      	addeq	r1, r1, r0
 800d34a:	6021      	streq	r1, [r4, #0]
 800d34c:	6054      	str	r4, [r2, #4]
 800d34e:	e7ca      	b.n	800d2e6 <_free_r+0x22>
 800d350:	bd38      	pop	{r3, r4, r5, pc}
 800d352:	bf00      	nop
 800d354:	24001040 	.word	0x24001040

0800d358 <malloc>:
 800d358:	4b02      	ldr	r3, [pc, #8]	@ (800d364 <malloc+0xc>)
 800d35a:	4601      	mov	r1, r0
 800d35c:	6818      	ldr	r0, [r3, #0]
 800d35e:	f000 b825 	b.w	800d3ac <_malloc_r>
 800d362:	bf00      	nop
 800d364:	2400001c 	.word	0x2400001c

0800d368 <sbrk_aligned>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	4e0f      	ldr	r6, [pc, #60]	@ (800d3a8 <sbrk_aligned+0x40>)
 800d36c:	460c      	mov	r4, r1
 800d36e:	6831      	ldr	r1, [r6, #0]
 800d370:	4605      	mov	r5, r0
 800d372:	b911      	cbnz	r1, 800d37a <sbrk_aligned+0x12>
 800d374:	f000 fea2 	bl	800e0bc <_sbrk_r>
 800d378:	6030      	str	r0, [r6, #0]
 800d37a:	4621      	mov	r1, r4
 800d37c:	4628      	mov	r0, r5
 800d37e:	f000 fe9d 	bl	800e0bc <_sbrk_r>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	d103      	bne.n	800d38e <sbrk_aligned+0x26>
 800d386:	f04f 34ff 	mov.w	r4, #4294967295
 800d38a:	4620      	mov	r0, r4
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	1cc4      	adds	r4, r0, #3
 800d390:	f024 0403 	bic.w	r4, r4, #3
 800d394:	42a0      	cmp	r0, r4
 800d396:	d0f8      	beq.n	800d38a <sbrk_aligned+0x22>
 800d398:	1a21      	subs	r1, r4, r0
 800d39a:	4628      	mov	r0, r5
 800d39c:	f000 fe8e 	bl	800e0bc <_sbrk_r>
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d1f2      	bne.n	800d38a <sbrk_aligned+0x22>
 800d3a4:	e7ef      	b.n	800d386 <sbrk_aligned+0x1e>
 800d3a6:	bf00      	nop
 800d3a8:	2400103c 	.word	0x2400103c

0800d3ac <_malloc_r>:
 800d3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b0:	1ccd      	adds	r5, r1, #3
 800d3b2:	f025 0503 	bic.w	r5, r5, #3
 800d3b6:	3508      	adds	r5, #8
 800d3b8:	2d0c      	cmp	r5, #12
 800d3ba:	bf38      	it	cc
 800d3bc:	250c      	movcc	r5, #12
 800d3be:	2d00      	cmp	r5, #0
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	db01      	blt.n	800d3c8 <_malloc_r+0x1c>
 800d3c4:	42a9      	cmp	r1, r5
 800d3c6:	d904      	bls.n	800d3d2 <_malloc_r+0x26>
 800d3c8:	230c      	movs	r3, #12
 800d3ca:	6033      	str	r3, [r6, #0]
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4a8 <_malloc_r+0xfc>
 800d3d6:	f000 f869 	bl	800d4ac <__malloc_lock>
 800d3da:	f8d8 3000 	ldr.w	r3, [r8]
 800d3de:	461c      	mov	r4, r3
 800d3e0:	bb44      	cbnz	r4, 800d434 <_malloc_r+0x88>
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f7ff ffbf 	bl	800d368 <sbrk_aligned>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	d158      	bne.n	800d4a2 <_malloc_r+0xf6>
 800d3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d3f4:	4627      	mov	r7, r4
 800d3f6:	2f00      	cmp	r7, #0
 800d3f8:	d143      	bne.n	800d482 <_malloc_r+0xd6>
 800d3fa:	2c00      	cmp	r4, #0
 800d3fc:	d04b      	beq.n	800d496 <_malloc_r+0xea>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	4639      	mov	r1, r7
 800d402:	4630      	mov	r0, r6
 800d404:	eb04 0903 	add.w	r9, r4, r3
 800d408:	f000 fe58 	bl	800e0bc <_sbrk_r>
 800d40c:	4581      	cmp	r9, r0
 800d40e:	d142      	bne.n	800d496 <_malloc_r+0xea>
 800d410:	6821      	ldr	r1, [r4, #0]
 800d412:	1a6d      	subs	r5, r5, r1
 800d414:	4629      	mov	r1, r5
 800d416:	4630      	mov	r0, r6
 800d418:	f7ff ffa6 	bl	800d368 <sbrk_aligned>
 800d41c:	3001      	adds	r0, #1
 800d41e:	d03a      	beq.n	800d496 <_malloc_r+0xea>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	442b      	add	r3, r5
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	f8d8 3000 	ldr.w	r3, [r8]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	bb62      	cbnz	r2, 800d488 <_malloc_r+0xdc>
 800d42e:	f8c8 7000 	str.w	r7, [r8]
 800d432:	e00f      	b.n	800d454 <_malloc_r+0xa8>
 800d434:	6822      	ldr	r2, [r4, #0]
 800d436:	1b52      	subs	r2, r2, r5
 800d438:	d420      	bmi.n	800d47c <_malloc_r+0xd0>
 800d43a:	2a0b      	cmp	r2, #11
 800d43c:	d917      	bls.n	800d46e <_malloc_r+0xc2>
 800d43e:	1961      	adds	r1, r4, r5
 800d440:	42a3      	cmp	r3, r4
 800d442:	6025      	str	r5, [r4, #0]
 800d444:	bf18      	it	ne
 800d446:	6059      	strne	r1, [r3, #4]
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	bf08      	it	eq
 800d44c:	f8c8 1000 	streq.w	r1, [r8]
 800d450:	5162      	str	r2, [r4, r5]
 800d452:	604b      	str	r3, [r1, #4]
 800d454:	4630      	mov	r0, r6
 800d456:	f000 f82f 	bl	800d4b8 <__malloc_unlock>
 800d45a:	f104 000b 	add.w	r0, r4, #11
 800d45e:	1d23      	adds	r3, r4, #4
 800d460:	f020 0007 	bic.w	r0, r0, #7
 800d464:	1ac2      	subs	r2, r0, r3
 800d466:	bf1c      	itt	ne
 800d468:	1a1b      	subne	r3, r3, r0
 800d46a:	50a3      	strne	r3, [r4, r2]
 800d46c:	e7af      	b.n	800d3ce <_malloc_r+0x22>
 800d46e:	6862      	ldr	r2, [r4, #4]
 800d470:	42a3      	cmp	r3, r4
 800d472:	bf0c      	ite	eq
 800d474:	f8c8 2000 	streq.w	r2, [r8]
 800d478:	605a      	strne	r2, [r3, #4]
 800d47a:	e7eb      	b.n	800d454 <_malloc_r+0xa8>
 800d47c:	4623      	mov	r3, r4
 800d47e:	6864      	ldr	r4, [r4, #4]
 800d480:	e7ae      	b.n	800d3e0 <_malloc_r+0x34>
 800d482:	463c      	mov	r4, r7
 800d484:	687f      	ldr	r7, [r7, #4]
 800d486:	e7b6      	b.n	800d3f6 <_malloc_r+0x4a>
 800d488:	461a      	mov	r2, r3
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	d1fb      	bne.n	800d488 <_malloc_r+0xdc>
 800d490:	2300      	movs	r3, #0
 800d492:	6053      	str	r3, [r2, #4]
 800d494:	e7de      	b.n	800d454 <_malloc_r+0xa8>
 800d496:	230c      	movs	r3, #12
 800d498:	6033      	str	r3, [r6, #0]
 800d49a:	4630      	mov	r0, r6
 800d49c:	f000 f80c 	bl	800d4b8 <__malloc_unlock>
 800d4a0:	e794      	b.n	800d3cc <_malloc_r+0x20>
 800d4a2:	6005      	str	r5, [r0, #0]
 800d4a4:	e7d6      	b.n	800d454 <_malloc_r+0xa8>
 800d4a6:	bf00      	nop
 800d4a8:	24001040 	.word	0x24001040

0800d4ac <__malloc_lock>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	@ (800d4b4 <__malloc_lock+0x8>)
 800d4ae:	f7ff b912 	b.w	800c6d6 <__retarget_lock_acquire_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	24001038 	.word	0x24001038

0800d4b8 <__malloc_unlock>:
 800d4b8:	4801      	ldr	r0, [pc, #4]	@ (800d4c0 <__malloc_unlock+0x8>)
 800d4ba:	f7ff b90d 	b.w	800c6d8 <__retarget_lock_release_recursive>
 800d4be:	bf00      	nop
 800d4c0:	24001038 	.word	0x24001038

0800d4c4 <_Balloc>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	69c6      	ldr	r6, [r0, #28]
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	460d      	mov	r5, r1
 800d4cc:	b976      	cbnz	r6, 800d4ec <_Balloc+0x28>
 800d4ce:	2010      	movs	r0, #16
 800d4d0:	f7ff ff42 	bl	800d358 <malloc>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	61e0      	str	r0, [r4, #28]
 800d4d8:	b920      	cbnz	r0, 800d4e4 <_Balloc+0x20>
 800d4da:	4b18      	ldr	r3, [pc, #96]	@ (800d53c <_Balloc+0x78>)
 800d4dc:	4818      	ldr	r0, [pc, #96]	@ (800d540 <_Balloc+0x7c>)
 800d4de:	216b      	movs	r1, #107	@ 0x6b
 800d4e0:	f000 fdfc 	bl	800e0dc <__assert_func>
 800d4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4e8:	6006      	str	r6, [r0, #0]
 800d4ea:	60c6      	str	r6, [r0, #12]
 800d4ec:	69e6      	ldr	r6, [r4, #28]
 800d4ee:	68f3      	ldr	r3, [r6, #12]
 800d4f0:	b183      	cbz	r3, 800d514 <_Balloc+0x50>
 800d4f2:	69e3      	ldr	r3, [r4, #28]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4fa:	b9b8      	cbnz	r0, 800d52c <_Balloc+0x68>
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	fa01 f605 	lsl.w	r6, r1, r5
 800d502:	1d72      	adds	r2, r6, #5
 800d504:	0092      	lsls	r2, r2, #2
 800d506:	4620      	mov	r0, r4
 800d508:	f000 fe06 	bl	800e118 <_calloc_r>
 800d50c:	b160      	cbz	r0, 800d528 <_Balloc+0x64>
 800d50e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d512:	e00e      	b.n	800d532 <_Balloc+0x6e>
 800d514:	2221      	movs	r2, #33	@ 0x21
 800d516:	2104      	movs	r1, #4
 800d518:	4620      	mov	r0, r4
 800d51a:	f000 fdfd 	bl	800e118 <_calloc_r>
 800d51e:	69e3      	ldr	r3, [r4, #28]
 800d520:	60f0      	str	r0, [r6, #12]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1e4      	bne.n	800d4f2 <_Balloc+0x2e>
 800d528:	2000      	movs	r0, #0
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	6802      	ldr	r2, [r0, #0]
 800d52e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d532:	2300      	movs	r3, #0
 800d534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d538:	e7f7      	b.n	800d52a <_Balloc+0x66>
 800d53a:	bf00      	nop
 800d53c:	0800e4fd 	.word	0x0800e4fd
 800d540:	0800e57d 	.word	0x0800e57d

0800d544 <_Bfree>:
 800d544:	b570      	push	{r4, r5, r6, lr}
 800d546:	69c6      	ldr	r6, [r0, #28]
 800d548:	4605      	mov	r5, r0
 800d54a:	460c      	mov	r4, r1
 800d54c:	b976      	cbnz	r6, 800d56c <_Bfree+0x28>
 800d54e:	2010      	movs	r0, #16
 800d550:	f7ff ff02 	bl	800d358 <malloc>
 800d554:	4602      	mov	r2, r0
 800d556:	61e8      	str	r0, [r5, #28]
 800d558:	b920      	cbnz	r0, 800d564 <_Bfree+0x20>
 800d55a:	4b09      	ldr	r3, [pc, #36]	@ (800d580 <_Bfree+0x3c>)
 800d55c:	4809      	ldr	r0, [pc, #36]	@ (800d584 <_Bfree+0x40>)
 800d55e:	218f      	movs	r1, #143	@ 0x8f
 800d560:	f000 fdbc 	bl	800e0dc <__assert_func>
 800d564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d568:	6006      	str	r6, [r0, #0]
 800d56a:	60c6      	str	r6, [r0, #12]
 800d56c:	b13c      	cbz	r4, 800d57e <_Bfree+0x3a>
 800d56e:	69eb      	ldr	r3, [r5, #28]
 800d570:	6862      	ldr	r2, [r4, #4]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d578:	6021      	str	r1, [r4, #0]
 800d57a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d57e:	bd70      	pop	{r4, r5, r6, pc}
 800d580:	0800e4fd 	.word	0x0800e4fd
 800d584:	0800e57d 	.word	0x0800e57d

0800d588 <__multadd>:
 800d588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d58c:	690d      	ldr	r5, [r1, #16]
 800d58e:	4607      	mov	r7, r0
 800d590:	460c      	mov	r4, r1
 800d592:	461e      	mov	r6, r3
 800d594:	f101 0c14 	add.w	ip, r1, #20
 800d598:	2000      	movs	r0, #0
 800d59a:	f8dc 3000 	ldr.w	r3, [ip]
 800d59e:	b299      	uxth	r1, r3
 800d5a0:	fb02 6101 	mla	r1, r2, r1, r6
 800d5a4:	0c1e      	lsrs	r6, r3, #16
 800d5a6:	0c0b      	lsrs	r3, r1, #16
 800d5a8:	fb02 3306 	mla	r3, r2, r6, r3
 800d5ac:	b289      	uxth	r1, r1
 800d5ae:	3001      	adds	r0, #1
 800d5b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d5b4:	4285      	cmp	r5, r0
 800d5b6:	f84c 1b04 	str.w	r1, [ip], #4
 800d5ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d5be:	dcec      	bgt.n	800d59a <__multadd+0x12>
 800d5c0:	b30e      	cbz	r6, 800d606 <__multadd+0x7e>
 800d5c2:	68a3      	ldr	r3, [r4, #8]
 800d5c4:	42ab      	cmp	r3, r5
 800d5c6:	dc19      	bgt.n	800d5fc <__multadd+0x74>
 800d5c8:	6861      	ldr	r1, [r4, #4]
 800d5ca:	4638      	mov	r0, r7
 800d5cc:	3101      	adds	r1, #1
 800d5ce:	f7ff ff79 	bl	800d4c4 <_Balloc>
 800d5d2:	4680      	mov	r8, r0
 800d5d4:	b928      	cbnz	r0, 800d5e2 <__multadd+0x5a>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d60c <__multadd+0x84>)
 800d5da:	480d      	ldr	r0, [pc, #52]	@ (800d610 <__multadd+0x88>)
 800d5dc:	21ba      	movs	r1, #186	@ 0xba
 800d5de:	f000 fd7d 	bl	800e0dc <__assert_func>
 800d5e2:	6922      	ldr	r2, [r4, #16]
 800d5e4:	3202      	adds	r2, #2
 800d5e6:	f104 010c 	add.w	r1, r4, #12
 800d5ea:	0092      	lsls	r2, r2, #2
 800d5ec:	300c      	adds	r0, #12
 800d5ee:	f7ff f874 	bl	800c6da <memcpy>
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	f7ff ffa5 	bl	800d544 <_Bfree>
 800d5fa:	4644      	mov	r4, r8
 800d5fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d600:	3501      	adds	r5, #1
 800d602:	615e      	str	r6, [r3, #20]
 800d604:	6125      	str	r5, [r4, #16]
 800d606:	4620      	mov	r0, r4
 800d608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60c:	0800e56c 	.word	0x0800e56c
 800d610:	0800e57d 	.word	0x0800e57d

0800d614 <__hi0bits>:
 800d614:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d618:	4603      	mov	r3, r0
 800d61a:	bf36      	itet	cc
 800d61c:	0403      	lslcc	r3, r0, #16
 800d61e:	2000      	movcs	r0, #0
 800d620:	2010      	movcc	r0, #16
 800d622:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d626:	bf3c      	itt	cc
 800d628:	021b      	lslcc	r3, r3, #8
 800d62a:	3008      	addcc	r0, #8
 800d62c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d630:	bf3c      	itt	cc
 800d632:	011b      	lslcc	r3, r3, #4
 800d634:	3004      	addcc	r0, #4
 800d636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d63a:	bf3c      	itt	cc
 800d63c:	009b      	lslcc	r3, r3, #2
 800d63e:	3002      	addcc	r0, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	db05      	blt.n	800d650 <__hi0bits+0x3c>
 800d644:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d648:	f100 0001 	add.w	r0, r0, #1
 800d64c:	bf08      	it	eq
 800d64e:	2020      	moveq	r0, #32
 800d650:	4770      	bx	lr

0800d652 <__lo0bits>:
 800d652:	6803      	ldr	r3, [r0, #0]
 800d654:	4602      	mov	r2, r0
 800d656:	f013 0007 	ands.w	r0, r3, #7
 800d65a:	d00b      	beq.n	800d674 <__lo0bits+0x22>
 800d65c:	07d9      	lsls	r1, r3, #31
 800d65e:	d421      	bmi.n	800d6a4 <__lo0bits+0x52>
 800d660:	0798      	lsls	r0, r3, #30
 800d662:	bf49      	itett	mi
 800d664:	085b      	lsrmi	r3, r3, #1
 800d666:	089b      	lsrpl	r3, r3, #2
 800d668:	2001      	movmi	r0, #1
 800d66a:	6013      	strmi	r3, [r2, #0]
 800d66c:	bf5c      	itt	pl
 800d66e:	6013      	strpl	r3, [r2, #0]
 800d670:	2002      	movpl	r0, #2
 800d672:	4770      	bx	lr
 800d674:	b299      	uxth	r1, r3
 800d676:	b909      	cbnz	r1, 800d67c <__lo0bits+0x2a>
 800d678:	0c1b      	lsrs	r3, r3, #16
 800d67a:	2010      	movs	r0, #16
 800d67c:	b2d9      	uxtb	r1, r3
 800d67e:	b909      	cbnz	r1, 800d684 <__lo0bits+0x32>
 800d680:	3008      	adds	r0, #8
 800d682:	0a1b      	lsrs	r3, r3, #8
 800d684:	0719      	lsls	r1, r3, #28
 800d686:	bf04      	itt	eq
 800d688:	091b      	lsreq	r3, r3, #4
 800d68a:	3004      	addeq	r0, #4
 800d68c:	0799      	lsls	r1, r3, #30
 800d68e:	bf04      	itt	eq
 800d690:	089b      	lsreq	r3, r3, #2
 800d692:	3002      	addeq	r0, #2
 800d694:	07d9      	lsls	r1, r3, #31
 800d696:	d403      	bmi.n	800d6a0 <__lo0bits+0x4e>
 800d698:	085b      	lsrs	r3, r3, #1
 800d69a:	f100 0001 	add.w	r0, r0, #1
 800d69e:	d003      	beq.n	800d6a8 <__lo0bits+0x56>
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	4770      	bx	lr
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	4770      	bx	lr
 800d6a8:	2020      	movs	r0, #32
 800d6aa:	4770      	bx	lr

0800d6ac <__i2b>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	f7ff ff07 	bl	800d4c4 <_Balloc>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	b928      	cbnz	r0, 800d6c6 <__i2b+0x1a>
 800d6ba:	4b05      	ldr	r3, [pc, #20]	@ (800d6d0 <__i2b+0x24>)
 800d6bc:	4805      	ldr	r0, [pc, #20]	@ (800d6d4 <__i2b+0x28>)
 800d6be:	f240 1145 	movw	r1, #325	@ 0x145
 800d6c2:	f000 fd0b 	bl	800e0dc <__assert_func>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	6144      	str	r4, [r0, #20]
 800d6ca:	6103      	str	r3, [r0, #16]
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800e56c 	.word	0x0800e56c
 800d6d4:	0800e57d 	.word	0x0800e57d

0800d6d8 <__multiply>:
 800d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	4617      	mov	r7, r2
 800d6de:	690a      	ldr	r2, [r1, #16]
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	bfa8      	it	ge
 800d6e6:	463b      	movge	r3, r7
 800d6e8:	4689      	mov	r9, r1
 800d6ea:	bfa4      	itt	ge
 800d6ec:	460f      	movge	r7, r1
 800d6ee:	4699      	movge	r9, r3
 800d6f0:	693d      	ldr	r5, [r7, #16]
 800d6f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	eb05 060a 	add.w	r6, r5, sl
 800d6fe:	42b3      	cmp	r3, r6
 800d700:	b085      	sub	sp, #20
 800d702:	bfb8      	it	lt
 800d704:	3101      	addlt	r1, #1
 800d706:	f7ff fedd 	bl	800d4c4 <_Balloc>
 800d70a:	b930      	cbnz	r0, 800d71a <__multiply+0x42>
 800d70c:	4602      	mov	r2, r0
 800d70e:	4b41      	ldr	r3, [pc, #260]	@ (800d814 <__multiply+0x13c>)
 800d710:	4841      	ldr	r0, [pc, #260]	@ (800d818 <__multiply+0x140>)
 800d712:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d716:	f000 fce1 	bl	800e0dc <__assert_func>
 800d71a:	f100 0414 	add.w	r4, r0, #20
 800d71e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d722:	4623      	mov	r3, r4
 800d724:	2200      	movs	r2, #0
 800d726:	4573      	cmp	r3, lr
 800d728:	d320      	bcc.n	800d76c <__multiply+0x94>
 800d72a:	f107 0814 	add.w	r8, r7, #20
 800d72e:	f109 0114 	add.w	r1, r9, #20
 800d732:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d736:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d73a:	9302      	str	r3, [sp, #8]
 800d73c:	1beb      	subs	r3, r5, r7
 800d73e:	3b15      	subs	r3, #21
 800d740:	f023 0303 	bic.w	r3, r3, #3
 800d744:	3304      	adds	r3, #4
 800d746:	3715      	adds	r7, #21
 800d748:	42bd      	cmp	r5, r7
 800d74a:	bf38      	it	cc
 800d74c:	2304      	movcc	r3, #4
 800d74e:	9301      	str	r3, [sp, #4]
 800d750:	9b02      	ldr	r3, [sp, #8]
 800d752:	9103      	str	r1, [sp, #12]
 800d754:	428b      	cmp	r3, r1
 800d756:	d80c      	bhi.n	800d772 <__multiply+0x9a>
 800d758:	2e00      	cmp	r6, #0
 800d75a:	dd03      	ble.n	800d764 <__multiply+0x8c>
 800d75c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d760:	2b00      	cmp	r3, #0
 800d762:	d055      	beq.n	800d810 <__multiply+0x138>
 800d764:	6106      	str	r6, [r0, #16]
 800d766:	b005      	add	sp, #20
 800d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76c:	f843 2b04 	str.w	r2, [r3], #4
 800d770:	e7d9      	b.n	800d726 <__multiply+0x4e>
 800d772:	f8b1 a000 	ldrh.w	sl, [r1]
 800d776:	f1ba 0f00 	cmp.w	sl, #0
 800d77a:	d01f      	beq.n	800d7bc <__multiply+0xe4>
 800d77c:	46c4      	mov	ip, r8
 800d77e:	46a1      	mov	r9, r4
 800d780:	2700      	movs	r7, #0
 800d782:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d786:	f8d9 3000 	ldr.w	r3, [r9]
 800d78a:	fa1f fb82 	uxth.w	fp, r2
 800d78e:	b29b      	uxth	r3, r3
 800d790:	fb0a 330b 	mla	r3, sl, fp, r3
 800d794:	443b      	add	r3, r7
 800d796:	f8d9 7000 	ldr.w	r7, [r9]
 800d79a:	0c12      	lsrs	r2, r2, #16
 800d79c:	0c3f      	lsrs	r7, r7, #16
 800d79e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d7a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7ac:	4565      	cmp	r5, ip
 800d7ae:	f849 3b04 	str.w	r3, [r9], #4
 800d7b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d7b6:	d8e4      	bhi.n	800d782 <__multiply+0xaa>
 800d7b8:	9b01      	ldr	r3, [sp, #4]
 800d7ba:	50e7      	str	r7, [r4, r3]
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d7c2:	3104      	adds	r1, #4
 800d7c4:	f1b9 0f00 	cmp.w	r9, #0
 800d7c8:	d020      	beq.n	800d80c <__multiply+0x134>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	4647      	mov	r7, r8
 800d7ce:	46a4      	mov	ip, r4
 800d7d0:	f04f 0a00 	mov.w	sl, #0
 800d7d4:	f8b7 b000 	ldrh.w	fp, [r7]
 800d7d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d7dc:	fb09 220b 	mla	r2, r9, fp, r2
 800d7e0:	4452      	add	r2, sl
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7e8:	f84c 3b04 	str.w	r3, [ip], #4
 800d7ec:	f857 3b04 	ldr.w	r3, [r7], #4
 800d7f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7f4:	f8bc 3000 	ldrh.w	r3, [ip]
 800d7f8:	fb09 330a 	mla	r3, r9, sl, r3
 800d7fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d800:	42bd      	cmp	r5, r7
 800d802:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d806:	d8e5      	bhi.n	800d7d4 <__multiply+0xfc>
 800d808:	9a01      	ldr	r2, [sp, #4]
 800d80a:	50a3      	str	r3, [r4, r2]
 800d80c:	3404      	adds	r4, #4
 800d80e:	e79f      	b.n	800d750 <__multiply+0x78>
 800d810:	3e01      	subs	r6, #1
 800d812:	e7a1      	b.n	800d758 <__multiply+0x80>
 800d814:	0800e56c 	.word	0x0800e56c
 800d818:	0800e57d 	.word	0x0800e57d

0800d81c <__pow5mult>:
 800d81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d820:	4615      	mov	r5, r2
 800d822:	f012 0203 	ands.w	r2, r2, #3
 800d826:	4607      	mov	r7, r0
 800d828:	460e      	mov	r6, r1
 800d82a:	d007      	beq.n	800d83c <__pow5mult+0x20>
 800d82c:	4c25      	ldr	r4, [pc, #148]	@ (800d8c4 <__pow5mult+0xa8>)
 800d82e:	3a01      	subs	r2, #1
 800d830:	2300      	movs	r3, #0
 800d832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d836:	f7ff fea7 	bl	800d588 <__multadd>
 800d83a:	4606      	mov	r6, r0
 800d83c:	10ad      	asrs	r5, r5, #2
 800d83e:	d03d      	beq.n	800d8bc <__pow5mult+0xa0>
 800d840:	69fc      	ldr	r4, [r7, #28]
 800d842:	b97c      	cbnz	r4, 800d864 <__pow5mult+0x48>
 800d844:	2010      	movs	r0, #16
 800d846:	f7ff fd87 	bl	800d358 <malloc>
 800d84a:	4602      	mov	r2, r0
 800d84c:	61f8      	str	r0, [r7, #28]
 800d84e:	b928      	cbnz	r0, 800d85c <__pow5mult+0x40>
 800d850:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c8 <__pow5mult+0xac>)
 800d852:	481e      	ldr	r0, [pc, #120]	@ (800d8cc <__pow5mult+0xb0>)
 800d854:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d858:	f000 fc40 	bl	800e0dc <__assert_func>
 800d85c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d860:	6004      	str	r4, [r0, #0]
 800d862:	60c4      	str	r4, [r0, #12]
 800d864:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d86c:	b94c      	cbnz	r4, 800d882 <__pow5mult+0x66>
 800d86e:	f240 2171 	movw	r1, #625	@ 0x271
 800d872:	4638      	mov	r0, r7
 800d874:	f7ff ff1a 	bl	800d6ac <__i2b>
 800d878:	2300      	movs	r3, #0
 800d87a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d87e:	4604      	mov	r4, r0
 800d880:	6003      	str	r3, [r0, #0]
 800d882:	f04f 0900 	mov.w	r9, #0
 800d886:	07eb      	lsls	r3, r5, #31
 800d888:	d50a      	bpl.n	800d8a0 <__pow5mult+0x84>
 800d88a:	4631      	mov	r1, r6
 800d88c:	4622      	mov	r2, r4
 800d88e:	4638      	mov	r0, r7
 800d890:	f7ff ff22 	bl	800d6d8 <__multiply>
 800d894:	4631      	mov	r1, r6
 800d896:	4680      	mov	r8, r0
 800d898:	4638      	mov	r0, r7
 800d89a:	f7ff fe53 	bl	800d544 <_Bfree>
 800d89e:	4646      	mov	r6, r8
 800d8a0:	106d      	asrs	r5, r5, #1
 800d8a2:	d00b      	beq.n	800d8bc <__pow5mult+0xa0>
 800d8a4:	6820      	ldr	r0, [r4, #0]
 800d8a6:	b938      	cbnz	r0, 800d8b8 <__pow5mult+0x9c>
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	f7ff ff13 	bl	800d6d8 <__multiply>
 800d8b2:	6020      	str	r0, [r4, #0]
 800d8b4:	f8c0 9000 	str.w	r9, [r0]
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	e7e4      	b.n	800d886 <__pow5mult+0x6a>
 800d8bc:	4630      	mov	r0, r6
 800d8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c2:	bf00      	nop
 800d8c4:	0800e630 	.word	0x0800e630
 800d8c8:	0800e4fd 	.word	0x0800e4fd
 800d8cc:	0800e57d 	.word	0x0800e57d

0800d8d0 <__lshift>:
 800d8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	6849      	ldr	r1, [r1, #4]
 800d8d8:	6923      	ldr	r3, [r4, #16]
 800d8da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	4691      	mov	r9, r2
 800d8e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8e8:	f108 0601 	add.w	r6, r8, #1
 800d8ec:	42b3      	cmp	r3, r6
 800d8ee:	db0b      	blt.n	800d908 <__lshift+0x38>
 800d8f0:	4638      	mov	r0, r7
 800d8f2:	f7ff fde7 	bl	800d4c4 <_Balloc>
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	b948      	cbnz	r0, 800d90e <__lshift+0x3e>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	4b28      	ldr	r3, [pc, #160]	@ (800d9a0 <__lshift+0xd0>)
 800d8fe:	4829      	ldr	r0, [pc, #164]	@ (800d9a4 <__lshift+0xd4>)
 800d900:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d904:	f000 fbea 	bl	800e0dc <__assert_func>
 800d908:	3101      	adds	r1, #1
 800d90a:	005b      	lsls	r3, r3, #1
 800d90c:	e7ee      	b.n	800d8ec <__lshift+0x1c>
 800d90e:	2300      	movs	r3, #0
 800d910:	f100 0114 	add.w	r1, r0, #20
 800d914:	f100 0210 	add.w	r2, r0, #16
 800d918:	4618      	mov	r0, r3
 800d91a:	4553      	cmp	r3, sl
 800d91c:	db33      	blt.n	800d986 <__lshift+0xb6>
 800d91e:	6920      	ldr	r0, [r4, #16]
 800d920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d924:	f104 0314 	add.w	r3, r4, #20
 800d928:	f019 091f 	ands.w	r9, r9, #31
 800d92c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d930:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d934:	d02b      	beq.n	800d98e <__lshift+0xbe>
 800d936:	f1c9 0e20 	rsb	lr, r9, #32
 800d93a:	468a      	mov	sl, r1
 800d93c:	2200      	movs	r2, #0
 800d93e:	6818      	ldr	r0, [r3, #0]
 800d940:	fa00 f009 	lsl.w	r0, r0, r9
 800d944:	4310      	orrs	r0, r2
 800d946:	f84a 0b04 	str.w	r0, [sl], #4
 800d94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d94e:	459c      	cmp	ip, r3
 800d950:	fa22 f20e 	lsr.w	r2, r2, lr
 800d954:	d8f3      	bhi.n	800d93e <__lshift+0x6e>
 800d956:	ebac 0304 	sub.w	r3, ip, r4
 800d95a:	3b15      	subs	r3, #21
 800d95c:	f023 0303 	bic.w	r3, r3, #3
 800d960:	3304      	adds	r3, #4
 800d962:	f104 0015 	add.w	r0, r4, #21
 800d966:	4560      	cmp	r0, ip
 800d968:	bf88      	it	hi
 800d96a:	2304      	movhi	r3, #4
 800d96c:	50ca      	str	r2, [r1, r3]
 800d96e:	b10a      	cbz	r2, 800d974 <__lshift+0xa4>
 800d970:	f108 0602 	add.w	r6, r8, #2
 800d974:	3e01      	subs	r6, #1
 800d976:	4638      	mov	r0, r7
 800d978:	612e      	str	r6, [r5, #16]
 800d97a:	4621      	mov	r1, r4
 800d97c:	f7ff fde2 	bl	800d544 <_Bfree>
 800d980:	4628      	mov	r0, r5
 800d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d986:	f842 0f04 	str.w	r0, [r2, #4]!
 800d98a:	3301      	adds	r3, #1
 800d98c:	e7c5      	b.n	800d91a <__lshift+0x4a>
 800d98e:	3904      	subs	r1, #4
 800d990:	f853 2b04 	ldr.w	r2, [r3], #4
 800d994:	f841 2f04 	str.w	r2, [r1, #4]!
 800d998:	459c      	cmp	ip, r3
 800d99a:	d8f9      	bhi.n	800d990 <__lshift+0xc0>
 800d99c:	e7ea      	b.n	800d974 <__lshift+0xa4>
 800d99e:	bf00      	nop
 800d9a0:	0800e56c 	.word	0x0800e56c
 800d9a4:	0800e57d 	.word	0x0800e57d

0800d9a8 <__mcmp>:
 800d9a8:	690a      	ldr	r2, [r1, #16]
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	6900      	ldr	r0, [r0, #16]
 800d9ae:	1a80      	subs	r0, r0, r2
 800d9b0:	b530      	push	{r4, r5, lr}
 800d9b2:	d10e      	bne.n	800d9d2 <__mcmp+0x2a>
 800d9b4:	3314      	adds	r3, #20
 800d9b6:	3114      	adds	r1, #20
 800d9b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d9bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d9c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d9c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d9c8:	4295      	cmp	r5, r2
 800d9ca:	d003      	beq.n	800d9d4 <__mcmp+0x2c>
 800d9cc:	d205      	bcs.n	800d9da <__mcmp+0x32>
 800d9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d2:	bd30      	pop	{r4, r5, pc}
 800d9d4:	42a3      	cmp	r3, r4
 800d9d6:	d3f3      	bcc.n	800d9c0 <__mcmp+0x18>
 800d9d8:	e7fb      	b.n	800d9d2 <__mcmp+0x2a>
 800d9da:	2001      	movs	r0, #1
 800d9dc:	e7f9      	b.n	800d9d2 <__mcmp+0x2a>
	...

0800d9e0 <__mdiff>:
 800d9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	4689      	mov	r9, r1
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	4648      	mov	r0, r9
 800d9ec:	4614      	mov	r4, r2
 800d9ee:	f7ff ffdb 	bl	800d9a8 <__mcmp>
 800d9f2:	1e05      	subs	r5, r0, #0
 800d9f4:	d112      	bne.n	800da1c <__mdiff+0x3c>
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7ff fd63 	bl	800d4c4 <_Balloc>
 800d9fe:	4602      	mov	r2, r0
 800da00:	b928      	cbnz	r0, 800da0e <__mdiff+0x2e>
 800da02:	4b3f      	ldr	r3, [pc, #252]	@ (800db00 <__mdiff+0x120>)
 800da04:	f240 2137 	movw	r1, #567	@ 0x237
 800da08:	483e      	ldr	r0, [pc, #248]	@ (800db04 <__mdiff+0x124>)
 800da0a:	f000 fb67 	bl	800e0dc <__assert_func>
 800da0e:	2301      	movs	r3, #1
 800da10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da14:	4610      	mov	r0, r2
 800da16:	b003      	add	sp, #12
 800da18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1c:	bfbc      	itt	lt
 800da1e:	464b      	movlt	r3, r9
 800da20:	46a1      	movlt	r9, r4
 800da22:	4630      	mov	r0, r6
 800da24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800da28:	bfba      	itte	lt
 800da2a:	461c      	movlt	r4, r3
 800da2c:	2501      	movlt	r5, #1
 800da2e:	2500      	movge	r5, #0
 800da30:	f7ff fd48 	bl	800d4c4 <_Balloc>
 800da34:	4602      	mov	r2, r0
 800da36:	b918      	cbnz	r0, 800da40 <__mdiff+0x60>
 800da38:	4b31      	ldr	r3, [pc, #196]	@ (800db00 <__mdiff+0x120>)
 800da3a:	f240 2145 	movw	r1, #581	@ 0x245
 800da3e:	e7e3      	b.n	800da08 <__mdiff+0x28>
 800da40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800da44:	6926      	ldr	r6, [r4, #16]
 800da46:	60c5      	str	r5, [r0, #12]
 800da48:	f109 0310 	add.w	r3, r9, #16
 800da4c:	f109 0514 	add.w	r5, r9, #20
 800da50:	f104 0e14 	add.w	lr, r4, #20
 800da54:	f100 0b14 	add.w	fp, r0, #20
 800da58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800da5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	46d9      	mov	r9, fp
 800da64:	f04f 0c00 	mov.w	ip, #0
 800da68:	9b01      	ldr	r3, [sp, #4]
 800da6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800da6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	fa1f f38a 	uxth.w	r3, sl
 800da78:	4619      	mov	r1, r3
 800da7a:	b283      	uxth	r3, r0
 800da7c:	1acb      	subs	r3, r1, r3
 800da7e:	0c00      	lsrs	r0, r0, #16
 800da80:	4463      	add	r3, ip
 800da82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800da86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da90:	4576      	cmp	r6, lr
 800da92:	f849 3b04 	str.w	r3, [r9], #4
 800da96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da9a:	d8e5      	bhi.n	800da68 <__mdiff+0x88>
 800da9c:	1b33      	subs	r3, r6, r4
 800da9e:	3b15      	subs	r3, #21
 800daa0:	f023 0303 	bic.w	r3, r3, #3
 800daa4:	3415      	adds	r4, #21
 800daa6:	3304      	adds	r3, #4
 800daa8:	42a6      	cmp	r6, r4
 800daaa:	bf38      	it	cc
 800daac:	2304      	movcc	r3, #4
 800daae:	441d      	add	r5, r3
 800dab0:	445b      	add	r3, fp
 800dab2:	461e      	mov	r6, r3
 800dab4:	462c      	mov	r4, r5
 800dab6:	4544      	cmp	r4, r8
 800dab8:	d30e      	bcc.n	800dad8 <__mdiff+0xf8>
 800daba:	f108 0103 	add.w	r1, r8, #3
 800dabe:	1b49      	subs	r1, r1, r5
 800dac0:	f021 0103 	bic.w	r1, r1, #3
 800dac4:	3d03      	subs	r5, #3
 800dac6:	45a8      	cmp	r8, r5
 800dac8:	bf38      	it	cc
 800daca:	2100      	movcc	r1, #0
 800dacc:	440b      	add	r3, r1
 800dace:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dad2:	b191      	cbz	r1, 800dafa <__mdiff+0x11a>
 800dad4:	6117      	str	r7, [r2, #16]
 800dad6:	e79d      	b.n	800da14 <__mdiff+0x34>
 800dad8:	f854 1b04 	ldr.w	r1, [r4], #4
 800dadc:	46e6      	mov	lr, ip
 800dade:	0c08      	lsrs	r0, r1, #16
 800dae0:	fa1c fc81 	uxtah	ip, ip, r1
 800dae4:	4471      	add	r1, lr
 800dae6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800daea:	b289      	uxth	r1, r1
 800daec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800daf0:	f846 1b04 	str.w	r1, [r6], #4
 800daf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800daf8:	e7dd      	b.n	800dab6 <__mdiff+0xd6>
 800dafa:	3f01      	subs	r7, #1
 800dafc:	e7e7      	b.n	800dace <__mdiff+0xee>
 800dafe:	bf00      	nop
 800db00:	0800e56c 	.word	0x0800e56c
 800db04:	0800e57d 	.word	0x0800e57d

0800db08 <__d2b>:
 800db08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db0c:	460f      	mov	r7, r1
 800db0e:	2101      	movs	r1, #1
 800db10:	ec59 8b10 	vmov	r8, r9, d0
 800db14:	4616      	mov	r6, r2
 800db16:	f7ff fcd5 	bl	800d4c4 <_Balloc>
 800db1a:	4604      	mov	r4, r0
 800db1c:	b930      	cbnz	r0, 800db2c <__d2b+0x24>
 800db1e:	4602      	mov	r2, r0
 800db20:	4b23      	ldr	r3, [pc, #140]	@ (800dbb0 <__d2b+0xa8>)
 800db22:	4824      	ldr	r0, [pc, #144]	@ (800dbb4 <__d2b+0xac>)
 800db24:	f240 310f 	movw	r1, #783	@ 0x30f
 800db28:	f000 fad8 	bl	800e0dc <__assert_func>
 800db2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db34:	b10d      	cbz	r5, 800db3a <__d2b+0x32>
 800db36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db3a:	9301      	str	r3, [sp, #4]
 800db3c:	f1b8 0300 	subs.w	r3, r8, #0
 800db40:	d023      	beq.n	800db8a <__d2b+0x82>
 800db42:	4668      	mov	r0, sp
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	f7ff fd84 	bl	800d652 <__lo0bits>
 800db4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db4e:	b1d0      	cbz	r0, 800db86 <__d2b+0x7e>
 800db50:	f1c0 0320 	rsb	r3, r0, #32
 800db54:	fa02 f303 	lsl.w	r3, r2, r3
 800db58:	430b      	orrs	r3, r1
 800db5a:	40c2      	lsrs	r2, r0
 800db5c:	6163      	str	r3, [r4, #20]
 800db5e:	9201      	str	r2, [sp, #4]
 800db60:	9b01      	ldr	r3, [sp, #4]
 800db62:	61a3      	str	r3, [r4, #24]
 800db64:	2b00      	cmp	r3, #0
 800db66:	bf0c      	ite	eq
 800db68:	2201      	moveq	r2, #1
 800db6a:	2202      	movne	r2, #2
 800db6c:	6122      	str	r2, [r4, #16]
 800db6e:	b1a5      	cbz	r5, 800db9a <__d2b+0x92>
 800db70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800db74:	4405      	add	r5, r0
 800db76:	603d      	str	r5, [r7, #0]
 800db78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800db7c:	6030      	str	r0, [r6, #0]
 800db7e:	4620      	mov	r0, r4
 800db80:	b003      	add	sp, #12
 800db82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db86:	6161      	str	r1, [r4, #20]
 800db88:	e7ea      	b.n	800db60 <__d2b+0x58>
 800db8a:	a801      	add	r0, sp, #4
 800db8c:	f7ff fd61 	bl	800d652 <__lo0bits>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	6163      	str	r3, [r4, #20]
 800db94:	3020      	adds	r0, #32
 800db96:	2201      	movs	r2, #1
 800db98:	e7e8      	b.n	800db6c <__d2b+0x64>
 800db9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dba2:	6038      	str	r0, [r7, #0]
 800dba4:	6918      	ldr	r0, [r3, #16]
 800dba6:	f7ff fd35 	bl	800d614 <__hi0bits>
 800dbaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbae:	e7e5      	b.n	800db7c <__d2b+0x74>
 800dbb0:	0800e56c 	.word	0x0800e56c
 800dbb4:	0800e57d 	.word	0x0800e57d

0800dbb8 <__sfputc_r>:
 800dbb8:	6893      	ldr	r3, [r2, #8]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	b410      	push	{r4}
 800dbc0:	6093      	str	r3, [r2, #8]
 800dbc2:	da08      	bge.n	800dbd6 <__sfputc_r+0x1e>
 800dbc4:	6994      	ldr	r4, [r2, #24]
 800dbc6:	42a3      	cmp	r3, r4
 800dbc8:	db01      	blt.n	800dbce <__sfputc_r+0x16>
 800dbca:	290a      	cmp	r1, #10
 800dbcc:	d103      	bne.n	800dbd6 <__sfputc_r+0x1e>
 800dbce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbd2:	f000 b9df 	b.w	800df94 <__swbuf_r>
 800dbd6:	6813      	ldr	r3, [r2, #0]
 800dbd8:	1c58      	adds	r0, r3, #1
 800dbda:	6010      	str	r0, [r2, #0]
 800dbdc:	7019      	strb	r1, [r3, #0]
 800dbde:	4608      	mov	r0, r1
 800dbe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <__sfputs_r>:
 800dbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe8:	4606      	mov	r6, r0
 800dbea:	460f      	mov	r7, r1
 800dbec:	4614      	mov	r4, r2
 800dbee:	18d5      	adds	r5, r2, r3
 800dbf0:	42ac      	cmp	r4, r5
 800dbf2:	d101      	bne.n	800dbf8 <__sfputs_r+0x12>
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e007      	b.n	800dc08 <__sfputs_r+0x22>
 800dbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbfc:	463a      	mov	r2, r7
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f7ff ffda 	bl	800dbb8 <__sfputc_r>
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	d1f3      	bne.n	800dbf0 <__sfputs_r+0xa>
 800dc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc0c <_vfiprintf_r>:
 800dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	460d      	mov	r5, r1
 800dc12:	b09d      	sub	sp, #116	@ 0x74
 800dc14:	4614      	mov	r4, r2
 800dc16:	4698      	mov	r8, r3
 800dc18:	4606      	mov	r6, r0
 800dc1a:	b118      	cbz	r0, 800dc24 <_vfiprintf_r+0x18>
 800dc1c:	6a03      	ldr	r3, [r0, #32]
 800dc1e:	b90b      	cbnz	r3, 800dc24 <_vfiprintf_r+0x18>
 800dc20:	f7fe fc50 	bl	800c4c4 <__sinit>
 800dc24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc26:	07d9      	lsls	r1, r3, #31
 800dc28:	d405      	bmi.n	800dc36 <_vfiprintf_r+0x2a>
 800dc2a:	89ab      	ldrh	r3, [r5, #12]
 800dc2c:	059a      	lsls	r2, r3, #22
 800dc2e:	d402      	bmi.n	800dc36 <_vfiprintf_r+0x2a>
 800dc30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc32:	f7fe fd50 	bl	800c6d6 <__retarget_lock_acquire_recursive>
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	071b      	lsls	r3, r3, #28
 800dc3a:	d501      	bpl.n	800dc40 <_vfiprintf_r+0x34>
 800dc3c:	692b      	ldr	r3, [r5, #16]
 800dc3e:	b99b      	cbnz	r3, 800dc68 <_vfiprintf_r+0x5c>
 800dc40:	4629      	mov	r1, r5
 800dc42:	4630      	mov	r0, r6
 800dc44:	f000 f9e4 	bl	800e010 <__swsetup_r>
 800dc48:	b170      	cbz	r0, 800dc68 <_vfiprintf_r+0x5c>
 800dc4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc4c:	07dc      	lsls	r4, r3, #31
 800dc4e:	d504      	bpl.n	800dc5a <_vfiprintf_r+0x4e>
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
 800dc54:	b01d      	add	sp, #116	@ 0x74
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	0598      	lsls	r0, r3, #22
 800dc5e:	d4f7      	bmi.n	800dc50 <_vfiprintf_r+0x44>
 800dc60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc62:	f7fe fd39 	bl	800c6d8 <__retarget_lock_release_recursive>
 800dc66:	e7f3      	b.n	800dc50 <_vfiprintf_r+0x44>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6c:	2320      	movs	r3, #32
 800dc6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc72:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc76:	2330      	movs	r3, #48	@ 0x30
 800dc78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de28 <_vfiprintf_r+0x21c>
 800dc7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc80:	f04f 0901 	mov.w	r9, #1
 800dc84:	4623      	mov	r3, r4
 800dc86:	469a      	mov	sl, r3
 800dc88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc8c:	b10a      	cbz	r2, 800dc92 <_vfiprintf_r+0x86>
 800dc8e:	2a25      	cmp	r2, #37	@ 0x25
 800dc90:	d1f9      	bne.n	800dc86 <_vfiprintf_r+0x7a>
 800dc92:	ebba 0b04 	subs.w	fp, sl, r4
 800dc96:	d00b      	beq.n	800dcb0 <_vfiprintf_r+0xa4>
 800dc98:	465b      	mov	r3, fp
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f7ff ffa1 	bl	800dbe6 <__sfputs_r>
 800dca4:	3001      	adds	r0, #1
 800dca6:	f000 80a7 	beq.w	800ddf8 <_vfiprintf_r+0x1ec>
 800dcaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcac:	445a      	add	r2, fp
 800dcae:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 809f 	beq.w	800ddf8 <_vfiprintf_r+0x1ec>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcc4:	f10a 0a01 	add.w	sl, sl, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcd2:	4654      	mov	r4, sl
 800dcd4:	2205      	movs	r2, #5
 800dcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcda:	4853      	ldr	r0, [pc, #332]	@ (800de28 <_vfiprintf_r+0x21c>)
 800dcdc:	f7f2 fb00 	bl	80002e0 <memchr>
 800dce0:	9a04      	ldr	r2, [sp, #16]
 800dce2:	b9d8      	cbnz	r0, 800dd1c <_vfiprintf_r+0x110>
 800dce4:	06d1      	lsls	r1, r2, #27
 800dce6:	bf44      	itt	mi
 800dce8:	2320      	movmi	r3, #32
 800dcea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcee:	0713      	lsls	r3, r2, #28
 800dcf0:	bf44      	itt	mi
 800dcf2:	232b      	movmi	r3, #43	@ 0x2b
 800dcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcfe:	d015      	beq.n	800dd2c <_vfiprintf_r+0x120>
 800dd00:	9a07      	ldr	r2, [sp, #28]
 800dd02:	4654      	mov	r4, sl
 800dd04:	2000      	movs	r0, #0
 800dd06:	f04f 0c0a 	mov.w	ip, #10
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd10:	3b30      	subs	r3, #48	@ 0x30
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	d94b      	bls.n	800ddae <_vfiprintf_r+0x1a2>
 800dd16:	b1b0      	cbz	r0, 800dd46 <_vfiprintf_r+0x13a>
 800dd18:	9207      	str	r2, [sp, #28]
 800dd1a:	e014      	b.n	800dd46 <_vfiprintf_r+0x13a>
 800dd1c:	eba0 0308 	sub.w	r3, r0, r8
 800dd20:	fa09 f303 	lsl.w	r3, r9, r3
 800dd24:	4313      	orrs	r3, r2
 800dd26:	9304      	str	r3, [sp, #16]
 800dd28:	46a2      	mov	sl, r4
 800dd2a:	e7d2      	b.n	800dcd2 <_vfiprintf_r+0xc6>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	1d19      	adds	r1, r3, #4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	9103      	str	r1, [sp, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfbb      	ittet	lt
 800dd38:	425b      	neglt	r3, r3
 800dd3a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd3e:	9307      	strge	r3, [sp, #28]
 800dd40:	9307      	strlt	r3, [sp, #28]
 800dd42:	bfb8      	it	lt
 800dd44:	9204      	strlt	r2, [sp, #16]
 800dd46:	7823      	ldrb	r3, [r4, #0]
 800dd48:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd4a:	d10a      	bne.n	800dd62 <_vfiprintf_r+0x156>
 800dd4c:	7863      	ldrb	r3, [r4, #1]
 800dd4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd50:	d132      	bne.n	800ddb8 <_vfiprintf_r+0x1ac>
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	1d1a      	adds	r2, r3, #4
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	9203      	str	r2, [sp, #12]
 800dd5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd5e:	3402      	adds	r4, #2
 800dd60:	9305      	str	r3, [sp, #20]
 800dd62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de38 <_vfiprintf_r+0x22c>
 800dd66:	7821      	ldrb	r1, [r4, #0]
 800dd68:	2203      	movs	r2, #3
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	f7f2 fab8 	bl	80002e0 <memchr>
 800dd70:	b138      	cbz	r0, 800dd82 <_vfiprintf_r+0x176>
 800dd72:	9b04      	ldr	r3, [sp, #16]
 800dd74:	eba0 000a 	sub.w	r0, r0, sl
 800dd78:	2240      	movs	r2, #64	@ 0x40
 800dd7a:	4082      	lsls	r2, r0
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	3401      	adds	r4, #1
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd86:	4829      	ldr	r0, [pc, #164]	@ (800de2c <_vfiprintf_r+0x220>)
 800dd88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd8c:	2206      	movs	r2, #6
 800dd8e:	f7f2 faa7 	bl	80002e0 <memchr>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d03f      	beq.n	800de16 <_vfiprintf_r+0x20a>
 800dd96:	4b26      	ldr	r3, [pc, #152]	@ (800de30 <_vfiprintf_r+0x224>)
 800dd98:	bb1b      	cbnz	r3, 800dde2 <_vfiprintf_r+0x1d6>
 800dd9a:	9b03      	ldr	r3, [sp, #12]
 800dd9c:	3307      	adds	r3, #7
 800dd9e:	f023 0307 	bic.w	r3, r3, #7
 800dda2:	3308      	adds	r3, #8
 800dda4:	9303      	str	r3, [sp, #12]
 800dda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dda8:	443b      	add	r3, r7
 800ddaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddac:	e76a      	b.n	800dc84 <_vfiprintf_r+0x78>
 800ddae:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddb2:	460c      	mov	r4, r1
 800ddb4:	2001      	movs	r0, #1
 800ddb6:	e7a8      	b.n	800dd0a <_vfiprintf_r+0xfe>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	3401      	adds	r4, #1
 800ddbc:	9305      	str	r3, [sp, #20]
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	f04f 0c0a 	mov.w	ip, #10
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddca:	3a30      	subs	r2, #48	@ 0x30
 800ddcc:	2a09      	cmp	r2, #9
 800ddce:	d903      	bls.n	800ddd8 <_vfiprintf_r+0x1cc>
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d0c6      	beq.n	800dd62 <_vfiprintf_r+0x156>
 800ddd4:	9105      	str	r1, [sp, #20]
 800ddd6:	e7c4      	b.n	800dd62 <_vfiprintf_r+0x156>
 800ddd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dddc:	4604      	mov	r4, r0
 800ddde:	2301      	movs	r3, #1
 800dde0:	e7f0      	b.n	800ddc4 <_vfiprintf_r+0x1b8>
 800dde2:	ab03      	add	r3, sp, #12
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	462a      	mov	r2, r5
 800dde8:	4b12      	ldr	r3, [pc, #72]	@ (800de34 <_vfiprintf_r+0x228>)
 800ddea:	a904      	add	r1, sp, #16
 800ddec:	4630      	mov	r0, r6
 800ddee:	f7fd ff37 	bl	800bc60 <_printf_float>
 800ddf2:	4607      	mov	r7, r0
 800ddf4:	1c78      	adds	r0, r7, #1
 800ddf6:	d1d6      	bne.n	800dda6 <_vfiprintf_r+0x19a>
 800ddf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddfa:	07d9      	lsls	r1, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_vfiprintf_r+0x1fe>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	059a      	lsls	r2, r3, #22
 800de02:	d402      	bmi.n	800de0a <_vfiprintf_r+0x1fe>
 800de04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de06:	f7fe fc67 	bl	800c6d8 <__retarget_lock_release_recursive>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	065b      	lsls	r3, r3, #25
 800de0e:	f53f af1f 	bmi.w	800dc50 <_vfiprintf_r+0x44>
 800de12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de14:	e71e      	b.n	800dc54 <_vfiprintf_r+0x48>
 800de16:	ab03      	add	r3, sp, #12
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	462a      	mov	r2, r5
 800de1c:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <_vfiprintf_r+0x228>)
 800de1e:	a904      	add	r1, sp, #16
 800de20:	4630      	mov	r0, r6
 800de22:	f7fe f9a5 	bl	800c170 <_printf_i>
 800de26:	e7e4      	b.n	800ddf2 <_vfiprintf_r+0x1e6>
 800de28:	0800e5d6 	.word	0x0800e5d6
 800de2c:	0800e5e0 	.word	0x0800e5e0
 800de30:	0800bc61 	.word	0x0800bc61
 800de34:	0800dbe7 	.word	0x0800dbe7
 800de38:	0800e5dc 	.word	0x0800e5dc

0800de3c <__sflush_r>:
 800de3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de44:	0716      	lsls	r6, r2, #28
 800de46:	4605      	mov	r5, r0
 800de48:	460c      	mov	r4, r1
 800de4a:	d454      	bmi.n	800def6 <__sflush_r+0xba>
 800de4c:	684b      	ldr	r3, [r1, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dc02      	bgt.n	800de58 <__sflush_r+0x1c>
 800de52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de54:	2b00      	cmp	r3, #0
 800de56:	dd48      	ble.n	800deea <__sflush_r+0xae>
 800de58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de5a:	2e00      	cmp	r6, #0
 800de5c:	d045      	beq.n	800deea <__sflush_r+0xae>
 800de5e:	2300      	movs	r3, #0
 800de60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de64:	682f      	ldr	r7, [r5, #0]
 800de66:	6a21      	ldr	r1, [r4, #32]
 800de68:	602b      	str	r3, [r5, #0]
 800de6a:	d030      	beq.n	800dece <__sflush_r+0x92>
 800de6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	0759      	lsls	r1, r3, #29
 800de72:	d505      	bpl.n	800de80 <__sflush_r+0x44>
 800de74:	6863      	ldr	r3, [r4, #4]
 800de76:	1ad2      	subs	r2, r2, r3
 800de78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de7a:	b10b      	cbz	r3, 800de80 <__sflush_r+0x44>
 800de7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de7e:	1ad2      	subs	r2, r2, r3
 800de80:	2300      	movs	r3, #0
 800de82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de84:	6a21      	ldr	r1, [r4, #32]
 800de86:	4628      	mov	r0, r5
 800de88:	47b0      	blx	r6
 800de8a:	1c43      	adds	r3, r0, #1
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	d106      	bne.n	800de9e <__sflush_r+0x62>
 800de90:	6829      	ldr	r1, [r5, #0]
 800de92:	291d      	cmp	r1, #29
 800de94:	d82b      	bhi.n	800deee <__sflush_r+0xb2>
 800de96:	4a2a      	ldr	r2, [pc, #168]	@ (800df40 <__sflush_r+0x104>)
 800de98:	40ca      	lsrs	r2, r1
 800de9a:	07d6      	lsls	r6, r2, #31
 800de9c:	d527      	bpl.n	800deee <__sflush_r+0xb2>
 800de9e:	2200      	movs	r2, #0
 800dea0:	6062      	str	r2, [r4, #4]
 800dea2:	04d9      	lsls	r1, r3, #19
 800dea4:	6922      	ldr	r2, [r4, #16]
 800dea6:	6022      	str	r2, [r4, #0]
 800dea8:	d504      	bpl.n	800deb4 <__sflush_r+0x78>
 800deaa:	1c42      	adds	r2, r0, #1
 800deac:	d101      	bne.n	800deb2 <__sflush_r+0x76>
 800deae:	682b      	ldr	r3, [r5, #0]
 800deb0:	b903      	cbnz	r3, 800deb4 <__sflush_r+0x78>
 800deb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800deb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800deb6:	602f      	str	r7, [r5, #0]
 800deb8:	b1b9      	cbz	r1, 800deea <__sflush_r+0xae>
 800deba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800debe:	4299      	cmp	r1, r3
 800dec0:	d002      	beq.n	800dec8 <__sflush_r+0x8c>
 800dec2:	4628      	mov	r0, r5
 800dec4:	f7ff f9fe 	bl	800d2c4 <_free_r>
 800dec8:	2300      	movs	r3, #0
 800deca:	6363      	str	r3, [r4, #52]	@ 0x34
 800decc:	e00d      	b.n	800deea <__sflush_r+0xae>
 800dece:	2301      	movs	r3, #1
 800ded0:	4628      	mov	r0, r5
 800ded2:	47b0      	blx	r6
 800ded4:	4602      	mov	r2, r0
 800ded6:	1c50      	adds	r0, r2, #1
 800ded8:	d1c9      	bne.n	800de6e <__sflush_r+0x32>
 800deda:	682b      	ldr	r3, [r5, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d0c6      	beq.n	800de6e <__sflush_r+0x32>
 800dee0:	2b1d      	cmp	r3, #29
 800dee2:	d001      	beq.n	800dee8 <__sflush_r+0xac>
 800dee4:	2b16      	cmp	r3, #22
 800dee6:	d11e      	bne.n	800df26 <__sflush_r+0xea>
 800dee8:	602f      	str	r7, [r5, #0]
 800deea:	2000      	movs	r0, #0
 800deec:	e022      	b.n	800df34 <__sflush_r+0xf8>
 800deee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800def2:	b21b      	sxth	r3, r3
 800def4:	e01b      	b.n	800df2e <__sflush_r+0xf2>
 800def6:	690f      	ldr	r7, [r1, #16]
 800def8:	2f00      	cmp	r7, #0
 800defa:	d0f6      	beq.n	800deea <__sflush_r+0xae>
 800defc:	0793      	lsls	r3, r2, #30
 800defe:	680e      	ldr	r6, [r1, #0]
 800df00:	bf08      	it	eq
 800df02:	694b      	ldreq	r3, [r1, #20]
 800df04:	600f      	str	r7, [r1, #0]
 800df06:	bf18      	it	ne
 800df08:	2300      	movne	r3, #0
 800df0a:	eba6 0807 	sub.w	r8, r6, r7
 800df0e:	608b      	str	r3, [r1, #8]
 800df10:	f1b8 0f00 	cmp.w	r8, #0
 800df14:	dde9      	ble.n	800deea <__sflush_r+0xae>
 800df16:	6a21      	ldr	r1, [r4, #32]
 800df18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df1a:	4643      	mov	r3, r8
 800df1c:	463a      	mov	r2, r7
 800df1e:	4628      	mov	r0, r5
 800df20:	47b0      	blx	r6
 800df22:	2800      	cmp	r0, #0
 800df24:	dc08      	bgt.n	800df38 <__sflush_r+0xfc>
 800df26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df2e:	81a3      	strh	r3, [r4, #12]
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df38:	4407      	add	r7, r0
 800df3a:	eba8 0800 	sub.w	r8, r8, r0
 800df3e:	e7e7      	b.n	800df10 <__sflush_r+0xd4>
 800df40:	20400001 	.word	0x20400001

0800df44 <_fflush_r>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	690b      	ldr	r3, [r1, #16]
 800df48:	4605      	mov	r5, r0
 800df4a:	460c      	mov	r4, r1
 800df4c:	b913      	cbnz	r3, 800df54 <_fflush_r+0x10>
 800df4e:	2500      	movs	r5, #0
 800df50:	4628      	mov	r0, r5
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	b118      	cbz	r0, 800df5e <_fflush_r+0x1a>
 800df56:	6a03      	ldr	r3, [r0, #32]
 800df58:	b90b      	cbnz	r3, 800df5e <_fflush_r+0x1a>
 800df5a:	f7fe fab3 	bl	800c4c4 <__sinit>
 800df5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d0f3      	beq.n	800df4e <_fflush_r+0xa>
 800df66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df68:	07d0      	lsls	r0, r2, #31
 800df6a:	d404      	bmi.n	800df76 <_fflush_r+0x32>
 800df6c:	0599      	lsls	r1, r3, #22
 800df6e:	d402      	bmi.n	800df76 <_fflush_r+0x32>
 800df70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df72:	f7fe fbb0 	bl	800c6d6 <__retarget_lock_acquire_recursive>
 800df76:	4628      	mov	r0, r5
 800df78:	4621      	mov	r1, r4
 800df7a:	f7ff ff5f 	bl	800de3c <__sflush_r>
 800df7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df80:	07da      	lsls	r2, r3, #31
 800df82:	4605      	mov	r5, r0
 800df84:	d4e4      	bmi.n	800df50 <_fflush_r+0xc>
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	059b      	lsls	r3, r3, #22
 800df8a:	d4e1      	bmi.n	800df50 <_fflush_r+0xc>
 800df8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df8e:	f7fe fba3 	bl	800c6d8 <__retarget_lock_release_recursive>
 800df92:	e7dd      	b.n	800df50 <_fflush_r+0xc>

0800df94 <__swbuf_r>:
 800df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df96:	460e      	mov	r6, r1
 800df98:	4614      	mov	r4, r2
 800df9a:	4605      	mov	r5, r0
 800df9c:	b118      	cbz	r0, 800dfa6 <__swbuf_r+0x12>
 800df9e:	6a03      	ldr	r3, [r0, #32]
 800dfa0:	b90b      	cbnz	r3, 800dfa6 <__swbuf_r+0x12>
 800dfa2:	f7fe fa8f 	bl	800c4c4 <__sinit>
 800dfa6:	69a3      	ldr	r3, [r4, #24]
 800dfa8:	60a3      	str	r3, [r4, #8]
 800dfaa:	89a3      	ldrh	r3, [r4, #12]
 800dfac:	071a      	lsls	r2, r3, #28
 800dfae:	d501      	bpl.n	800dfb4 <__swbuf_r+0x20>
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	b943      	cbnz	r3, 800dfc6 <__swbuf_r+0x32>
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	f000 f82a 	bl	800e010 <__swsetup_r>
 800dfbc:	b118      	cbz	r0, 800dfc6 <__swbuf_r+0x32>
 800dfbe:	f04f 37ff 	mov.w	r7, #4294967295
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	6922      	ldr	r2, [r4, #16]
 800dfca:	1a98      	subs	r0, r3, r2
 800dfcc:	6963      	ldr	r3, [r4, #20]
 800dfce:	b2f6      	uxtb	r6, r6
 800dfd0:	4283      	cmp	r3, r0
 800dfd2:	4637      	mov	r7, r6
 800dfd4:	dc05      	bgt.n	800dfe2 <__swbuf_r+0x4e>
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4628      	mov	r0, r5
 800dfda:	f7ff ffb3 	bl	800df44 <_fflush_r>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d1ed      	bne.n	800dfbe <__swbuf_r+0x2a>
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	60a3      	str	r3, [r4, #8]
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	6022      	str	r2, [r4, #0]
 800dfee:	701e      	strb	r6, [r3, #0]
 800dff0:	6962      	ldr	r2, [r4, #20]
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d004      	beq.n	800e002 <__swbuf_r+0x6e>
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	07db      	lsls	r3, r3, #31
 800dffc:	d5e1      	bpl.n	800dfc2 <__swbuf_r+0x2e>
 800dffe:	2e0a      	cmp	r6, #10
 800e000:	d1df      	bne.n	800dfc2 <__swbuf_r+0x2e>
 800e002:	4621      	mov	r1, r4
 800e004:	4628      	mov	r0, r5
 800e006:	f7ff ff9d 	bl	800df44 <_fflush_r>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d0d9      	beq.n	800dfc2 <__swbuf_r+0x2e>
 800e00e:	e7d6      	b.n	800dfbe <__swbuf_r+0x2a>

0800e010 <__swsetup_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4b29      	ldr	r3, [pc, #164]	@ (800e0b8 <__swsetup_r+0xa8>)
 800e014:	4605      	mov	r5, r0
 800e016:	6818      	ldr	r0, [r3, #0]
 800e018:	460c      	mov	r4, r1
 800e01a:	b118      	cbz	r0, 800e024 <__swsetup_r+0x14>
 800e01c:	6a03      	ldr	r3, [r0, #32]
 800e01e:	b90b      	cbnz	r3, 800e024 <__swsetup_r+0x14>
 800e020:	f7fe fa50 	bl	800c4c4 <__sinit>
 800e024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e028:	0719      	lsls	r1, r3, #28
 800e02a:	d422      	bmi.n	800e072 <__swsetup_r+0x62>
 800e02c:	06da      	lsls	r2, r3, #27
 800e02e:	d407      	bmi.n	800e040 <__swsetup_r+0x30>
 800e030:	2209      	movs	r2, #9
 800e032:	602a      	str	r2, [r5, #0]
 800e034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	f04f 30ff 	mov.w	r0, #4294967295
 800e03e:	e033      	b.n	800e0a8 <__swsetup_r+0x98>
 800e040:	0758      	lsls	r0, r3, #29
 800e042:	d512      	bpl.n	800e06a <__swsetup_r+0x5a>
 800e044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e046:	b141      	cbz	r1, 800e05a <__swsetup_r+0x4a>
 800e048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e04c:	4299      	cmp	r1, r3
 800e04e:	d002      	beq.n	800e056 <__swsetup_r+0x46>
 800e050:	4628      	mov	r0, r5
 800e052:	f7ff f937 	bl	800d2c4 <_free_r>
 800e056:	2300      	movs	r3, #0
 800e058:	6363      	str	r3, [r4, #52]	@ 0x34
 800e05a:	89a3      	ldrh	r3, [r4, #12]
 800e05c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e060:	81a3      	strh	r3, [r4, #12]
 800e062:	2300      	movs	r3, #0
 800e064:	6063      	str	r3, [r4, #4]
 800e066:	6923      	ldr	r3, [r4, #16]
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	89a3      	ldrh	r3, [r4, #12]
 800e06c:	f043 0308 	orr.w	r3, r3, #8
 800e070:	81a3      	strh	r3, [r4, #12]
 800e072:	6923      	ldr	r3, [r4, #16]
 800e074:	b94b      	cbnz	r3, 800e08a <__swsetup_r+0x7a>
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e080:	d003      	beq.n	800e08a <__swsetup_r+0x7a>
 800e082:	4621      	mov	r1, r4
 800e084:	4628      	mov	r0, r5
 800e086:	f000 f8b3 	bl	800e1f0 <__smakebuf_r>
 800e08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e08e:	f013 0201 	ands.w	r2, r3, #1
 800e092:	d00a      	beq.n	800e0aa <__swsetup_r+0x9a>
 800e094:	2200      	movs	r2, #0
 800e096:	60a2      	str	r2, [r4, #8]
 800e098:	6962      	ldr	r2, [r4, #20]
 800e09a:	4252      	negs	r2, r2
 800e09c:	61a2      	str	r2, [r4, #24]
 800e09e:	6922      	ldr	r2, [r4, #16]
 800e0a0:	b942      	cbnz	r2, 800e0b4 <__swsetup_r+0xa4>
 800e0a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0a6:	d1c5      	bne.n	800e034 <__swsetup_r+0x24>
 800e0a8:	bd38      	pop	{r3, r4, r5, pc}
 800e0aa:	0799      	lsls	r1, r3, #30
 800e0ac:	bf58      	it	pl
 800e0ae:	6962      	ldrpl	r2, [r4, #20]
 800e0b0:	60a2      	str	r2, [r4, #8]
 800e0b2:	e7f4      	b.n	800e09e <__swsetup_r+0x8e>
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	e7f7      	b.n	800e0a8 <__swsetup_r+0x98>
 800e0b8:	2400001c 	.word	0x2400001c

0800e0bc <_sbrk_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4d06      	ldr	r5, [pc, #24]	@ (800e0d8 <_sbrk_r+0x1c>)
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	602b      	str	r3, [r5, #0]
 800e0c8:	f7f5 fec2 	bl	8003e50 <_sbrk>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d102      	bne.n	800e0d6 <_sbrk_r+0x1a>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	b103      	cbz	r3, 800e0d6 <_sbrk_r+0x1a>
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	24001034 	.word	0x24001034

0800e0dc <__assert_func>:
 800e0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0de:	4614      	mov	r4, r2
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	4b09      	ldr	r3, [pc, #36]	@ (800e108 <__assert_func+0x2c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	68d8      	ldr	r0, [r3, #12]
 800e0ea:	b14c      	cbz	r4, 800e100 <__assert_func+0x24>
 800e0ec:	4b07      	ldr	r3, [pc, #28]	@ (800e10c <__assert_func+0x30>)
 800e0ee:	9100      	str	r1, [sp, #0]
 800e0f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0f4:	4906      	ldr	r1, [pc, #24]	@ (800e110 <__assert_func+0x34>)
 800e0f6:	462b      	mov	r3, r5
 800e0f8:	f000 f842 	bl	800e180 <fiprintf>
 800e0fc:	f000 f8d6 	bl	800e2ac <abort>
 800e100:	4b04      	ldr	r3, [pc, #16]	@ (800e114 <__assert_func+0x38>)
 800e102:	461c      	mov	r4, r3
 800e104:	e7f3      	b.n	800e0ee <__assert_func+0x12>
 800e106:	bf00      	nop
 800e108:	2400001c 	.word	0x2400001c
 800e10c:	0800e5f1 	.word	0x0800e5f1
 800e110:	0800e5fe 	.word	0x0800e5fe
 800e114:	0800e62c 	.word	0x0800e62c

0800e118 <_calloc_r>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	fba1 5402 	umull	r5, r4, r1, r2
 800e11e:	b934      	cbnz	r4, 800e12e <_calloc_r+0x16>
 800e120:	4629      	mov	r1, r5
 800e122:	f7ff f943 	bl	800d3ac <_malloc_r>
 800e126:	4606      	mov	r6, r0
 800e128:	b928      	cbnz	r0, 800e136 <_calloc_r+0x1e>
 800e12a:	4630      	mov	r0, r6
 800e12c:	bd70      	pop	{r4, r5, r6, pc}
 800e12e:	220c      	movs	r2, #12
 800e130:	6002      	str	r2, [r0, #0]
 800e132:	2600      	movs	r6, #0
 800e134:	e7f9      	b.n	800e12a <_calloc_r+0x12>
 800e136:	462a      	mov	r2, r5
 800e138:	4621      	mov	r1, r4
 800e13a:	f7fe fa4e 	bl	800c5da <memset>
 800e13e:	e7f4      	b.n	800e12a <_calloc_r+0x12>

0800e140 <__ascii_mbtowc>:
 800e140:	b082      	sub	sp, #8
 800e142:	b901      	cbnz	r1, 800e146 <__ascii_mbtowc+0x6>
 800e144:	a901      	add	r1, sp, #4
 800e146:	b142      	cbz	r2, 800e15a <__ascii_mbtowc+0x1a>
 800e148:	b14b      	cbz	r3, 800e15e <__ascii_mbtowc+0x1e>
 800e14a:	7813      	ldrb	r3, [r2, #0]
 800e14c:	600b      	str	r3, [r1, #0]
 800e14e:	7812      	ldrb	r2, [r2, #0]
 800e150:	1e10      	subs	r0, r2, #0
 800e152:	bf18      	it	ne
 800e154:	2001      	movne	r0, #1
 800e156:	b002      	add	sp, #8
 800e158:	4770      	bx	lr
 800e15a:	4610      	mov	r0, r2
 800e15c:	e7fb      	b.n	800e156 <__ascii_mbtowc+0x16>
 800e15e:	f06f 0001 	mvn.w	r0, #1
 800e162:	e7f8      	b.n	800e156 <__ascii_mbtowc+0x16>

0800e164 <__ascii_wctomb>:
 800e164:	4603      	mov	r3, r0
 800e166:	4608      	mov	r0, r1
 800e168:	b141      	cbz	r1, 800e17c <__ascii_wctomb+0x18>
 800e16a:	2aff      	cmp	r2, #255	@ 0xff
 800e16c:	d904      	bls.n	800e178 <__ascii_wctomb+0x14>
 800e16e:	228a      	movs	r2, #138	@ 0x8a
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	f04f 30ff 	mov.w	r0, #4294967295
 800e176:	4770      	bx	lr
 800e178:	700a      	strb	r2, [r1, #0]
 800e17a:	2001      	movs	r0, #1
 800e17c:	4770      	bx	lr
	...

0800e180 <fiprintf>:
 800e180:	b40e      	push	{r1, r2, r3}
 800e182:	b503      	push	{r0, r1, lr}
 800e184:	4601      	mov	r1, r0
 800e186:	ab03      	add	r3, sp, #12
 800e188:	4805      	ldr	r0, [pc, #20]	@ (800e1a0 <fiprintf+0x20>)
 800e18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e18e:	6800      	ldr	r0, [r0, #0]
 800e190:	9301      	str	r3, [sp, #4]
 800e192:	f7ff fd3b 	bl	800dc0c <_vfiprintf_r>
 800e196:	b002      	add	sp, #8
 800e198:	f85d eb04 	ldr.w	lr, [sp], #4
 800e19c:	b003      	add	sp, #12
 800e19e:	4770      	bx	lr
 800e1a0:	2400001c 	.word	0x2400001c

0800e1a4 <__swhatbuf_r>:
 800e1a4:	b570      	push	{r4, r5, r6, lr}
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ac:	2900      	cmp	r1, #0
 800e1ae:	b096      	sub	sp, #88	@ 0x58
 800e1b0:	4615      	mov	r5, r2
 800e1b2:	461e      	mov	r6, r3
 800e1b4:	da0d      	bge.n	800e1d2 <__swhatbuf_r+0x2e>
 800e1b6:	89a3      	ldrh	r3, [r4, #12]
 800e1b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e1bc:	f04f 0100 	mov.w	r1, #0
 800e1c0:	bf14      	ite	ne
 800e1c2:	2340      	movne	r3, #64	@ 0x40
 800e1c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	6031      	str	r1, [r6, #0]
 800e1cc:	602b      	str	r3, [r5, #0]
 800e1ce:	b016      	add	sp, #88	@ 0x58
 800e1d0:	bd70      	pop	{r4, r5, r6, pc}
 800e1d2:	466a      	mov	r2, sp
 800e1d4:	f000 f848 	bl	800e268 <_fstat_r>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	dbec      	blt.n	800e1b6 <__swhatbuf_r+0x12>
 800e1dc:	9901      	ldr	r1, [sp, #4]
 800e1de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e1e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e1e6:	4259      	negs	r1, r3
 800e1e8:	4159      	adcs	r1, r3
 800e1ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1ee:	e7eb      	b.n	800e1c8 <__swhatbuf_r+0x24>

0800e1f0 <__smakebuf_r>:
 800e1f0:	898b      	ldrh	r3, [r1, #12]
 800e1f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1f4:	079d      	lsls	r5, r3, #30
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	d507      	bpl.n	800e20c <__smakebuf_r+0x1c>
 800e1fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	6123      	str	r3, [r4, #16]
 800e204:	2301      	movs	r3, #1
 800e206:	6163      	str	r3, [r4, #20]
 800e208:	b003      	add	sp, #12
 800e20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e20c:	ab01      	add	r3, sp, #4
 800e20e:	466a      	mov	r2, sp
 800e210:	f7ff ffc8 	bl	800e1a4 <__swhatbuf_r>
 800e214:	9f00      	ldr	r7, [sp, #0]
 800e216:	4605      	mov	r5, r0
 800e218:	4639      	mov	r1, r7
 800e21a:	4630      	mov	r0, r6
 800e21c:	f7ff f8c6 	bl	800d3ac <_malloc_r>
 800e220:	b948      	cbnz	r0, 800e236 <__smakebuf_r+0x46>
 800e222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e226:	059a      	lsls	r2, r3, #22
 800e228:	d4ee      	bmi.n	800e208 <__smakebuf_r+0x18>
 800e22a:	f023 0303 	bic.w	r3, r3, #3
 800e22e:	f043 0302 	orr.w	r3, r3, #2
 800e232:	81a3      	strh	r3, [r4, #12]
 800e234:	e7e2      	b.n	800e1fc <__smakebuf_r+0xc>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	6020      	str	r0, [r4, #0]
 800e23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e246:	b15b      	cbz	r3, 800e260 <__smakebuf_r+0x70>
 800e248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e24c:	4630      	mov	r0, r6
 800e24e:	f000 f81d 	bl	800e28c <_isatty_r>
 800e252:	b128      	cbz	r0, 800e260 <__smakebuf_r+0x70>
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f023 0303 	bic.w	r3, r3, #3
 800e25a:	f043 0301 	orr.w	r3, r3, #1
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	431d      	orrs	r5, r3
 800e264:	81a5      	strh	r5, [r4, #12]
 800e266:	e7cf      	b.n	800e208 <__smakebuf_r+0x18>

0800e268 <_fstat_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d07      	ldr	r5, [pc, #28]	@ (800e288 <_fstat_r+0x20>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	602b      	str	r3, [r5, #0]
 800e276:	f7f5 fdc2 	bl	8003dfe <_fstat>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	d102      	bne.n	800e284 <_fstat_r+0x1c>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	b103      	cbz	r3, 800e284 <_fstat_r+0x1c>
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop
 800e288:	24001034 	.word	0x24001034

0800e28c <_isatty_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	4d06      	ldr	r5, [pc, #24]	@ (800e2a8 <_isatty_r+0x1c>)
 800e290:	2300      	movs	r3, #0
 800e292:	4604      	mov	r4, r0
 800e294:	4608      	mov	r0, r1
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	f7f5 fdc1 	bl	8003e1e <_isatty>
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	d102      	bne.n	800e2a6 <_isatty_r+0x1a>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	b103      	cbz	r3, 800e2a6 <_isatty_r+0x1a>
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	24001034 	.word	0x24001034

0800e2ac <abort>:
 800e2ac:	b508      	push	{r3, lr}
 800e2ae:	2006      	movs	r0, #6
 800e2b0:	f000 f82c 	bl	800e30c <raise>
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	f7f5 fd52 	bl	8003d5e <_exit>

0800e2ba <_raise_r>:
 800e2ba:	291f      	cmp	r1, #31
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4605      	mov	r5, r0
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	d904      	bls.n	800e2ce <_raise_r+0x14>
 800e2c4:	2316      	movs	r3, #22
 800e2c6:	6003      	str	r3, [r0, #0]
 800e2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2d0:	b112      	cbz	r2, 800e2d8 <_raise_r+0x1e>
 800e2d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d6:	b94b      	cbnz	r3, 800e2ec <_raise_r+0x32>
 800e2d8:	4628      	mov	r0, r5
 800e2da:	f000 f831 	bl	800e340 <_getpid_r>
 800e2de:	4622      	mov	r2, r4
 800e2e0:	4601      	mov	r1, r0
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e8:	f000 b818 	b.w	800e31c <_kill_r>
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d00a      	beq.n	800e306 <_raise_r+0x4c>
 800e2f0:	1c59      	adds	r1, r3, #1
 800e2f2:	d103      	bne.n	800e2fc <_raise_r+0x42>
 800e2f4:	2316      	movs	r3, #22
 800e2f6:	6003      	str	r3, [r0, #0]
 800e2f8:	2001      	movs	r0, #1
 800e2fa:	e7e7      	b.n	800e2cc <_raise_r+0x12>
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e302:	4620      	mov	r0, r4
 800e304:	4798      	blx	r3
 800e306:	2000      	movs	r0, #0
 800e308:	e7e0      	b.n	800e2cc <_raise_r+0x12>
	...

0800e30c <raise>:
 800e30c:	4b02      	ldr	r3, [pc, #8]	@ (800e318 <raise+0xc>)
 800e30e:	4601      	mov	r1, r0
 800e310:	6818      	ldr	r0, [r3, #0]
 800e312:	f7ff bfd2 	b.w	800e2ba <_raise_r>
 800e316:	bf00      	nop
 800e318:	2400001c 	.word	0x2400001c

0800e31c <_kill_r>:
 800e31c:	b538      	push	{r3, r4, r5, lr}
 800e31e:	4d07      	ldr	r5, [pc, #28]	@ (800e33c <_kill_r+0x20>)
 800e320:	2300      	movs	r3, #0
 800e322:	4604      	mov	r4, r0
 800e324:	4608      	mov	r0, r1
 800e326:	4611      	mov	r1, r2
 800e328:	602b      	str	r3, [r5, #0]
 800e32a:	f7f5 fd08 	bl	8003d3e <_kill>
 800e32e:	1c43      	adds	r3, r0, #1
 800e330:	d102      	bne.n	800e338 <_kill_r+0x1c>
 800e332:	682b      	ldr	r3, [r5, #0]
 800e334:	b103      	cbz	r3, 800e338 <_kill_r+0x1c>
 800e336:	6023      	str	r3, [r4, #0]
 800e338:	bd38      	pop	{r3, r4, r5, pc}
 800e33a:	bf00      	nop
 800e33c:	24001034 	.word	0x24001034

0800e340 <_getpid_r>:
 800e340:	f7f5 bcf5 	b.w	8003d2e <_getpid>

0800e344 <_init>:
 800e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e346:	bf00      	nop
 800e348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e34a:	bc08      	pop	{r3}
 800e34c:	469e      	mov	lr, r3
 800e34e:	4770      	bx	lr

0800e350 <_fini>:
 800e350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e352:	bf00      	nop
 800e354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e356:	bc08      	pop	{r3}
 800e358:	469e      	mov	lr, r3
 800e35a:	4770      	bx	lr
